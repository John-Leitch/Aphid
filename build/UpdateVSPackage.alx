#'std';
#'system/process';
head('VS Package Update Tool');

var hasFlag = @(flag) getCommandLineArgs()=?@==flag;
var hasAllFlag = '-a' | hasFlag;

var xcopy = @(src, pattern, dst) {
    var si = new ProcessStartInfo(
        'c:\\windows\\system32\\xcopy.exe',
        format(
            '/e /s /j /y /f "{0}{1}{2}" "{3}"',
            src,
            (src ~= '[\\\\/]$') ? '' : '\\',
            pattern,
            dst));

    si.UseShellExecute = false;
    var p = Process.Start(si);
    p.WaitForExit();
};

printInfo('Searching for library dirs');
var libDirs = 'C:\\Users\\John\\AppData\\Local\\Microsoft\\VisualStudio' @io.find.dirs('Library');

_c = macro(@(f) { ('-' + quote(f)) | hasFlag || hasAllFlag });

if (_c(l)) {
    subhead('Detected Extension Libraries');
    libDirs->Console.WriteLine;
}

if (_c(b)) {
    subhead('Binary Deployment');
    printInfo('Copying bins');
    var binSrc =
        'c:/source/aphid'
        @io.first.dir('*package*')
        @io.first.file('*aphid.debug.dll')
        io.up;

    libDirs->io.up->@xcopy(binSrc, '*');
}

if (_c(d)) {
    subhead('Library Cleanup');
    printInfo('Deleting old scripts');
    libDirs-<io.all.files->@{
        print('Deleting ~Yellow~{0}~R~', $_);
        $_ | io.del;
    }
}

if (_c(s)) {
    subhead('Library Deployment');
    printInfo('Copying updated scripts');
    libDirs->@xcopy("c:\\source\\aphid\\components.aphid\\library", "*.alx");
}

