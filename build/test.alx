//io.find.files('*scriptedunittests.*.dll')->@format('c:\\tools\\ilmerge\\ilmerge.exe /out:{0} Components.Aphid.ScriptedUnitTests.dll Components.Aphid64.dll') @join('\r\n') @io.txt('m.cmd')
#'Std';
#'System/NuGet';
#'System/Process';
this @mix(console);
this @mix(io);
this @mix(color);

header('Test Console Launcher {0}' :: AphidExpression.Assembly.GetName().Version);

console.importArgs({ bool useNunit: '-nunit', bool fast: '-fast', bool fast2: '-fast2' });

var testDlls = script
    .dir()
    |> up
    @() (io.dirs($_, 'Com*Test*'))    
    -<@find.dirs('bin')
    -<@find.files('components.aphid.*test*.dll')
    -?(@()!fast || !$_.ToLower().Contains('scripted'))
    -?(@()!fast2 || !$_.ToLower().Contains('serializ'))
    -?((((AssemblyName.GetAssemblyName))
        @> (@.ProcessorArchitecture)
        @> @()$_ == ProcessorArchitecture.MSIL || $_ == ProcessorArchitecture.Amd64));

success('Found Assemblies:');
testDlls->code;    
testDlls->AssemblyName.GetAssemblyName->AppDomain.CurrentDomain.Load;

var testExe;

var runCmd = @(fmt) {
    if (testExe | file) {
        success('Found at {0}', testExe |> highlight);
    } else {
        fail('Could not find {0}', testExe |> highlight);
        exit(0xbad01);
    }

    var testCmd =
        testDlls
        ->@format('"{0}"')
        @string.Join(' ')
        @format(fmt, testExe, app.dir())
        |> prepareCommand;

    print(testCmd);
    var testAsm = load testExe;

    testCmd[1]
    |> ArgLexer.Tokenize
    @AppDomain.CurrentDomain.ExecuteAssemblyByName(testAsm.GetName())
    |> exit;
};

// runtime.resolve.trace = true;

if (!useNunit) {
    info('Installing MS Test Platform');
    installPackage('Microsoft.TestPlatform');
    query('Searching for vstest.console.exe');
    testExe = app.path('packages') @find.files('vstest.console.exe') /!^!;

    info('Searching for extended reflection asm');
    var reflectionAsmPath =
        'd:/program files (x86)'
        @first.dir('*visual*')
        @find.file('*microsoft.extendedreflection.dll');

    if (reflectionAsmPath | file) {
        success('Found {0}', reflectionAsmPath | highlight);

        var reflectionAsm = load reflectionAsmPath;

        if (reflectionAsm != null) {
            success('Loaded asm');
        } else {
            fail('Failed loading asm');
        }

        reflectionAsm | runtime.resolve.name;

        var privateAsm = testExe @sibling(reflectionAsmPath |> name);

        if (privateAsm | not.file) {
            printQuery('Copying private asm');
            copy(reflectionAsmPath, privateAsm);
        } else {
            info('Private asm already exists');
        }
    }

    runCmd('"{0}" {2} ' +
        '/Parallel ' + 
        '/Platform:x64 ' + 
        '/Framework:.NETFramework,Version=v4.8 ' + 
        '/logger:trx;LogFileName={1}\\TestResults.trx ' +
        '/logger:console;verbosity=minimal ' +
        // '/InIsolation ' +
        '');
        //'/ListDiscoverers ' +
        // '/ListExecutors ' +
        // '/ListLoggers ' +
        // '/ListSettingsProviders ' +
        // ' -- ' +
        // 'MSTest.InProcMode=true ' +
        // 'RunConfiguration.DisableAppDomain=true');
} else {
    info('Installing NUnit ConsoleRunner');
    installPackage('NUnit.ConsoleRunner');
    query('Searching for console runner exe');
    testExe = app.dir() @find.file('Nunit3-console.exe');
}

