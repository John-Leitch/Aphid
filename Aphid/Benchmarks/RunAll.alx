#'Std';
#'System/Process';
#'System/Nuget';
#'Cli/Powershell';

using System.IO;
using System.Text;

var args = new List[string](Environment.GetCommandLineArgs());
var backupDB = args.Contains('-backup');
var useSingleProcess = args.Contains('-inproc');
var saveCharts = args.Contains('-charts');

var ignore = [
    '581bb73 Updated interop type caching to use hash sets.'
];

var verbosity = 3;
var config;
var root = Path.Combine(Path.GetDirectoryName(this['$script']), '..', '..') | Path.GetFullPath;
var testRoot = @Path.Combine(Path.Combine(root, '..', 'AphidBenchMark') | Path.GetFullPath);
var sln = testRoot <| 'Aphid.sln';
var csProj = testRoot <| 'Aphid\\Aphid.csproj';
var mantispidCsProj = testRoot <| 'Mantispid\\Mantispid.csproj';
var mantispidExe = testRoot <| 'Mantispid\\bin\\Release\\Mantispid.exe';
var benchRel = 'Aphid\\Benchmarks';
var testSrc = benchRel @Path.Combine(root);
var testDst = testRoot <| benchRel;

var testBin;
var testObj = testRoot <| 'Aphid\\obj';

var testLibBin = testRoot <| 'Components.Aphid\\bin';
var testLibObj = testRoot <| 'Components.Aphid\\obj';

var exe;

var setBinDir = @{
    testBin = testRoot <| 'Aphid\\bin';
    
};
setBinDir();
var nextAphidCmd = @() exe + (useSingleProcess ? ' run2.alx' : ' run.alx');

var tmpDir = testSrc + '\\BenchmarkTemp';
var cd = @Directory.SetCurrentDirectory(testRoot());
var buildNum = 9000;
var prevVersion = @() '0.5.2.{0}' :: [ buildNum-- ];
var exists = File.Exists;
var read = File.ReadAllText;
var write = File.WriteAllText;

var files = @(patternOrPath, path) path defined ? 
    Directory.EnumerateFiles(path, patternOrPath, SearchOption.AllDirectories) :
    Directory.EnumerateFiles(patternOrPath, '*', SearchOption.AllDirectories);
    
@ ~# (cmd) {
    if (verbosity > 2) {
        cmd | Cli.StyleEscape @printInfo('Command: ~Cyan~{0}~R~');
    }

    #> ('cmd /c ' + cmd); 
};

var init = @{
    if (Directory.Exists(testRoot())) {
        cd();
        ~# 'git fetch --all';        
        ~# 'git reset --hard origin/master';
        ~# 'git pull';
    } else {
        ~# ('git clone https://github.com/John-Leitch/Aphid.git ' + testRoot());
        cd();
    }
    
    ~# ('mkdir ' + tmpDir);
    ~# ('del ' + testDst + '\\history.* /q');

    restorePackages();
    msBuild.init();
    buildMantispid();
};

var restorePackages = @() ~# ('"{0}" restore "{1}"' :: [ nuget.exe, sln ]);

var pl = @(text) text  ~~ '(\\w)\\[([^\\s]+?)\\](,|$)' -. Groups ->@()$_[1] + $_[2];

var msBuild = {
    verbosityValues: 'q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic]' | pl,
    searchPaths: [ '', ' (x86)' ]-<@(p) [ 'c', 'd' ]->@format("{1}:\\program files{0}", p),
    exeCache: testSrc + '\\msbuildLocation.cfg',
    isExeCached: exeCache | exists,
    init: @{
        printQuery('Searching for MSBUILD');

        if ((!isExeCached || !((exe = exeCache | read) | exists)) &&
            !exists(exe = findExe())) {
            printError('Could not find MSBUILD');
            exit(0xbad80);
        }

        exe @write(exeCache);
        printSuccess('Found MSBUILD at ~Cyan~{0}~R~', msBuild.exe);
    },
    exe: null,
    findExe: @() searchPaths
        -<(@()psContext.exec('dir "{0}" msbuild.exe -r'::$_))
        ->@.FullName
        ->FileVersionInfo.GetVersionInfo
        -&@.FileVersion
        -/@.Key
        ^!
        -/(@()$_.FileName.ToLower().Contains('amd64'))
        ^!
        @.FileName,
};

var buildMantispid = @{
    printInfo('Building Mantispid');

    var msbc = '"{0}" "{1}" ' +
        '/p:Configuration=Release ' +
        '/verbosity:quiet ' +
        '/t:Rebuild ' +
        '/p:Platform=AnyCpu ' :: [ msBuild.exe, mantispidCsProj ];

    ~# msbc;

    if (!exists(mantispidExe)) {
        printError('Failed building Mantispid.exe');
        exit(0xbad81);
    }

    printSuccess('Mantispid successfully built');
};

var exeSearchPaths = ['Release64', 'x64\\Release', 'Release']
    ->@format('Aphid\\Bin\\{0}')
    ->testRoot;

var run = @{
    exe = null;
    
    var findAphid = @() exeSearchPaths -? Directory.Exists -< @files('Aphid*.exe') |> Enumerable.DefaultIfEmpty ^!;

    var hasExe = @{        
        printInfo(exeSearchPaths);
//        var matches = findAphid();
//        var c = matches #!;
//        printInfo('Found ~Cyan~{0}~R~ Aphid exe matches', c);

        if ((exe = findAphid()) != null) {
            printSuccess('Found Aphid exe: {0}', exe);
            testBin = exe | Path.GetDirectoryName;
            ret true;
        } else {
            printSuccess('Could not find Aphid exe');

            ret false;
        }
    };

    //[ testRoot ]
        //->@(f) [' /ah ', '']
            //->@() ~# ('del ' + f + '\\*.alx.cache* /s /q' + $_);

    ~# ('del {0} /s /q' :: 'aphid*.exe' | testRoot);

    [ 'aphid*.exe', 'components*.dll', '*.alx.cache*' ]->testRoot
        ->@(f) [' /ah ', '']
            ->@() ~# ('del ' + f + ' /s /q' + $_);

    head('Patching Version Numbers');
    var ver = prevVersion();

    testRoot()
        @files('AssemblyInfo.cs')
        ->@(f){
            printInfo('Patching {0} to version {1}', f, ver);
            var txt = f | read;
            
            var txt2 = txt ~: [
                'AssemblyVersion\\s*\\(".*?"\\)',
                'AssemblyVersion("{0}")' :: [ ver ]
            ];
                    
            if (txt != txt2) {
                printSuccess('Successfully patched');
                txt2 @write(f);
            } else {
                printError('Failed patching');
            }
                          
        };

    head('Running MSBuild');
    var isLegacyProj = csProj  | read ~= 'Release64\\|Default' @== false;
    isLegacyProj = true;

    if (isLegacyProj) {
        csProj @printError('~Yellow~Legacy CSProj file: {0}~R~')
    }

    var msbc = '"' + msBuild.exe +'" ' + 
        csProj + ' ' +
        '/p:Platform=' + (isLegacyProj  ? 'AnyCpu' : 'Default') + ' ' +
        '/p:Configuration=' + (isLegacyProj ? 'Release' : 'Release64') + ' ' +
        '/p:Prefer32bit=false ' +
        '/verbosity:' + msBuild.verbosityValues[2] + ' ' +
        '/t:Rebuild';
        
    
    ~# msbc;    
    
    if (hasExe()) {
        printSuccess('MSBuild Complete');
        head('Test Fixup');
        ~# ('copy ' + root + '\\Aphid\\Benchmarks\\*.alx ' + testDst + ' /y');
        ~# ('copy ' + root + '\\Aphid\\Benchmarks\\*.alx ' + testBin + '\\Benchmarks /y');        
        [ '', ' /ah' ]->@() ~# ('del {0}\\*.alx.cache* /s /q{1}' :: [ testRoot(), $_ ]);        


        

        
        //~# ('copy ' + testBin + '\\Library\\Benchmarks.alx ' + testBin + '\\Library\\Testing\\Benchmarks.alx /y');
        //~# ('copy ' + testBin + '\\Library\\Benchmark.alx ' + testBin + '\\Library\\Testing\\Benchmark.alx /y');
        //~# ('del ' + testBin + '\\Library\\Testing\\Benchmark.alx /q');


        // ~# ('copy ' + root + '\\Components.Aphid\\Library\\Testing\\Benchmark.alx ' + testDst + '\\Library\\Testing\\Benchmark.alx /y');
        
        var benchmarkRel = 'Components.Aphid\\Library\\Testing\\Benchmark.alx';
        var benchmarkHeader = Path.Combine(root, benchmarkRel);
        ~# ('mkdir ' + testBin + '\\Library\\Testing');
        ~# ('mkdir ' + testRoot('Components.Aphid\\Library\\Testing'));
        ~# ('copy ' + benchmarkHeader + ' ' + testBin + '\\Library\\Testing\\Benchmark.alx /y');
        ~# ('copy ' + benchmarkHeader + ' ' + testRoot(benchmarkRel) + ' /y');
        
        [testBin, testDst]
            -<@files('*.alx')
            ->@(f){
                printInfo('Fixing {0}', f);
                var txt = f | read;
                var bad = "#'c:\\\\source\\\\Aphid\\\\Components.Aphid\\\\Aphid.Tokens.alx';";

                if (txt.Contains(bad)) {
                    print('Bad include detected');
                    txt = txt.Replace(bad, '');
                    write(f, txt);
                }                
            };
        
        head('Running Benchmarks');
        Directory.SetCurrentDirectory(testDst);
        //Console.ReadLine();
        ~# nextAphidCmd();
        head('Done running Benchmarks');
        ~# ('copy ' + testDst + '\\history.* ' + tmpDir + ' /y');

        if (backupDB) {
            var backupDir = tmpDir + '\\' + Guid.NewGuid();
            ~# ('mkdir ' + backupDir);
            ~# ('copy ' + testDst + '\\history.* ' + backupDir);
        }

        if (saveCharts) {
            ~# ('{0} charts.alx -pngs -all' :: getExe());
        }
        //Console.ReadLine();
    } else {
        var msg = 'MSBuild failed';
        var fill = new string(' ', Console.WindowWidth - msg.Length - 8);
        printError('~Red~~|Blue~{0}{1}~R~', msg, fill);
    }

    ret rollBack();
};

var sb = new StringBuilder();

var rollBack = @{
    cd();
    
    var tries = 0;
    var every = 1;
    var csMatches = 0;

    while (true) {
        cd();
        ~# 'git reset --hard HEAD~1';

        sb.Clear();
        'git show --name-only --oneline' ~> sb.AppendLine;

        var s = sb.ToString();
        var s2 = s | Cli.StyleEscape;
        
        if (ignore =? s.StartsWith) {
            print('Ignoring:\r\n~Red~{0}~R~', s2);
        } else if (s.ToLower() ~= 'components\\.aphid[\\/].*?\\.cs([\\r\\n]|$)') {
            print('C# changes found for Components.Aphid:\r\n~Green~{0}~R~', s2);

            if (++csMatches < every) {
                print('~Yellow~Skipping match {0}~R~', csMatches);
                continue;
            }
            
            
            restorePackages();
            ~# ('copy ' + tmpDir + '\\history.* ' + testDst + ' /y');

            ret true;
        } else {
            print('No C# changes found for Components.Aphid:\r\n~Yellow~{0}~R~', s2);
        }
        
        if (++tries == 100) {
            print('No more CS changes found, exiting');

            ret false;
        }
    }
};

init();

while (run()) {
    
}
