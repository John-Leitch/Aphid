using Components.External.ConsolePlus;

[
    'add_ReflectionOnlyAssemblyResolve',
    'add_AssemblyResolve'
]
->@()AppDomain.CurrentDomain[$_](@(sender, e){
    e.Name @Cli.WriteLine('Loading ~Cyan~{0}~R~');
    ret e.Name.StartsWith('Components.Aphid') ? AphidExpression.Assembly : null;
});

#'Std';
#'Gui/WinForms';
#'Charts.Config';
#'Core/Threading';
using Components.ObjectDatabase;
using System.Reflection;
using Components.Aphid.Parser;

var pixelsPerStack = 25;
var widthMultipier = 2;
var tickMode = { normal: 0, sum: 1, average: 2, min: 3 };
var mode = tickMode.normal;

var args = new List[string](Environment.GetCommandLineArgs());
_af = macro(@(flag) {
    if (args.Contains('-' + quote(flag))) {
        if (mode != tickMode.normal) {
            printError('Cannot specify more than one grouping flag.');
            exit(0xbad0f);
        }

        mode = tickMode.flag;
    }
});

_af(average);
_af(min);
_af(sum);

_ab = macro(@(flag) { var id(flag) = args.Contains('-' + quote(flag)) });
_ab(png);
_ab(pngs);
_ab(allTests);

var dbFile = this.'$script' | io.up @io.end('history.db');
printInfo('Loading DB ~Cyan~{0}~R~', dbFile);

if (dbFile | io.file == false) {
    printError('Could not find DB file');
    exit(0xbad01);
}

var fixObj = @(o) {
    if (o == null ||
        (var t = o.GetType()) == AphidObject ||
        t.IsPrimitive ||
        t == string ||
        (!(var isCollection = IEnumerable.IsAssignableFrom(t)))) {
        ret o;
    } else if (t.Name == AphidObject.Name) {
        if (o.IsScalar) {
            ret o.Value | fixObj;
        } else {
            var o2 = {};    
            o for (p) o2[p.Key] = p.Value | fixObj;

            ret o2;
        }
    } else if (isCollection) {
        ret o->fixObj;
    }
};

var records =
    dbFile
    |> BinaryObjectDatabase.OpenFile
    @() $_.ReadUnsafe()
    |> toArray;

if ((records#!) > 0 && records[0].GetType() != AphidObject) {
    printError('Library versioning issues, fixing objects');
    0..records.Length for (i) records.Set(i, fixObj(records[i]));
    printSuccess('Done fixing objects');
}

printSuccess('Successfully loaded {0:n0} records', records#!);

var createChart = @(mode){
    var r;

    var flattened =
        records
        -<(@(x) x.results
        -> @(y) ({
            version: new Version(x.version),
            name: y.name,
            ms: y.ticks / TimeSpan.TicksPerMillisecond
        }));

    var chart = winForms.chart();
    var area = chart.area();
    var area3d = area.Area3DStyle;
    area3d.Enable3D = true;
    area3d.Inclination = 10;
    area3d.IsRightAngleAxes = true;
    area3d.Perspective = 0;
    area3d.PointDepth = 50;
    area3d.Rotation = 10;
    area3d.WallWidth = 2;
    area3d.LightStyle = LightStyle.Realistic;

    var l = {};

    if (!allTests) {
        flattened = flattened-?((@.name) @> testNames.contains);
    }

    var fullRuns = flattened -& (@.version) -& (@()$_ -& @.name #!) -/ @.Key ^! -> @.Key;

    _aggr = macro(@(_aggr) { s -& (@.version) -\ (@.Key) -> (@(g) [ i++, g -> @.ms |> @() _aggr, g.Key ]) });

    var dataOut =
        flattened
        -? (@(x) fullRuns=?@==x.version)
        -& @.name
        -> @(s){
            var i = 0x0;
            var data = ($(mode)
                tickMode.average: _aggr(($_ +> (@(a, b) a + b)) / (g #!)),
                tickMode.sum: _aggr($_ +> (@(a, b) a + b)),
                tickMode.min: _aggr($_ \! ^!),
                (s
                    -\ (@.version)
                    -> (@() [ i++, $_.ms, $_.version ])));
    
            l[s.Key] = data;
            Console.WriteLine('{0}: {1}', s.Key, data #!);

            data @() chart.series(s.Key, $_, SeriesChartType.StackedBar);

            ret data;
        };

    area.AxisY.LabelStyle.Format = '{0:n0}ms';
    area.RecalculateAxesScale();
    var vi = 0;
    var pts = dataOut[0];
    var xCount = pts #!;
    0..xCount->@(i) area.AxisX.CustomLabels.Add(i - 0.5, i + 0.5, pts[i][2].ToString());

    if (png) {
        var height = Math.Max(xCount * pixelsPerStack, 400);
        chart.Size = new Size(height * widthMultipier, height);
        var m = tickMode.Keys[mode];
        var m2 = m[0].ToUpper() + m.Substring(1);
        var pngFile = 'BenchmarkChartTickMode{0}.{1}.png' :: [ m2, DateTime.Now.Ticks ];
        
        [
            @printInfo('Writing chart to ~Cyan~{0}~R~'),
            chart.toPng,
            @printSuccess('Done writing chart to ~Green~{0}~R~')
        ]->@() pngFile | $_;

    } else {
        winForms.split([
            [ { control: winForms.propertyGrid(chart), absolute: 250 }, { control: chart } ]
        ])
        @winForms.dialog({ width: 900, height: 400 });
    }
};

if (pngs) {
    png = true;
    tickMode.Keys >~ @() tickMode[$_] | createChart;
} else {
    mode | createChart;
}