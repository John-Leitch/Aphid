using System.Collections.Generic;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Components.Aphid.TypeSystem;
// <copyright file="AphidObjectTest.CopyTo.g.cs">Copyright Â© AutoSec Tools LLC 2019</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>
using System;
using Microsoft.Pex.Engine.Exceptions;

namespace Components.Aphid.TypeSystem.Tests
{
    public partial class AphidObjectTest
    {

[TestMethod]
[PexGeneratedBy(typeof(AphidObjectTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void CopyToThrowsNullReferenceException26401()
{
    object o;
    o = AphidObjectFactory.Create(1001);
    this.CopyTo((AphidObject)o, (AphidObject)null);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidObjectTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void CopyToThrowsNullReferenceException264()
{
    object o;
    o = AphidObjectFactory.Create(0);
    this.CopyTo((AphidObject)o, (AphidObject)null);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidObjectTest))]
public void CopyTo280()
{
    object o;
    o = AphidObjectFactory.Create(5);
    this.CopyTo((AphidObject)o, (AphidObject)o);
    Assert.IsNotNull(o);
    Assert.AreEqual<bool>(true, ((AphidObject)o).IsScalar);
    Assert.AreEqual<bool>(false, ((AphidObject)o).IsComplex);
    Assert.AreEqual<bool>(true, ((AphidObject)o).IsComplexitySet);
    Assert.IsNotNull(((AphidObject)o).Value);
    Assert.IsNull(((AphidObject)o).Parent);
    Assert.IsNotNull(((Dictionary<string, AphidObject>)o).Comparer);
    Assert.AreEqual<int>(0, ((Dictionary<string, AphidObject>)o).Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidObjectTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void CopyToThrowsNullReferenceException735()
{
    object o;
    o = AphidObjectFactory.Create(547);
    this.CopyTo((AphidObject)o, (AphidObject)null);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidObjectTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void CopyToThrowsNullReferenceException26402()
{
    object o;
    o = AphidObjectFactory.Create(49);
    this.CopyTo((AphidObject)o, (AphidObject)null);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidObjectTest))]
public void CopyTo28001()
{
    object o;
    o = AphidObjectFactory.Create(896);
    this.CopyTo((AphidObject)o, (AphidObject)o);
    Assert.IsNotNull(o);
    Assert.AreEqual<bool>(false, ((AphidObject)o).IsScalar);
    Assert.AreEqual<bool>(true, ((AphidObject)o).IsComplex);
    Assert.AreEqual<bool>(true, ((AphidObject)o).IsComplexitySet);
    Assert.IsNull(((AphidObject)o).Value);
    Assert.IsNull(((AphidObject)o).Parent);
    Assert.IsNotNull(((Dictionary<string, AphidObject>)o).Comparer);
    Assert.AreEqual<int>(0, ((Dictionary<string, AphidObject>)o).Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidObjectTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void CopyToThrowsNullReferenceException73501()
{
    object o;
    o = AphidObjectFactory.Create();
    this.CopyTo((AphidObject)o, (AphidObject)null);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidObjectTest))]
[PexRaisedException(typeof(InvalidOperationException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(InvalidOperationException))]
public void CopyToThrowsInvalidOperationException450()
{
    object o;
    o = AphidObjectFactory.Create();
    this.CopyTo((AphidObject)o, (AphidObject)o);
}
    }
}
