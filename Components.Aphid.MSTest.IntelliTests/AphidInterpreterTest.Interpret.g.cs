using System.Collections.Generic;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Components.Aphid.Lexer;
using Components.Aphid.TypeSystem;
using Components.Aphid.Parser;
using Components.Aphid.Interpreter;
// <copyright file="AphidInterpreterTest.Interpret.g.cs">Copyright Â© AutoSec Tools LLC 2019</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>
using System;

namespace Components.Aphid.Interpreter.Tests
{
    public partial class AphidInterpreterTest
    {

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[ExpectedException(typeof(NullReferenceException))]
public void InterpretThrowsNullReferenceException196()
{
    AphidInterpreter aphidInterpreter;
    ForExpression forExpression;
    AphidObject aphidObject;
    aphidInterpreter = AphidInterpreterFactory.Create();
    forExpression = ForExpressionFactory.Create((AphidExpressionContext)null, 
                                                (AphidExpression)null, (AphidExpression)null, 
                                                (AphidExpression)null, (List<AphidExpression>)null, 0, 0);
    aphidObject = this.Interpret(aphidInterpreter, (AphidExpression)forExpression);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void InterpretThrowsNullReferenceException623()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, (string)null, false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException458()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<%=", true);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException705()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<@>", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException14()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "</", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException147()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "|", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException457()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "|\0", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException399()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "|!", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException770()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "|@", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException899()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "|~", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException671()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "|;", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException982()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "|`", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException226()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "||", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException476()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "|/", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException950()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException603()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">\0", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException275()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">!", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException103()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">;", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException836()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">@", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException185()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">`", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException264()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">~", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException338()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<%\0", true);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException780()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">|", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException309()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, ">/", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException766()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<`", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException888()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<!", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException220()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<|", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException126()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<~", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException180()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<@", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException545()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<;", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException8()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<\0", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException613()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "\0", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException636()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "\f", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException128()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<@\0", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException496()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "[", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException131()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
[PexRaisedException(typeof(AphidParserException), exceptionState: Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(AphidParserException))]
public void InterpretThrowsAphidParserException714()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "[\0", false);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret60101()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<<", true);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.CurrentStatement);
    Assert.IsNotNull(aphidInterpreter.CurrentStatement.Context);
    Assert.AreEqual<string>
        ((string)null, aphidInterpreter.CurrentStatement.Context.Filename);
    Assert.AreEqual<string>("<<", aphidInterpreter.CurrentStatement.Context.Code);
    Assert.AreEqual<int>(1, aphidInterpreter.CurrentStatement.Index);
    Assert.AreEqual<int>(1, aphidInterpreter.CurrentStatement.Length);
    Assert.IsNotNull(aphidInterpreter.CurrentExpression);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentExpression, aphidInterpreter.CurrentStatement));
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret833()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "", false);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.CurrentStatement);
    Assert.IsNull(aphidInterpreter.CurrentExpression);
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret69()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "", true);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.CurrentStatement);
    Assert.IsNull(aphidInterpreter.CurrentExpression);
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret964()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "\0\0", true);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.CurrentStatement);
    Assert.IsNotNull(aphidInterpreter.CurrentStatement.Context);
    Assert.AreEqual<string>
        ((string)null, aphidInterpreter.CurrentStatement.Context.Filename);
    Assert.AreEqual<string>("\0\0", aphidInterpreter.CurrentStatement.Context.Code);
    Assert.AreEqual<int>(0, aphidInterpreter.CurrentStatement.Index);
    Assert.AreEqual<int>(2, aphidInterpreter.CurrentStatement.Length);
    Assert.IsNotNull(aphidInterpreter.CurrentExpression);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentExpression, aphidInterpreter.CurrentStatement));
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret260()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, " ", false);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.CurrentStatement);
    Assert.IsNull(aphidInterpreter.CurrentExpression);
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret731()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "\0", true);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.CurrentStatement);
    Assert.IsNotNull(aphidInterpreter.CurrentStatement.Context);
    Assert.AreEqual<string>
        ((string)null, aphidInterpreter.CurrentStatement.Context.Filename);
    Assert.AreEqual<string>("\0", aphidInterpreter.CurrentStatement.Context.Code);
    Assert.AreEqual<int>(0, aphidInterpreter.CurrentStatement.Index);
    Assert.AreEqual<int>(1, aphidInterpreter.CurrentStatement.Length);
    Assert.IsNotNull(aphidInterpreter.CurrentExpression);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentExpression, aphidInterpreter.CurrentStatement));
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret243()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<", true);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.CurrentStatement);
    Assert.IsNotNull(aphidInterpreter.CurrentStatement.Context);
    Assert.AreEqual<string>
        ((string)null, aphidInterpreter.CurrentStatement.Context.Filename);
    Assert.AreEqual<string>("<", aphidInterpreter.CurrentStatement.Context.Code);
    Assert.AreEqual<int>(0, aphidInterpreter.CurrentStatement.Index);
    Assert.AreEqual<int>(1, aphidInterpreter.CurrentStatement.Length);
    Assert.IsNotNull(aphidInterpreter.CurrentExpression);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentExpression, aphidInterpreter.CurrentStatement));
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret601()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<\0", true);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.CurrentStatement);
    Assert.IsNotNull(aphidInterpreter.CurrentStatement.Context);
    Assert.AreEqual<string>
        ((string)null, aphidInterpreter.CurrentStatement.Context.Filename);
    Assert.AreEqual<string>("<\0", aphidInterpreter.CurrentStatement.Context.Code);
    Assert.AreEqual<int>(0, aphidInterpreter.CurrentStatement.Index);
    Assert.AreEqual<int>(2, aphidInterpreter.CurrentStatement.Length);
    Assert.IsNotNull(aphidInterpreter.CurrentExpression);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentExpression, aphidInterpreter.CurrentStatement));
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret840()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "\0<", true);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.CurrentStatement);
    Assert.IsNotNull(aphidInterpreter.CurrentStatement.Context);
    Assert.AreEqual<string>
        ((string)null, aphidInterpreter.CurrentStatement.Context.Filename);
    Assert.AreEqual<string>("\0<", aphidInterpreter.CurrentStatement.Context.Code);
    Assert.AreEqual<int>(1, aphidInterpreter.CurrentStatement.Index);
    Assert.AreEqual<int>(1, aphidInterpreter.CurrentStatement.Length);
    Assert.IsNotNull(aphidInterpreter.CurrentExpression);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentExpression, aphidInterpreter.CurrentStatement));
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret787()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "9", false);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_'));
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.CurrentStatement);
    Assert.IsNotNull(aphidInterpreter.CurrentStatement.Context);
    Assert.AreEqual<string>
        ((string)null, aphidInterpreter.CurrentStatement.Context.Filename);
    Assert.AreEqual<string>("9", aphidInterpreter.CurrentStatement.Context.Code);
    Assert.AreEqual<int>(0, aphidInterpreter.CurrentStatement.Index);
    Assert.AreEqual<int>(1, aphidInterpreter.CurrentStatement.Length);
    Assert.IsNotNull(aphidInterpreter.CurrentExpression);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentExpression, aphidInterpreter.CurrentStatement));
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidInterpreterTest))]
public void Interpret251()
{
    AphidInterpreter aphidInterpreter;
    aphidInterpreter = AphidInterpreterFactory.Create();
    this.Interpret(aphidInterpreter, "<%", true);
    Assert.IsNotNull((object)aphidInterpreter);
    Assert.IsNull(aphidInterpreter.OnInterpretBlock);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretBlockExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretStatement);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretStatementExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretExpression);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretExpressionExecuting);
    Assert.IsNull(aphidInterpreter.OnInterpretObject);
    Assert.AreEqual<bool>(false, aphidInterpreter.OnInterpretObjectExecuting);
    Assert.IsNotNull(aphidInterpreter.InitialScope);
    Assert.AreEqual<bool>(false, aphidInterpreter.InitialScope.IsScalar);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplex);
    Assert.AreEqual<bool>(true, aphidInterpreter.InitialScope.IsComplexitySet);
    Assert.IsNull(aphidInterpreter.InitialScope.Value);
    Assert.IsNull(aphidInterpreter.InitialScope.Parent);
    Assert.IsNotNull(aphidInterpreter.InitialScope.Comparer);
    Assert.AreEqual<int>(6, aphidInterpreter.InitialScope.Count);
    Assert.IsNotNull(aphidInterpreter.CurrentScope);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentScope, aphidInterpreter.InitialScope));
    Assert.IsNull(aphidInterpreter.PreviousScope);
    
    Assert.IsNotNull(aphidInterpreter.AsmBuilder);
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyName.RemoveAtIndexOf('_')
                            );
    Assert.AreEqual<string>("AphidModule", 
                            aphidInterpreter.AsmBuilder.AssemblyFilename.RemoveAtIndexOf('_'));
    Assert.IsNull(aphidInterpreter.AsmBuilder.Assembly);
    Assert.IsNotNull(aphidInterpreter.AsmBuilder.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.AsmBuilder.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver);
    Assert.IsNotNull(aphidInterpreter.InteropMethodResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropMethodResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.OperatorHelper);
    Assert.IsNotNull(aphidInterpreter.OperatorHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.OperatorHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.ValueHelper);
    Assert.IsNotNull(aphidInterpreter.ValueHelper.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.ValueHelper.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver);
    Assert.IsNotNull(aphidInterpreter.InteropTypeResolver.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.InteropTypeResolver.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeExtender);
    Assert.IsNotNull(aphidInterpreter.TypeExtender.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeExtender.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.TypeConverter);
    Assert.IsNotNull(aphidInterpreter.TypeConverter.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.TypeConverter.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.FunctionConverter);
    Assert.IsNotNull(aphidInterpreter.FunctionConverter.Interpreter);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.FunctionConverter.Interpreter, 
                                (object)aphidInterpreter));
    Assert.IsNull(aphidInterpreter.IpcContext);
    Assert.IsNotNull(aphidInterpreter.Serializer);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreLazyLists);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.IgnoreFunctions);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.IgnoreSpecialVariables);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.QuoteToStringResults);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.AlwaysQuoteKeys);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.ToStringClrTypes);
    Assert.AreEqual<int>(-1, aphidInterpreter.Serializer.MaxElements);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SafeCollectionAccess);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings);
    Assert.AreEqual<int>(0, aphidInterpreter.Serializer.InlineStrings.Count);
    Assert.IsNotNull(aphidInterpreter.Serializer.InlineStrings.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Serializer.InlineStrings.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNull(aphidInterpreter.Serializer.MapClrObject);
    Assert.AreEqual<int>(60, aphidInterpreter.Serializer.StringReferenceThreshold);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitStrings);
    Assert.AreEqual<bool>(true, aphidInterpreter.Serializer.SplitAtNewLine);
    Assert.AreEqual<int>(100, aphidInterpreter.Serializer.StringChunkSize);
    Assert.AreEqual<bool>(false, aphidInterpreter.Serializer.UseDoubleQuotes);
    Assert.IsNotNull(aphidInterpreter.Serializer.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Serializer.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.Out);
    Assert.IsNull(aphidInterpreter.OutFilter);
    Assert.IsNull(aphidInterpreter.GatorEmitFilter);
    Assert.IsNotNull(aphidInterpreter.Loader);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths);
    Assert.AreEqual<int>(1, aphidInterpreter.Loader.SystemSearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SystemSearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SystemSearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths);
    Assert.AreEqual<int>(0, aphidInterpreter.Loader.SearchPaths.Count);
    Assert.IsNotNull(aphidInterpreter.Loader.SearchPaths.Comparer);
    Assert.IsTrue
        (object.ReferenceEquals(aphidInterpreter.Loader.SearchPaths.Comparer, 
                                aphidInterpreter.InitialScope.Comparer));
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.InlineCachedScripts);
    Assert.AreEqual<bool>(false, aphidInterpreter.Loader.DisableConstantFolding);
    Assert.IsNotNull(aphidInterpreter.Loader.Interpreter);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.Loader.Interpreter, (object)aphidInterpreter));
    Assert.IsNotNull(aphidInterpreter.CurrentStatement);
    Assert.IsNotNull(aphidInterpreter.CurrentStatement.Context);
    Assert.AreEqual<string>
        ((string)null, aphidInterpreter.CurrentStatement.Context.Filename);
    Assert.AreEqual<string>("<%", aphidInterpreter.CurrentStatement.Context.Code);
    Assert.AreEqual<int>(-1, aphidInterpreter.CurrentStatement.Index);
    Assert.AreEqual<int>(-1, aphidInterpreter.CurrentStatement.Length);
    Assert.IsNotNull(aphidInterpreter.CurrentExpression);
    Assert.IsTrue(object.ReferenceEquals
                      (aphidInterpreter.CurrentExpression, aphidInterpreter.CurrentStatement));
    Assert.AreEqual<bool>(true, aphidInterpreter.StrictMode);
}
    }
}
