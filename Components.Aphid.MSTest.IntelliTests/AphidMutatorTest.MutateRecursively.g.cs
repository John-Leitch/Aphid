using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using Components.Aphid.Parser;
using Mantispid;
// <copyright file="AphidMutatorTest.MutateRecursively.g.cs">Copyright Â© AutoSec Tools LLC 2019</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>
using System;
using Microsoft.Pex.Engine.Exceptions;

namespace Components.Aphid.Parser.Tests
{
    public partial class AphidMutatorTest
    {

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively980()
{
    IndexTrackingMutator indexTrackingMutator;
    List<AphidExpression> list;
    indexTrackingMutator = new IndexTrackingMutator((string[])null);
    list = this.MutateRecursively
               ((AphidMutator)indexTrackingMutator, (List<AphidExpression>)null);
    Assert.IsNull((object)list);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively113()
{
    IndexTrackingMutator indexTrackingMutator;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = new IndexTrackingMutator((string[])null);
    AphidExpression[] aphidExpressions = new AphidExpression[0];
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(0, list1.Capacity);
    Assert.AreEqual<int>(0, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void MutateRecursivelyThrowsNullReferenceException557()
{
    IndexTrackingMutator indexTrackingMutator;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = new IndexTrackingMutator((string[])null);
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively967()
{
    IndexTrackingMutator indexTrackingMutator;
    TryExpression tryExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = new IndexTrackingMutator((string[])null);
    tryExpression =
      new TryExpression((AphidExpressionContext)null, (List<AphidExpression>)null, 
                        (IdentifierExpression)null, 
                        (List<AphidExpression>)null, (List<AphidExpression>)null);
    ((AphidExpression)tryExpression).Index = 0;
    ((AphidExpression)tryExpression).Length = 0;
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)tryExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void MutateRecursivelyThrowsNullReferenceException120()
{
    IndexTrackingMutator indexTrackingMutator;
    PatternExpression patternExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = new IndexTrackingMutator((string[])null);
    patternExpression = new PatternExpression((AphidExpressionContext)null, 
                                              (AphidExpression)null, (List<AphidExpression>)null);
    ((AphidExpression)patternExpression).Index = 0;
    ((AphidExpression)patternExpression).Length = 0;
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)patternExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively638()
{
    IndexTrackingMutator indexTrackingMutator;
    BooleanExpression booleanExpression;
    PatternExpression patternExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    string[] ss = new string[1];
    indexTrackingMutator = new IndexTrackingMutator(ss);
    AphidExpressionContext s0 = new AphidExpressionContext();
    s0.Filename = (string)null;
    s0.Code = (string)null;
    booleanExpression = new BooleanExpression(s0, false);
    ((AphidExpression)booleanExpression).Index = 0;
    ((AphidExpression)booleanExpression).Length = 0;
    AphidExpressionContext s1 = new AphidExpressionContext();
    s1.Filename = (string)null;
    s1.Code = (string)null;
    patternExpression = new PatternExpression
                            (s1, (AphidExpression)booleanExpression, (List<AphidExpression>)null);
    ((AphidExpression)patternExpression).Index = 0;
    ((AphidExpression)patternExpression).Length = 0;
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)patternExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively217()
{
    IndexTrackingMutator indexTrackingMutator;
    BooleanExpression booleanExpression;
    PatternExpression patternExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = new IndexTrackingMutator((string[])null);
    booleanExpression = new BooleanExpression((AphidExpressionContext)null, false);
    ((AphidExpression)booleanExpression).Index = 0;
    ((AphidExpression)booleanExpression).Length = 0;
    patternExpression = new PatternExpression((AphidExpressionContext)null, 
                                              (AphidExpression)booleanExpression, (List<AphidExpression>)null);
    ((AphidExpression)patternExpression).Index = 0;
    ((AphidExpression)patternExpression).Length = 0;
    AphidExpression[] aphidExpressions = new AphidExpression[2];
    aphidExpressions[0] = (AphidExpression)patternExpression;
    aphidExpressions[1] = (AphidExpression)booleanExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(2, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void MutateRecursivelyThrowsNullReferenceException696()
{
    IndexTrackingMutator indexTrackingMutator;
    ForEachExpression forEachExpression;
    PatternExpression patternExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = new IndexTrackingMutator((string[])null);
    AphidExpressionContext s0 = new AphidExpressionContext();
    s0.Filename = (string)null;
    s0.Code = (string)null;
    List<AphidExpression> list2 = new List<AphidExpression>();
    forEachExpression =
      new ForEachExpression(s0, (AphidExpression)null, list2, (AphidExpression)null);
    ((AphidExpression)forEachExpression).Index = 0;
    ((AphidExpression)forEachExpression).Length = 0;
    AphidExpressionContext s1 = new AphidExpressionContext();
    s1.Filename = (string)null;
    s1.Code = (string)null;
    patternExpression = new PatternExpression
                            (s1, (AphidExpression)forEachExpression, (List<AphidExpression>)null);
    ((AphidExpression)patternExpression).Index = 0;
    ((AphidExpression)patternExpression).Length = 0;
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)patternExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
[PexRaisedException(typeof(NullReferenceException), Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected), ExpectedException(typeof(NullReferenceException))]
public void MutateRecursivelyThrowsNullReferenceException267()
{
    IndexTrackingMutator indexTrackingMutator;
    LoadScriptExpression loadScriptExpression;
    PatternExpression patternExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    string[] ss = new string[1];
    indexTrackingMutator = new IndexTrackingMutator(ss);
    AphidExpressionContext s0 = new AphidExpressionContext();
    s0.Filename = (string)null;
    s0.Code = (string)null;
    loadScriptExpression = new LoadScriptExpression(s0, (AphidExpression)null);
    ((AphidExpression)loadScriptExpression).Index = 0;
    ((AphidExpression)loadScriptExpression).Length = 0;
    AphidExpressionContext s1 = new AphidExpressionContext();
    s1.Filename = (string)null;
    s1.Code = (string)null;
    patternExpression = new PatternExpression
                            (s1, (AphidExpression)loadScriptExpression, (List<AphidExpression>)null);
    ((AphidExpression)patternExpression).Index = 0;
    ((AphidExpression)patternExpression).Length = 0;
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)patternExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively98001()
{
    IndexTrackingMutator indexTrackingMutator;
    List<AphidExpression> list;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    list = this.MutateRecursively
               ((AphidMutator)indexTrackingMutator, (List<AphidExpression>)null);
    Assert.IsNull((object)list);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively11301()
{
    IndexTrackingMutator indexTrackingMutator;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    AphidExpression[] aphidExpressions = new AphidExpression[0];
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(0, list1.Capacity);
    Assert.AreEqual<int>(0, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
[ExpectedException(typeof(NullReferenceException))]
public void MutateRecursivelyThrowsNullReferenceException492()
{
    IndexTrackingMutator indexTrackingMutator;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively518()
{
    IndexTrackingMutator indexTrackingMutator;
    BinaryOperatorExpression binaryOperatorExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    binaryOperatorExpression = BinaryOperatorExpressionFactory.Create(704);
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)binaryOperatorExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively944()
{
    IndexTrackingMutator indexTrackingMutator;
    BinaryOperatorExpression binaryOperatorExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    binaryOperatorExpression = BinaryOperatorExpressionFactory.Create(-2055208960);
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)binaryOperatorExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively396()
{
    IndexTrackingMutator indexTrackingMutator;
    BinaryOperatorExpression binaryOperatorExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    binaryOperatorExpression = BinaryOperatorExpressionFactory.Create(16068);
    BinaryOperatorExpression[] binaryOperatorExpressions
       = new BinaryOperatorExpression[1];
    binaryOperatorExpressions[0] = binaryOperatorExpression;
    list = new List<AphidExpression>
               ((IEnumerable<AphidExpression>)binaryOperatorExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively539()
{
    IndexTrackingMutator indexTrackingMutator;
    BinaryOperatorExpression binaryOperatorExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    binaryOperatorExpression = BinaryOperatorExpressionFactory.Create(905969664);
    BinaryOperatorExpression[] binaryOperatorExpressions
       = new BinaryOperatorExpression[1];
    binaryOperatorExpressions[0] = binaryOperatorExpression;
    list = new List<AphidExpression>
               ((IEnumerable<AphidExpression>)binaryOperatorExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively616()
{
    IndexTrackingMutator indexTrackingMutator;
    BinaryOperatorExpression binaryOperatorExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    binaryOperatorExpression = BinaryOperatorExpressionFactory.Create(2063130680);
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)binaryOperatorExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively511()
{
    IndexTrackingMutator indexTrackingMutator;
    BinaryOperatorExpression binaryOperatorExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    binaryOperatorExpression = BinaryOperatorExpressionFactory.Create(2045);
    AphidExpression[] aphidExpressions = new AphidExpression[1];
    aphidExpressions[0] = (AphidExpression)binaryOperatorExpression;
    list = new List<AphidExpression>((IEnumerable<AphidExpression>)aphidExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}

[TestMethod]
[PexGeneratedBy(typeof(AphidMutatorTest))]
public void MutateRecursively567()
{
    IndexTrackingMutator indexTrackingMutator;
    BinaryOperatorExpression binaryOperatorExpression;
    List<AphidExpression> list;
    List<AphidExpression> list1;
    indexTrackingMutator = IndexTrackingMutatorFactory.Create((string[])null);
    binaryOperatorExpression = BinaryOperatorExpressionFactory.Create(2036276735);
    BinaryOperatorExpression[] binaryOperatorExpressions
       = new BinaryOperatorExpression[1];
    binaryOperatorExpressions[0] = binaryOperatorExpression;
    list = new List<AphidExpression>
               ((IEnumerable<AphidExpression>)binaryOperatorExpressions);
    list1 = this.MutateRecursively((AphidMutator)indexTrackingMutator, list);
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(4, list1.Capacity);
    Assert.AreEqual<int>(1, list1.Count);
}
    }
}
