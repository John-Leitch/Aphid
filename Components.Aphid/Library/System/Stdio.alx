var stdio;

@{
    trace = macro(@(l, m){
        // if (traceLevel >= l) {
        //     print('[Thread ~Cyan~{0:x4}~R~] {1}' :: [ Thread.CurrentThread.ManagedThreadId, m ]);
        // }
    });

    tracep = macro(@(l, n, m){
        // if (traceLevel >= l) {
        //     print('[Thread ~Cyan~{0:x4}~R~ ~Magenta~{1}~R~] {2}' :: [ Thread.CurrentThread.ManagedThreadId, n, m ]);
        // }
    });

    stdio = {
        traceLevel = 0,
        reader: @(pipe, bufferSize) ({
            bufferSize: bufferSize defined ? bufferSize : 0x100,
            buffer: Array.CreateInstance(char, bufferSize),
            read: @(callback){
                if ((var charsRead = pipe.Read(buffer, 0, bufferSize)) > 0) {
                    trace(4, 'reader.read: data received');
                    callback(new string(buffer, 0, charsRead));
                    trace(5, 'reader.read: succeeded');

                    ret true;
                } else {
                    trace(6, 'reader.read: failed');
                    ret false;
                }
            },        
        }),
        redirect: @(process, callback) {    
            using System.Collections.Concurrent;
            var queue = new ConcurrentQueue[Object]();            

            var asyncInfo = redirectAsync(
                process,
                @(data, isError, context) {
                    trace(3, 'redirect: data received');
                    // lock context context.Add($args);
                    context.Enqueue($args);
                    trace(4, 'redirect: data added');
                },
                queue);

            var args = Array.CreateInstance(Object,1);

            _dq = macro(@{
                do {
                    if (queue.TryDequeue.Members[0].Invoke(queue, args)) {
                        trace(1, 'redirect: callback started');
                        var t = args[0];
                        callback(t[0], t[1]);
                        trace(1, 'redirect: callback finished');
                    }
                } while (queue.Count > 0);
            });
            
            do {
                trace(5, 'redirect: waiting on event');
                WaitHandle.WaitAny(asyncInfo.resets);
                trace(5, 'redirect: event set');
                _dq();
                // process.Refresh();
            } while (!process.HasExited);

            trace(1, 'redirect: wait for task'); 
            asyncInfo.task.Wait();
            trace(1, 'redirect: finished');
        },       

        redirectAsync: @(process, callback, context) {
            trace(1, 'redirectAsync: started');
            
            var redirects = [
                { pipe: process.StandardOutput, isErr: false, name: pipeName(process, pipe), reset: new AutoResetEvent(false) },
                { pipe: process.StandardError, isErr: true, name: pipeName(process, pipe), reset: new AutoResetEvent(false) }
            ];
            
            ret {
                resets: redirects->@.reset @seq.array(WaitHandle),

                task:
                    when.all(
                        redirects->@(p) bufferPipeAsync(
                            process,
                            p.pipe,
                            @(x) {
                                tracep(2, p.name, 'redirectAsync: data received ({0:n0} bytes)' :: x.Length);
                                callback(x, p.isErr, context);
                                tracep(2, p.name, 'redirectAsync: setting event');
                                p.reset.Set();
                            }),
                        @() redirects @async.each(@(p){
                            trace(2, 'redirectAsync: All tasks done, cleanup started');
                            p.reset.Set();
                            trace(1, 'redirectAsync: done');
                        }))
                    @async.then(@() resets->@()$_.Dispose()),
            };
        },

        bufferPipeAsync: @(process, pipe, callback)
            async.long(@{
                tracep(1, pipeName(process, pipe), 'bufferPipeAsync: started watching');
                var pipeReader = stdio.reader(pipe);
                var success;

                do {
                    tracep(
                        5,
                        pipeName(process, pipe),
                        'bufferPipeAsync: read started (proc exited: {0}, last read succeeded: {1})' ::
                            [ process.HasExited, success ]);
                    
                    success = pipeReader.read(callback)

                    // if (!(success = pipeReader.read(callback))) {
                    //     process.Refresh();
                    // }
                } while (success || !process.HasExited);

                tracep(
                    1,
                    pipeName(process, pipe),
                    'bufferPipeAsync: finished (proc exited: {0}, last read succeeded: {1})' ::
                        [ process.HasExited, success ]);
            }),

        pipeName: @(process, pipe) ($(pipe)
            process.StandardInput: 'stdin',
            process.StandardOutput: 'stdout',
            process.StandardError: 'stderr',
            throw new InvalidOperationException('Not stdio pipe')),
    };
}();

// var outReader = stdio.reader(stdOut);
// var errReader = stdio.reader(stdErr);

// async.long(@{
//     do {
//         Console.WriteLine('Out redirection started');
//         if (!outReader.read(Console.Write)) {
//             // p.Refresh();
//         }
//     } while (!p.HasExited);

//     Console.WriteLine('Out redirection finished');
// });

// bufferPipeAsync(stdOut, Console.Write);
// bufferPipeAsync(stdErr, Console.Write);