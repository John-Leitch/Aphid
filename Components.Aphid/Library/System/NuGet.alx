var installPackage;
var nuget;

@{
    using Components.Aphid.TypeSystem;
    using System.Collections.Generic;   
    using System.Net;
    using System.Reflection;

    using NuGet;

    

    

    var exeUrls = new List[string]();
    'https://dist.nuget.org/win-x86-commandline/latest/nuget.exe' | exeUrls.Add;

    var localExes = new List[string]();
    [ 'c:/tools', 'c:/source/nuget', 'd:/source/nuget' ]->@io.end('nuget.exe')->localExes.Add;
    var repoMemoizer;

    nuget = {
        exe: Path.Combine(AphidObject.Assembly.Location | Path.GetDirectoryName, 'nuget.exe'),
        exeUrls,
        localExes,
        frameworks: ['.NETFramework', '.NETPortable', '.NETStandard', '.NETCore'],
        
        init: @{
            #'System/Config';            
            
            if (aphidConfig.nugetSource defined) {
                repoUrl = aphidConfig.nugetSource;

                if (repoUrl | io.local) {
                    localExes.Insert(0, repoUrl @io.end('nuget.exe'));
                } else {
                    new Uri(
                        new Uri(repoUrl,UriKind.Absolute),
                        new Uri('nuget.exe',UriKind.Relative))
                    @exeUrls.Insert(0);                   
                }
            }

            if (!File.Exists(exe)) {
                var localFound = false;

                localExes for (n) {
                    if (n | File.Exists) {
                        Cli.WriteLine('Copying local nuget binary from ~Green~{0}~R~', n);
                        localFound = true;
                        File.Copy(n, exe);
                        break;
                    }
                };
                
                if (!localFound) {
                    exeUrls for (u) {
                        'Attempting to download nuget.exe from ~Yellow~{0}~R~'
                            :> [ exe, exeUrl ];

                        var success = false;

                        using (var w = new WebClient()) {
                            try {
                                w.DownloadFile(u, exe);

                                if (exe | isFile) {
                                    printSuccess('Download successful');
                                    success = true;
                                    break;
                                }
                            } catch (e) {
                                printError('Error: {0}', e.message);
                            }
                        }

                        if (!success) {
                            throw new InvalidOperationException(
                                'Could not find or download nuget executable');
                        }
                    }
                }
                
            } /*else {
                'Nuget assembly found at ~Green~{0}~R~' :> [ exe ];
            }*/

            if (load exe == null) {                
                throw 'Failed loading Nuget.Core';
            } /*else {
                :> 'Nuget assembly loaded';
            }*/

            repoMemoizer = memoize(string, IPackageRepository, @() PackageRepositoryFactory.Default.CreateRepository($_));
        },

        repoUrl: "https://packages.nuget.org/api/v2",
        customResolver: false,
        isResolveSet: false,
        trace: false,
        ignoreDependencies: false,
        allowPrereleaseVersions: true,
        refMap: new Dictionary[string, string](),
        createRepo: @() PackageRepositoryFactory.Default.CreateRepository(repoUrl), //repoMemoizer.Call(repoUrl),
        createPackageManager: @() new PackageManager(createRepo(), getEntryPath('packages')),
        getLocalPackages: @() createPackageManager().LocalRepository.GetPackages(),
        
        reference: @(packageId, version) {
            // if ($args.Count > 1) {
            //     ret $args-<reference;
            // }

            // printInfo('Referencing {0} {1}', packageId, version);

            var findPackage = @() version defined && version != null ?
                getLocalPackages()
                    -? @(x)
                        x.Id.Equals(packageId, StringComparison.OrdinalIgnoreCase) &&
                        x.Version == parseVersion(version) :
                getLocalPackages()
                    -? (@(x) x.Id.Equals(packageId, StringComparison.OrdinalIgnoreCase))
                    -/ @.Version;

            if (trace) {
                console.info('Searching for package');
            }

            var packages = findPackage();

            if (packages #! @== 0) {
                if (trace) {
                    console.info('Package not found, installing');
                }

                version defined ?
                    installPackage(packageId, version) :
                    installPackage(packageId);

                // getLocalPackages() -? (@(x) x.Id == packageId) |> dump;
                packages = findPackage();

                if (trace) {
                    console.info('Searching for package');
                }
            } else if (trace) {
                console.info('Package found');
            }

            var p = packages ^!;

            if (trace) {
                console.info('Selected package {0}', p);
                console.info('Selected package refs {0}', p.AssemblyReferences);
            }
            
            var fs = createPackageManager().FileSystem;
            var d = '{0}.{1}' :: [ p.Id, p.Version ] |> fs.GetFullPath;

            if (trace) {
                console.info('Full package path: {0}', d);
            }

            var refAsmGroups = p.AssemblyReferences
                -?(@()io.name($_) != '_._')
                -<(@(r) $_.SupportedFrameworks->(@()({
                    path: r, id: $_.Identifier, name: $_.FullName, version: $_.Version
                })))
                -&@.name;

            if (trace) {
                if (refAsmGroups | any) {
                    refAsmGroups->@console.info('Ref group: {0}');
                } else {
                    console.error('No package ref groups');
                }
            }
            
            var refAsmPaths;

            if (((var filtered = refAsmGroups -? @(r) frameworks=?r.Key.StartsWith) #!) != 0) {
                0..(frameworks#!) for (i) {
                    var f = $(i) 0: orderByDescending, thenByDescending;
                    var n = frameworks[i];
                    filtered = filtered @f(@(x) x[0].id == n);                    
                };
                
                refAsmPaths = filtered | toArray;
            } else {
                refAsmPaths = refAsmGroups -/@.Key;
            }

            refAsmPaths = refAsmPaths ^! ->@() Path.Combine(d, $_.path);

            var badAsms = refAsmPaths-?(@(x) !File.Exists(x));

            if (badAsms #! @!= 0) {
                    fatal('Bad asms: {0}', badAsms @join(', '));
                    exit(0xbad01);
            }

            refAsmPaths->@(a) {
                var key = a |> Path.GetFileNameWithoutExtension;
                traceInfo('Adding ~Magenta~{0}~R~:~Cyan~{1}~R~ to map', key, a);
                refMap.Add(key, a);
            };

            if (customResolver && !isResolveSet) {
                AppDomain.CurrentDomain.add_AssemblyResolve(@(o, e) {
                    trace('Resolving ~Cyan~{0}~R~', e.Name);
                    var an = new AssemblyName(e.Name);
                    
                    // var key = !an.Name.EndsWith('.resources') ?
                    //     an.Name :
                    //     an.Name.Remove(an.Name.Length - '.resources'.Length);

                    var key = an.Name;

                    if (refMap.ContainsKey(key)) {
                        traceSuccess('Assembly in map');
                        var asm = refMap.get_Item(key) |> Assembly.LoadFrom;
                        traceSuccess('Resolved from map: ~Cyan~{0}~R~', asm);

                        ret asm;
                    } else {
                            traceQuery('Assembly not in map');
                            var asm = Assembly.LoadFrom(e.Name);
                            
                            if (asm != null) {
                                traceSuccess('Assembly loaded: ~Cyan~{0}~R~', asm);
                            } else {
                                traceError('Failed loading assembly: ~Yellow~{0}~R~', e.Name);
                            }

                            ret asm;
                        }
                    });

                    isResolveSet = true;
                }

                ret refAsmPaths->Assembly.LoadFrom;
        },

        find: @(packageId, version) $args.Count == 1 || version == null ?
            createRepo().FindPackagesById(packageId) :
            createRepo().FindPackage(packageId, parseVersion(version)),

        local: {
            getRepo: @() nuget.createPackageManager().LocalRepository,
            find:  @(id, version)
                $args.Count == 1 || version == null ? getRepo().FindPackagesById(id) :
                version | nuget.parseVersion @getRepo().FindPackage(id),

            resolve: @(name, version) ($($args.Count)
                1: find(name)-/@.Version |> firstOrDefault,
                2: find(name, version),
                throw new ArgumentException())
                |> pm.PathResolver.GetPackageDirectory
                @io.prepend((var pm = nuget.createPackageManager()).FileSystem.Root),
        },

        parseVersion: @(v) $(v.GetType())
            SemanticVersion: v,
            string: v | SemanticVersion.Parse,
            throw new InvalidArgumentException('v')
    };

    installPackage = @(packageId, version)
        nuget
            .createPackageManager()
            .InstallPackage(
                packageId,
                version defined && version != null ? version | parseVersion : null,
                nuget.ignoreDependencies,
                nuget.allowPrereleaseVersions);

    nuget.init();
}();

// Todo: replace with preprocessor looping support
traceInfo = macro(@(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
    if (nuget.trace) {
        printInfo(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }
});

traceQuery = macro(@(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
    if (nuget.trace) {
        printQuery(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }
});

trace = macro(@(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
    if (nuget.trace) {
        print(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }
});

traceSuccess = macro(@(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
    if (nuget.trace) {
        printSuccess(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }
});

traceError = macro(@(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
    if (nuget.trace) {
        printError(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
    }
});