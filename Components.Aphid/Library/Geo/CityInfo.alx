var cityInfo;

@{
    #'meta/code/roslynJit';
    _e = macro(@(s) { s.Replace('\\', '\\\\').Replace('"', '\\"') });
    var sibling = @(e) this.'$block'[0].Filename @io.sibling('cities500.{0}' :: e);
    roslynJit.saveCodeFile = true;
    cityInfo = {
        '$internal': {
            cities: {},
            importData: @(country) {
                
                ret importDataCore(country);
            },
            parseRows: @() 'txt' |> sibling |> io.lines -?@!=''->(@() _e($_).Split('\t')),
            parseCountries: @() parseRows()->(@()$_[8])!?,
            importDataCore: @(country)
                roslynJit
                    .compile(@{
                        var rows = parseRows()-?(@()$_[8] == country) |> toArray;
                        var sb = new StringBuilder();
                        
                        sb.AppendFormat('
                                public readonly struct CityInfo
                                {{
                                    public readonly string Name;
                                    public readonly string State;
                                    public const string Country = "{0}";
                                    public readonly double Latitude;
                                    public readonly double Longitude;

                                    public CityInfo(
                                        string name,
                                        in string state,
                                        double latitude,
                                        double longitude)
                                    {{
                                        Name = name;
                                        State = state;
                                        Latitude = latitude;
                                        Longitude = longitude;
                                    }}
                                }}
                            ',
                            country);
                        
                        // var countryCodes = country == null ? rows->(@()$_[8]) @prepend('')!? : [ country ];
                        sb.Append(
                            '
                                public static CityInfo GetClosestCity(double lat, double lng)
                                {
                                    double tmp;
                            ');

                        var i = 0;
                        rows for {                                
                            if (i == 0) {
                                sb.AppendFormat(
                                    '
                                        var cur = (Math.Abs({1} - lat) + Math.Abs({2} - lng));
                                        var closest = 0;
                                    ',
                                    i++,
                                    $_[4],
                                    $_[5]);
                            } else {
                                sb.AppendFormat(
                                    '
                                        if ((tmp = (Math.Abs({1} - lat) + Math.Abs({2} - lng))) < cur)
                                        {{
                                            cur = tmp;
                                            closest = {0};
                                        }}
                                    ',
                                    i++,
                                    $_[4],
                                    $_[5]);
                            }
                        };

                        sb.Append(
                            '
                                    switch (closest)
                                    {
                            ');

                        i = 0;
                        rows for {
                            sb.AppendFormat(
                                (i != rows.Length - 1 ?
                                    'case {0}' :
                                    'default') +
                                    ': return new CityInfo("{1}", "{2}", {3}, {4});\r\n',
                                i++,
                                $_[1],
                                $_[10],                                
                                $_[4],
                                $_[5]);
                        };

                        sb.Append(
                            '
                                    }                                        
                                }
                            ');

                        ret sb.ToString()
                    },
                    country),
        },
        distance: @(lat, lng, r) Math.Sqrt(Math.Abs(r.Latitude - lat) + Math.Abs(r.Longitude - lng)),        
        closestCore: @(lat, lng, country) 
            cityInfo.'$internal'.importData(country.ToUpper()).GetClosestCity(lat, lng)
            // cityInfo.getCities(country)
            // @orderBy(@() Math.Abs($_.Latitude - lat) + Math.Abs($_.Longitude - lng))
            // |> first
            @() ({ distance: $_ @distance(lat, lng), details: $_ }),

        memoized: memoize(Tuple[double, double, string], AphidObject, @(x) cityInfo.closestCore(x.Item1, x.Item2, x.Item3)),
        closest: @(lat, lng, country) memoized.Call(new Tuple[double, double, string](lat, lng, country)),
    };    
}();