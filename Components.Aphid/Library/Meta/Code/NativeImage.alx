var nativeImage;

@{    
    #'system/nuget';
    #'system/stdio';    

    nativeImage = {
        initialized: false,
        verbose: false,
        pkgName: 'runtime.win10-x64.Microsoft.DotNet.Framework.NativeImageCompiler',
        pkgDir: null,
        ngenAsm: null,
        init: @{
            td = macro(@{ pkgName | nuget.local.resolve });
            try pkgDir = td();
            catch { }

            if (pkgDir == null) {
                installPackage(pkgName);
                pkgDir = td();
            }            
            
            ngenAsm = pkgDir @io.append(io.concat(pkgDir, 'tools', 'ngenr2r.exe'));
            initialized = true;
        },
        prepareArgs: @(asm, asmOut) '/Platform_Assemblies_Paths "{1};{2}" /in "{3}" /out "{4}"' :: [
            ngenAsm,
            ngenAsm @io.sibling('ref'),
            asm | io.up,
            asm,
            asmOut
        ],
        compile: @(asm, asmOut) {
            if (!initialized) {
                init();
            }

            asm = asm | io.full;

            if (verbose) {
                console.info('Compiling ~Cyan~{0}~R~ into native image', asm);
            }
            
            var ao = (var overwrite = $args.Count < 2) ? asm + '.native' : asmOut;

            if (verbose) {
                if (overwrite) {
                    console.query('Running in overwrite mode, replacing ~Cyan~{0}~R~', asm);
                } else {
                    console.query('Writing native image to ~Cyan~{0}~R~', asm);
                }
            }

            if (verbose) {
                console.query('Launching ~Cyan~{0}~R~', ngenAsm);
            }
            
            var args = prepareArgs(asm, ao);
            if (verbose) {
                console.info('Launching ngen:\r\n"{0}" {1}', ngenAsm, args);
            }
            var si = new ProcessStartInfo(ngenAsm, args);
            si.UseShellExecute = false;
            si.RedirectStandardError = true;
            si.RedirectStandardOutput = true;
            var p = Process.Start(si);
            var sb = new StringBuilder();
            
            stdio.redirect(
                p,
                @(data, isError) {
                    sb.Append(data);

                    if (verbose) {
                        if (isError) {
                            console.line('~Yellow~{0}~R~', data);
                        } else {
                            console.line(data);
                        }
                    } else {
                        if (isError) {
                            console.line(data);
                        }
                    }

                    if (isError) {
                        console.line(data);
                    }
                });

            p.WaitForExit();

            var result = { success: true, exitCode: p.ExitCode, out: sb.ToString() };

            if (verbose) {
                ($(p.ExitCode) 0: console.success, console.error)
                    <| 'Compiler exited with code {0}' :: p.ExitCode;
            }
            
            if (result.exitCode == 0) {
                if (overwrite) {
                    var backup = '{0}.{1}.bak' :: [ asm, DateTime.Now.Ticks ];
                    if (verbose) {
                        console.info('Creating backup ~Cyan~{0}~R~', backup);
                    }

                    io.move(asm,  backup);
                    io.move(ao, asm);
                    result.asmOut = asm;
                } else {
                    result.asmOut = ao;                    
                }

                if (verbose) {
                    console.success('Native image written to ~Green~{0}~R~', result.asmOut);
                }
            } else {
                if (verbose) {
                    console.error('Compilation failed:\r\n{0}', result.out);
                }

                result.success = false;
            }

            ret result;
        },
    };
}();