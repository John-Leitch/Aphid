 //#'DebugDeploy';
   
var viewModel;

@{
    #'Meta\\Code\\Generation\\StringEmitter';
    #'Meta\\Code\\Syntax\\CodeDom';
    using Components.Aphid.Lexer;
    using Components.Aphid.Parser;

    var e = strEmitter;
    e.inNamespace = false;
    e.inClass = false;

    e.classAspects = {
        public: true,
        partial: true,
    };

    e.propertyAspects = {
        public: true,
        silent: false,
    };

    e.aliases = null;
    e.boolConverter = {};
    e.boolConverterNames = [];
    e.lastPropertyName = null;
    e.lastOnChangeName = null;
    e.onChangeMap = [];
    e.onChangeStatements = [];

    e.imports = [];

    e.emitUnaryOperatorExpression = @(exp) {
        if (exp.Operator == AphidTokenType.usingKeyword){
            e.imports.add(exp.Operand);
        }
    };

    e.emitBinaryOperatorExpression = @(exp, isStatement) {
        if (isStatement) {
            if (exp.Operator == AphidTokenType.AssignmentOperator) {
                if (!exp.lhs().isId() || !exp.lhs().oneAttr(alias)) {
                    fatal('Expected id with alias attr on lhs of exp: {0}', exp);
                } else if ((e.aliases[var key = exp.lhs().id()] defined)) {
                    fatal('Alias {0} already defined', key);
                } else {
                    e.aliases[key] = StringParser.Parse(exp.rhs().Value);

                    ret null;
                }
            } else if (exp.Operator != AphidTokenType.MemberOperator) {
                fatal('Invalid op: {0}', exp.Operator);
            }

            var parts = exp.GetChildren();
            var badParts = parts-?(@() $_.Type != AphidExpressionType.IdentifierExpression);
        
            if ((badParts #!) != 0) {
                fatal('Invalid namespace decl: {0}', exp);
            }

            parts->@.Identifier+>@(x, y) x + '.' + y |> beginNamespace;
        } else {
            //append("(");
            emitExpression(exp.LeftOperand, false);
            exp.Operator |> opStr.binary.get |> append;
            emitExpression(exp.RightOperand, false);
            //append(")");
        }
    };

    e.emitTernaryOperatorExpression = @(exp, isStatement) {
        if (exp.Operator != AphidTokenType.ConditionalOperator ||
            exp.FirstOperand.Type != AphidExpressionType.IdentifierExpression)
            fatal('Invalid exp: {0}', exp);

        //exp |> dumpProps;     
        var n = exp.FirstOperand.Identifier.ToString();
        boolConverterNames.add(n);
        boolConverter.{n} = [ exp.SecondOperand, exp.ThirdOperand ];

        if (traceVMCompiler defined) {
            { boolConverterNames, boolConverter }
            |> serialize
            @print('[+] Bool converters updated: {0}');
        }

        //boolConverter.{exp.FirstOperand.Identifier}->emitExpression;
        //text |> print;

        //boolConverter |> serialize |> print;
        //print(0);
        //exit(0);
    };

    e.beginStatement = @(object, isStatement) {
        //print('Beginning stmt');
        //print(inNamespace);
        //print(inClass);
    };

    e.beginNamespace = @(ns) {
        if (inNamespace) {
            endNamespace();
            append('\r\n');
        }

        append('namespace {0}\r\n{{\r\n', ns);
        indent();

        e.imports->@(i){
            append(margin());
            append('using ');
            emitExpression(i, false);
            append(';\r\n');
        };

        e.imports.Clear();
        e.aliases = {};
        inNamespace = true;
    };

    e.endNamespace = @{
        unindent();
        append('}\r\n');
        inNamespace = false;
    };

    e.beginClass = @(object) {
        lastPropertyName = null;
        lastOnChangeName = null;
        onChangeMap = [];
        onChangeStatements = [];

        inClass = true;
        append(margin());

        if (classAspects.public) append('public ');
        if (classAspects.partial) append('partial ');

        append(
            'class {0} : System.ComponentModel.INotifyPropertyChanged\r\n',
            object.Identifier.Identifier);
            
        append(margin());
        append('{\r\n');
        indent();
    };

    e.emitObjectExpression = @(object, isStatement) {
        beginClass(object, isStatement);
        object.Pairs->emitProperty;
        
        onChangeMap->@(m){
            [
                'public event System.EventHandler {1}Changing, {1}Changed;',
                'partial void {0}();',
                'private void {0}Internal()'
            ]
            -> @() appendLine($_ :: [ m.func, m.prop ]);
            appendLine('{');
            indent();
            
            onChangeStatements-?(@(s) s.func == m.func)->@(s){
                var c = boolConverter.{s.converter};
                append(margin());
                append('{0} = {1} ? ', s.dst, s.condition);
                emitExpression(c[0], false);
                append(' : ');
                emitExpression(c[1], false);
                append(';\r\n');
            };
            unindent();
            appendLine('}');
            appendLine('');
        };

        endClass(object, isStatement);
    };

    e.endClass = @{
        unindent();

        append('
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void InvokePropertyChanged(
            [System.Runtime.CompilerServices.CallerMemberName] string callerName = null)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(callerName));
            }
        }

        protected void SetProperty<T>(
            ref T property,
            T value,
            [System.Runtime.CompilerServices.CallerMemberName] string callerName = null)
        {
            property = value;
            InvokePropertyChanged(callerName);
        }');

        append('\r\n{0}}}\r\n\r\n', margin());
        inClass = false;
    };

    e.emitProperty = @(p) {
        var lhs = p.LeftOperand;
        var a = lhs.Attributes;

        if (a.Count == 1) {
            if (traceVMCompiler defined) {
                a[0] @print('[?] Checking for bool converter "{0}"');
            }

            if (boolConverterNames.contains(a[0].Identifier)) {
                if (traceVMCompiler defined) {
                    a[0] @print('[+] Bool converter found with name "{0}"');
                }
                
                onChangeStatements.add({
                    func: lastOnChangeName,
                    dst: lhs.Identifier,
                    condition: lastPropertyName,
                    converter: a[0].Identifier,
                });

                ret null;
            
            }
        }

        var attrs = lhs |> parseAttributes;
        var name = lhs.Identifier;
        var field = '_' + name;

        append(margin());
        append('private ');
        append(attrs.type + ' ');
        append(field);

        if (p.RightOperand.Type != AphidExpressionType.IdentifierExpression) {
            append(' = ');
            emitExpression(p.RightOperand);
        }

        append(';\r\n\r\n');

        append(margin());
        append(attrs.access + ' ');
        append(attrs.type + ' ');
        append(name);

        append('\r\n');
        appendLine('{');
        indent();

        appendLine('get');
        appendLine('{');
        indent();
        appendLine('return ' + field + ';');
        unindent();
        appendLine('}');
        
        appendLine('set');
        appendLine('{');
        indent();
        appendLine('{0}Changing?.Invoke(this, System.EventArgs.Empty);' :: name);
        appendLine('{0} = value;' :: field);
        appendLine('{0}Changed?.Invoke(this, System.EventArgs.Empty);' :: name);
        var onChangeName = 'On{0}Changed' :: name;
        onChangeMap.add({ prop: name, func: onChangeName });
        ['Internal','']->@format('{0}{1}();', onChangeName)->appendLine;
        //appendLine('');
        
        if (!e.propertyAspects.silent && !attrs.silent) {
            appendLine('InvokePropertyChanged("' + name + '");');
        }

        unindent();
        appendLine('}');
        unindent();
        appendLine('}\r\n');

        lastPropertyName = name;
        lastOnChangeName = onChangeName;
        //print('[i] Last func: {0}', lastOnChangeName);
    };

    e.emitEnd = @{
        if (inClass) endClass();
        if (inNamespace) endNamespace();
    };

    var lastAttrTree = null;

    var parseAttributes = @(exp) {
        if (exp.Attributes.Count == 0)
            ret lastAttrTree;

        //print('='*40);
        //print('= Attributes');
        //print('='*40);

        var lexer = exp.Attributes->@.Identifier |> getLexer;

        var resolveAlias = @(name)
            e.aliasTypes defined && e.aliasTypes[name] defined ?
                e.aliasTypes[name] |> code.typeExp |> code.cs :
            e.aliases[name] defined ?
                e.aliases[name] |> Type.GetType |> code.typeExp |> code.cs :
                name;
        
        var attrTree = {
            access = lexer.oneOrNone(['private', 'public'], 'public'),
            baseType = lexer.take() |> resolveAlias,
            list = lexer.match('list'),
            type = !list ? baseType : 'ObservableCollection<{0}>' :: baseType,
            silent = lexer.match('silent'),
            success = lexer.eos,
        };

        lastAttrTree = attrTree;

        //attrTree |> serialize |> print;

        ret attrTree;
    };


    @{
        using System.Colletions.Generic;

        viewModel = {
            setText: @(sb) e.text = sb,
            typeSuffix: 'ViewModel',

            buildForType: @(namespace, type) {
                var code = fromType(namespace, type);
                var results = csharp.compileAsm(code);
                var vmType = results.CompiledAssembly.GetTypes()[0];

                ret vmType;
            },

            buildForTypes: @(namespace, types) {
                var code = types->(@() fromType(namespace, $_))@join('\r\n\r\n');
                var results = csharp.compileAsm(code);
                var vmTypes = results.CompiledAssembly.GetTypes();

                ret vmTypes;
            },

            buildForObject: @(namespace, name, object) {
                var code = fromObject(namespace, name, object);
                var results = csharp.compileAsm(code);
                var vmType = results.CompiledAssembly.GetTypes()[0];

                ret vmType;
            },

            compileCode: @(code, aliasTypes) {
                e.text.Clear();
                code |> parse |> preprocessor.transform @() compileAst($_, aliasTypes);
                ret e.text.ToString();
            },

            compileFile: File.ReadAllText @> compileCode,

            compileAst: @(ast, aliasTypes) {
                var visitor = createVisitor();

                visitor.functionExp = @(func) {
                    if (func.Body.Count == 0 ||
                        !func.Body[0].isId() ||
                        func.Body[0].id() != 'ViewModel') {
                        ret null;
                    }

                    func.Body.RemoveAt(0);
                    func.Body |> e.emit;
                };

                visitor.e = e;

                if (aliasTypes defined) {
                    visitor.e.aliasTypes = aliasTypes;
                }

                ast |> visitor.visit;

                return e.text;
            },

            fromTypeWith: @(namespace, type, propNames) 
                fromTypeExcept(
                    namespace,
                    type,
                    type
                        .GetProperties()
                        ->@.Name
                        -?(@() !propNames.contains($_))
                        |> Enumerable.ToList),

            fromType: @(namespace, type) fromTypeExcept(namespace, type),

            fromTypeExcept: @(namespace, type, ignore) {
                var typeMap = {};
                var props = type.GetProperties();

                (ignore defined && ignore != null ? 
                    props -? (@(p)
                        !(ignore =? (@()
                            ($_ == p.Name) ||
                            ($_ == type.Name + '.' + p.Name) ||
                            ($_ == type.FullName + '.' + p.Name)))) :
                    props)
                    ->@{ typeMap[$_.Name] = $_.PropertyType; };
                    
                // repl.run();
                if (traceVMCompiler defined) {
                    printInfo('Created map: ');                    
                    typeMap |> dump;
                }
                
                ret fromMap(namespace, type.Name, typeMap);
            },

            fromObject: @(namespace, name, aphidObject) {
                var map = {};

                aphidObject.Keys->@{
                    map[$_] = Object;
                };

                if (traceVMCompiler defined) {
                    printInfo('Created map: ');
                    typeMap |> dump;
                }

                ret fromMap(namespace, name, map);
            },

            fromMap: @(namespace, name, typeMap) {
                var i;
                var e;

                var usingStmts = typeMap.Keys
                    ->(@() typeMap[$_])
                    ->(@(x) Type.IsAssignableFrom(x.GetType()) ?
                        x.Namespace :
                        $(i = x.LastIndexOf('.')) -1: x, x.Remove(i))
                    -?(@!= null)
                    ->(@format('using {0};'))
                    !?;

                var aliases = {};
                var aliasMap = {};
                var aliasIndex = 0;
                var aliasTypes = {};
                
                var addAlias = @(type) {
                    if (aliasMap[var n = type.ToString()] defined) {
                        ret aliasMap[n]
                    } else {
                        var key = 'alias{0}' :: aliasIndex++;
                        aliases[key] = n;
                        aliasMap[n] = key;
                        aliasTypes[key] = type;

                        ret key;
                    }
                };

                var resolveType = @(t) {
                    if (!t.IsGenericType && !t.IsArray) {
                        ret t.Name;
                    } else if (t.IsArray &&
                        !(e = t.GetElementType()).IsArray &&
                        !e.IsGenericType) {
                        ret e.Name + ' list';
                    } else if ((e = t.GetInterface('IEnumerable`1')) != null) {
                        if (!(e = e.GetGenericArguments()[0]).IsGenericType &&
                            !e.IsArray) {
                            ret e.Name + ' list';
                        } else {
                            ret addAlias(e) + ' list';
                        }
                    } else if (t.GetInterface('IEnumerable') != null) {
                        ret 'Object list';
                    } else {
                        ret addAlias(t);
                    }
                };

                var members = typeMap.Keys
                    ->(@(x) resolveType(typeMap[x]) + ' ' + x)
                    ->@format('{0},\r\n');

                beginOut();

                %>
                @{
                    ViewModel;
                    
                    using System;
                    using System.Collections;
                    using System.Collections.Generic;
                    using System.Collections.ObjectModel;

                    <% usingStmts->@{ %><%= $_ %><% }; %>
                
                    <%= namespace %>;

                    <% aliases.Keys->@{ %>
                    alias <%= $_ %> = "<%= aliases[$_]%>";<%
                    }; %>

                    class <%= name %><%= viewModel.typeSuffix %>
                    {
                        Object ViewModelDataSource,
                        
                        <% members->@{ %>
                        <%= $_ %><%
                        }; %>
                    }
                }
                <%

                var s = endOut().ToString();

                //s |> Console.WriteLine;

                ret compileCode(s, aliasTypes);
            },
        };
    }();


    

    //#'AphidUI';

    // print();
    //e.text |> print;

    // using System.IO;
    // e.text.ToString() @File.WriteAllText('C:\\source\\Aphid\\AphidUI\\ViewModels\\ViewModels.g.cs');

    //e.emitObjectExpression();
}();

// var vmCode = viewModel.compileFile('c:\\source\\aphid\\Components.Aphid\\Library\\AphidUI.alx');