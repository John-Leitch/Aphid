var aphidCompiler;
var preprocessor;
var exports;
var resources;
var csharp;

@{
    #'Meta\\Code\\Syntax\\CodeDom';
    #'Meta\\Code\\ViewModelCompiler';

    using System.Collections.Generic;    
    using System.Reflection;
    using System.Security.Cryptography;
    using System.Text;
    using Microsoft.CSharp;

    var md5Provider = new MD5CryptoServiceProvider();
    
    var md5 = {
        hash: md5Provider.ComputeHash,
        hex: @(buffer) buffer |> hash -> @format('{0:x2}') +> @(x, y) x + y
    };

    aphidCompiler = {
        compileCode: @(namespace, srcCode) {
            printInfo('Beginning compilation');
            var sb = new StringBuilder();

            printQuery('Compiling exports');
            exports.compile(namespace, srcCode) |> sb.AppendLine;
            printSuccess('Exports successfully compiled');

            printQuery('Compiling view models');
            viewModel.compileCode(srcCode) |> sb.AppendLine;
            printSuccess('View models successfully compiled');

            printSuccess('Compilation complete');
            ret sb.ToString();
        },

        emitCSFile: @(alxFile, namespace, method) {
            preprocessor.inlineScripts = true;
            printInfo('Parsing {0}', alxFile);
            var ast = alxFile |> io.text |> parse;
            printInfo('Transforming {0}', alxFile);
            var transformed = ast |> preprocessor.transform;
            
            ret transformed
                @csharp.fromAst(namespace, method)
                @(cs){
                    printInfo('Creating CS file from {0} with namespace {1} and method {2}', alxFile, namespace, method);
                    var csFile = alxFile + '.compiled.cs';
                    cs @io.out.txt(csFile);

                    ret csFile;
                }
        },

        buidDll: @(namespace, asmFile, alxFiles) {
            var csFiles = alxFiles
                ->io.full
                ->?>@(f) emitCSFile(
                    f,
                    namespace,
                    io.up(f)
                    .Split('/\\.')
                    @skipWhile(@(x) x.ToLower() != 'aphid')
                    @skipWhile(@(x) x.ToLower() != 'library' && x.ToLower() != 'tools')
                    ->language.capitalize
                    @join('_')
                    @+ ('_' + io.base(f).replace('.','__')));

            csharp.params = csharp.createDefaultParams();
            csharp.params.GenerateInMemory = false;
            csharp.params.OutputAssembly = asmFile;
            csharp.params.CompilerOptions = "/optimize";

            var tmp = csFiles -?(@!= null) |> Enumerable.ToArray;
            var tmp2 = new List[string]();
            tmp->tmp2.Add;
            
            ret csharp.compileAsmFromFiles(tmp2 | toArray).CompiledAssembly;
        },

        buildExe: @(alxFile, exeOut) {
            var asm = exeOut defined ? exeOut : alxFile @io.ext('.exe');
            printInfo('Compiling ~Cyan~{0}~R~ into ~Magenta~{1}~R~', alxFile, asm);
            var ns = alxFile | io.base;
            var cl = 'CompiledAphidProgram';
            var csFile = emitCSFile(alxFile, ns, 'GetAst');
            templates.entrypoint(ns, cl) @io.out.append.txt(csFile);
            
            // if (csharp.params == null) {
            //     csharp.params = csharp.createDefaultParams();
            // }
            
            csharp.roslyn.enable();
            csharp.exeCfg(ns, cl, asm);  
            csharp.optimize();

            printInfo('Launching Roslyn');

            ret csharp.compileAsmFromFiles([csFile]);
        },

        templates: {
            entrypoint: @(namespace, class)
                strOut(@{%>
                    namespace <%= namespace %>
                    {
                        using Components.External;
                        using Components.External.ConsolePlus;
                        using Components.Aphid.Interpreter;
                        using Components.Aphid.TypeSystem;
                        using Components.IO;
                        using System;
                        using System.IO;

                        internal class <%=class%>
                        {
                            private static void Main(string[] args)
                            {                                
                                VT100.TryEnable();
                                var interpreter = new AphidInterpreter();
                                interpreter.CurrentScope.Add(
                                    "$script",
                                    AphidObject.Scalar(PathHelper.GetExecutingPath("<%= namespace %>.alx")));
                                interpreter.Interpret(<%= namespace %>.AphidCompilerResources.GetAst());
                            }
                        }
                    }
                <%})
                .ToString(),
        },
    };

    preprocessor = {
        inlineScripts: false,

        transform: @(srcAst) {
            var partialOpMutator = new PartialOperatorMutator();
            var macroMutator = new AphidMacroMutator();
            var directiveMutator = new AphidPreprocessorDirectiveMutator();
            var includeMutator = new IncludeMutator();
            //includeMutator.Loader.SearchPaths.AddRange(_searchPaths);
            var constantFoldingMutator = new ConstantFoldingMutator();

            ret srcAst
                |> partialOpMutator.Mutate
                |> macroMutator.Mutate
                |> directiveMutator.Mutate
                |> (inlineScripts ? includeMutator.Mutate : @() $_)
                |> constantFoldingMutator.MutateRecursively;
        },
    };

    exports = {
        useBinaryFormatter: false,        

        compileFile: @(namespace, srcFile){
            printInfo('Parsing ~Cyan~{0}~R~', srcFile);
            ret srcFile |> File.ReadAllText @compile(namespace);
        },

        compile: @(namespace, srcCode){
            var srcAst;
            printQuery('Transforming code for ~Cyan~{0}~R~', namespace);
    
            try {
                srcAst = srcCode |> parse |> preprocessor.transform;
            } catch (e) {
                using Components.Aphid.UI;
                
                if (e.exception.GetType() == AphidParserException) {
                    AphidCli.DumpException(e.exception, srcCode);
                } else if (e.exception.InnerException != null && 
                    e.exception.InnerException.GetType() == AphidParserException) {
                    AphidCli.DumpException(e.exception.InnerException, srcCode);
                } else {
                    AphidCli.DumpException(e.exception, this.'$aphid');
                }                

                ret null;
            }

            printSuccess('Done transforming code');

            printQuery('Encoding ~Cyan~{0}~R~', namespace);
            var bytecode = AphidByteCode.Encode(srcAst);
            var resource = 'ByteCode_{0}' :: (bytecode |> md5.hex);
            printSuccess('Resource named ~Cyan~{0}~R~', resource);

            printInfo('Generating exports');
            printQuery('Searching for exports');
            var e = srcAst |> exports.find;

            printInfo('Compiling exports');

            var cs = e -> (@() exports.generate(namespace, resource, $_)) @join('\r\n');

            printSuccess('Exports generated');


            if (useBinaryFormatter) {
                printQuery('Serializing code');
            } else {
                printQuery('Compiling code to C#');
            }

            cs =
                '\r\n' +
                cs + '\r\n' +
                (useBinaryFormatter ?
                    resources.embed(namespace, resource, bytecode) :
                    csharp.fromAst(namespace, resource, srcAst));

            if (useBinaryFormatter) {
                printSuccess('Done serializing')
            } else {
                printSuccess('Done compiling code');
            }
            

            printQuery('Fixing imports');

            [ 'Components.Aphid.Interpreter', 'Components.Aphid.Parser' ]->@()
                cs = 'using global::' + $_ + ';\r\n' + cs.Replace($_ + '.', '');

            printSuccess('Done fixing imports');
            printSuccess('Output complete');

            ret cs.Trim() != '' ? cs : null;
        },

        find: @(srcAst) {
            var exports = new List[AphidObject]();

            srcAst @ast.walk(@(node, context) {
                if (!context.isRoot && !context.isBlock && node.isId() && node.firstAttr(export)) {
                    var exportExp = context.stack
                        ->@.node
                        @aq.first(@(x)
                            x.GetType() == BinaryOperatorExpression &&
                            x.isOp(AphidTokenType.AssignmentOperator));

                    var retType =
                        ($(node.attrs() #!) 1: 'void', node.attr(1).Identifier)
                        |> resolveType;

                    var memberPath = exportExp.lhs().GetChildren()->@.Identifier;
                    var className = memberPath[0];
                    var propertyName = memberPath[1];
                
                    var params = exportExp.rhs().Args
                        ->@()({
                            type: ($_.noAttrs() ? 'AphidObject' : $_.attr(0).Identifier) |> resolveType,
                            name: $_.Identifier
                        });

                    {
                        retType,
                        className,
                        propertyName,
                        params,
                        func: exportExp.rhs()
                    } |> exports.Add;
                }
            });

            ret exports;
        },

        generate: @(namespace, resource, export) {
        
            var typeName = export.className;
            var delName = export.propertyName + 'Delegate';
            var fieldName = '_' + export.propertyName;
            var f = code.field(code.typeExp(typeName), fieldName);
            
            var d = code
                .namespace(namespace)
                .type(typeName)
                .partial()
                .field(delName, fieldName)
                .static()
                .next()
                .withPublic()
                .property(delName, export.propertyName)
                .static()
                .getStmt(
                    f.ifNull([
                        code
                            .ctor(AphidInterpreter, [])
                            .call(
                                'Interpret',
                                [
                                    useBinaryFormatter ?
                                        code.typeExp(AphidByteCode).call(
                                            'Decode',
                                            [ code.var(resources.typeName).field(resource) ]) :
                                        code.var(resources.typeName).call(resource)
                                ])
                            .stmt(),
                    ]))
                .wrapField(f)
                .next()
                .delegate(export.retType, delName);

            export.params->@() d.param($_.type, $_.name);

            ret d.next().namespace().code();
        }
    };

    resources = {
        typeName: 'AphidCompilerResources',
        embed: @(namespace, resource, buffer) {
            var type = byte.MakeArrayType();
            var fieldName = '_' + resource;

            ret code
                .namespace(namespace)
                .type(typeName)
                .partial()
                .field(type, fieldName, code.arrayCreate(type, buffer->code.primitive))
                .static()
                .next()
                .withPublic()
                .property(type, resource)
                .static()
                .getField(code.typeExp(typeName).field(fieldName))
                .next()
                .namespace()
                .code();
        },
    };

    emit = macro(@(text) {
        sb.Append(getTab());
        sb.Append(text);
    });
    
    emitLine = macro(@(text) {
        sb.Append(getTab());
        sb.AppendLine(text);
    });

    emitFormat = macro(@(fmt, fmtArg) {
        sb.Append(getTab());
        sb.AppendFormat(fmt, fmtArg);
    });

    emitLineFormat = macro(@(fmt, fmtArg) {
        sb.Append(getTab());
        sb.AppendFormat(fmt, fmtArg);
        sb.AppendLine();
    });

    concat = macro(@(text) { sb.Append(text) });
    
    concatLine = macro(@(text) {
        sb.Append(text);
        sb.AppendLine();
    });

    csharp = {
        sb: null,
        indentCount: 0,
        tabList: 0..100->@(i) i * '    ',
        tab: '',
        propCache: new Dictionary[string, Object](),
        useExpBodies: true,
        emptyListTypes: null,
        defaultCtorTypes: null,
        fromAst: @(namespace, resource, block) {
            printInfo('Generating C# type ~Cyan~{0}.{1}~R~ from AST', namespace, resources.typeName);
            sb = new StringBuilder(0x1000000);
            emptyListTypes = new List[string]();
            defaultCtorTypes = new List[string]();
            getTab = macro(@{ tab });
            indent = macro(@{ tab = tabList[++indentCount] });
            unindent = macro(@{ tab = tabList[--indentCount] });

            // @ %* (x,y) { sb.Append(getTab());sb.AppendLine('{'); indent(); y; };
            // @ *% (x,y) { unindent();  sb.Append(getTab());sb.AppendLine('}'); y; };
            // @ *> (x,y) { indent(); y; };
            // @ <* (x,y) {  y;unindent(); };
            var _b = @(f){ strOut(f) |> sb.Append };
            _b(@{%>
            namespace <%= namespace %>
            {
                /* Test */
                using global::Components.Aphid.Lexer;
                using global::Components.Aphid.Parser;
                using System;
                using System.Collections.Generic;
            
                public static partial class <%= resources.typeName %>
                {
                    <%});
            if (!useExpBodies) {
                emitLineFormat('private static System.Lazy<List<AphidExpression>> {0}()', resource);
                _b(@{%>
                {
                    return new System.Lazy<List<AphidExpression>>(() =>
                    
                        <%}); compileAst(block); _b(@{%>
                    
                    );
                }
                <%});
            } else {
                _b(@{%>
                    /*fmt*/

                    public static List<AphidExpression> <%=resource%>() =>
                        <%=resource%>Lazy.Value;

                    private static readonly List<AphidExpression> _empty = new List<AphidExpression>();                    

                    private static System.Lazy<List<AphidExpression>> <%=resource%>Lazy =>
                        new System.Lazy<List<AphidExpression>>(() =>
                            <%}); compileAst(block); _b(@{%>
                        );

                    <% emptyListTypes->@(t){%>
                        private static readonly List<<%= t %>> _<%= t %>s = new List<<%= t %>>();
                    <%};%>

                    <% defaultCtorTypes->@(t){%>
                        private static readonly <%= t %> _<%= t %> = new <%= t %>();
                    <%};%>
                    
                <%});
            }
            _b(@{%>
                }
            }
            <%});
            ret sb;
       },

       compileAst: @(compileBlock, compileDelim, genericParam) {
            if (genericParam defined) {
                if (compileBlock.Count == 0) {                    
                    if (!emptyListTypes.Contains(genericParam)) {
                        emptyListTypes.Add(genericParam);
                    }

                    emitLine('_{0}s{1}' :: [
                        genericParam,
                        compileDelim defined && compileDelim.Length != 0 ? ',' : ''
                    ]);

                    ret null;
                }

                emitLineFormat('new List<{0}>', genericParam);
            } else {
                if (compileBlock.Count == 0) {                    
                    
                    emitLine(
                        '_empty{0}' ::
                        (compileDelim defined && compileDelim.Length != 0 ? ',' : ''));

                    ret null;
                }

                emitLine('new List<AphidExpression>');
            }

            emitLine('{');
            indent();
            for (compileBlock) compileNode($_, ',');
            unindent();

            if (compileDelim defined && compileDelim.Length != 0) {
                emitLine('},');
            } else {
                emitLine('}');
            }
        },

        bindingFlags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance,

        compileNode: @(node, compileNodeDelim) {
            var t = node.GetType();
            var ctorParams;

            if (propCache.ContainsKey(t.FullName)) {
                ctorParams = propCache.get_Item(t.FullName);
            } else {
                
                var props = t.GetProperties(bindingFlags);
                ctorParams = new List[PropertyInfo]();

                for (props)
                    if ($_.PropertyType != AphidExpressionType) {
                        ctorParams.Add($_);
                    }

                propCache.Add(t.FullName, ctorParams);
            }

            if (ctorParams.Count == 0) {
                if (!defaultCtorTypes.Contains(t.Name)) {
                    defaultCtorTypes.Add(t.Name);
                }

                emitLine('_{0}{1}' :: [ t.Name, compileNodeDelim defined ? ',' : '' ]);

                ret null;
            }

            emit('new ');
            concat(t.Name);
            concatLine('(');
            indent();
            
            var count = ctorParams #!;
            var last = count - 1;
            var i = 0;

            for (ctorParams) 
                compileArg(i++ == last, $_.GetValue(node));
            
            unindent();

            if (compileNodeDelim defined) {
                emitLine('),');
            } else {
                emitLine(')');
            }
        },

        compileArg: @(isLast, arg) {            
            if (!isLast) {
                if (arg == null) {
                    emitLine('null,');
                    ret null;
                }

                var t = arg.GetType();

                if (t == AphidTokenType) {
                    emit('AphidTokenType.');
                    concat(arg);
                    concatLine(',');
                } else if (t.BaseType == AphidExpression) {
                    compileNode(arg, ',');
                // Todo: investigate optimizing via hardcoding cases for generic 
                // types e.g. List[IdentifierExpression]
                // } else if (IEnumerable[IdentifierExpression].IsAssignableFrom(t)) {
                //     compile(arg, delim, 'IdentifierExpression');
                } else if (IEnumerable[AphidExpression].IsAssignableFrom(t)) {
                    compileAst(arg, isLast ? '' : ',', t.GetGenericArguments()[0].Name);
                } else if (t == string) {
                    emit('"');
                    concat(escapeString(arg));
                    concatLine('",');
                } else if (t == decimal) {
                    emit(arg.ToString());
                    concatLine(',');
                } else if (t == bool) {
                    emit(arg ? 'true' : 'false');
                    concatLine(',');
                } else {
                    throw 'Not implemented: {0}' :: t;
                }

            } else {
                if (arg == null) {
                    emitLine('null');
                    ret null;
                }

                var t = arg.GetType();

                if (t == AphidTokenType) {
                    emit('AphidTokenType.');
                    concatLine(arg);
                } else if (t.BaseType == AphidExpression) {
                    compileNode(arg);
                } else if (IEnumerable[AphidExpression].IsAssignableFrom(t)) {
                    compileAst(arg, isLast ? '' : ',', t.GetGenericArguments()[0].Name);
                } else if (t == string) {
                    emit('"');
                    concat(escapeString(arg));
                    concatLine('"');
                } else if (t == decimal) {
                    emitLine(arg.ToString());
                } else if (t == bool) {
                    emitLine(arg ? 'true' : 'false');
                } else {
                    throw 'Not implemented: {0}' :: t;
                }
            }
        },

        escapeString: @(str) str
            .Replace('\\', '\\\\')
            .Replace('"', '\\"')
            .Replace('\r', '\\r')
            .Replace('\n', '\\n')
            .Replace('\x00', '\\x00'),

        refs: null,

        params: null,
        provider: new CSharpCodeProvider(),

        compileAsm: @(cs) {
            //using Microsoft.CSharp;
            
            //var provider = new CSharpCodeProvider();

            if (params == null) {
                params = createDefaultParams();
            }

            //cs |> Console.WriteLine;

            var results = provider.CompileAssemblyFromSource(params, cs);

            if ((results.Errors #!) > 0) {
                results.Errors |> dump;
                throw (results.Errors |> serialize);
            }

            ret results;
        },

        compileAsmFromFiles: @(files) {
            //using Microsoft.CSharp;
            
            //var provider = new CSharpCodeProvider();

            if (params == null) {
                params = createDefaultParams();
            }

            //cs |> Console.WriteLine;

            var results = provider.CompileAssemblyFromFile(params, files);

            if ((results.Errors #!) > 0) {
                results.Errors |> dump;
                throw (results.Errors |> serialize);
            }

            ret results;
        },

        createDefaultParams: @() {
            using System.CodeDom.Compiler;

            var params = new CompilerParameters();
            params.GenerateInMemory = true;
            var asms = AppDomain.CurrentDomain.GetAssemblies()-?(@() !$_.IsDynamic)->@.Location;
            asms->params.ReferencedAssemblies.Add;

            ret params;
        },

        roslyn: {
            packages: {
                compiler: { name: 'Microsoft.Net.Compilers.Toolset', version: '3.8.0-2.final' },
                codeDom: { name: 'Microsoft.CodeDom.Providers.DotNetCompilerPlatform', version: '2.0.1' },
            },
            getPackageDir: @(p) 'packages' | io.app.path @io.first.dir('{0}.{1}' :: p.Values), 
            getCsc: @() packages.compiler | getPackageDir @io.first.file('csc.exe'),
            verify: @{
                printQuery('Verifying Roslyn installation');
                var missing = packages.Values -? getPackageDir @> io.no.dir;

                if ((missing#!) > 0) {
                    missing-> @() printError('Package not found: ~Yellow~{0}.{1}~R~', $_.name, $_.version);
                    ret false;
                }

                printSuccess('Packages found');

                var csc = getCsc();

                if (csc == null || csc | io.not.file) {
                    packages.compiler 
                    @() printError('Could not locate csc.exe from ~Yellow~{0}.{1}~R~ package', $_.name, $_.version);
                    ret false;
                }

                printSuccess('CSC found');

                ret true;
            },
            update: @{
                #'System/Nuget';

                printInfo('Installing Roslyn packages');
                packages.Values->@() installPackage($_.name, $_.version);

                if (!verify()) {
                    throw new InvalidOperationException('Could not install Roslyn packages');
                }
            },
            enable: @(settingsCallback){
                if (!verify()) {
                    update();
                }

                printInfo('Referencing {0}', packages.codeDom.name);
                var pkg = packages.codeDom;
                var n = pkg.name;
                var p = pkg
                    | getPackageDir
                    @io.end('lib')
                    @io.first.file('{0}.dll' :: n);

                var domAsm = load p;

                if (domAsm == null) {
                    throw new InvalidOperationException('Could not find {0} assembly' :: n);
                }
                
                // nuget.reference(p.name, p.version);
                printInfo('Looking for CSharpCodeProvider');
                var t = domAsm.GetType('{0}.CSharpCodeProvider' :: n);
                csharp.provider = new t();
                var getField = @(p, o) o.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance) ~| p;
                var f = csharp.provider @getField('_compilerSettings');        
                var settings = f.GetValue(csharp.provider);
                var f3 = settings @getField('_compilerServerTimeToLive');
                f3.SetValue(settings, 100000.int());
                env.set('VBCSCOMPILER_TTL', 100000.ToString());

                if ($args.Count > 0) {
                    settingsCallback(settings);
                }

                var f2 = settings @getField('_compilerFullPath');
                var oldPath = f2.GetValue(settings);
                var csc = getCsc();

                if (oldPath == csc) {
                    printSuccess('CodeDom path already set to ~Cyan~{0}~R~', csc);
                    ret null;
                }

                f2.SetValue(settings, csc);
                var v = f2.GetValue(settings);

                if (v == oldPath) {
                    throw new InvalidOperationException('Failed updating roslyn exe path');
                } else {
                    printSuccess('CSharpCodeProvider compiler path successfully set to ~Cyan~{0}~R~', v);
                }
            },
        },

        // Todo: lazily evaluate to handle multiple conflicting calls
        option: @(o){
            var p = getParams();
            
            if (p.CompilerOptions == null) {
                p.CompilerOptions = '';
            }

            p.CompilerOptions += ' ' + o;
        },

        optimize: @option('/optimize'),
        x86: @option('/platform:x86'),
        x64: @option('/platform:x64'),
        noDebug: @option('/debug-'),

        exeCfg: @(asmNamespace, startupClass, asmOut) {
            var p = getParams();
            p.MainClass = '{0}.{1}' :: [ asmNamespace, startupClass ];
            p.GenerateExecutable = true;
            p.GenerateInMemory = false;
            p.OutputAssembly = asmOut;
        },

        '$internal': {
            getParams: @{
                if (csharp.params == null) {
                    csharp.params = csharp.createDefaultParams();
                }

                ret csharp.params;
            },
        },
        
    };

    var getParams = csharp.'$internal'.getParams;
}();    