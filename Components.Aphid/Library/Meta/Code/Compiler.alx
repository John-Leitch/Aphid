var aphidCompiler;
var preprocessor;
var exports;
var resources;
var csharp;

@{
    #'Meta\\Code\\Syntax\\CodeDom';
    #'Meta\\Code\\ViewModelCompiler';

    using System.Collections.Generic;    
    using System.Reflection;
    using System.Security.Cryptography;
    using System.Text;
    using Microsoft.CSharp;

    var md5Provider = new MD5CryptoServiceProvider();
    
    var md5 = {
        hash: md5Provider.ComputeHash,
        hex: @(buffer) buffer |> hash -> @format('{0:x2}') +> @(x, y) x + y
    };

    aphidCompiler = {
        compileCode: @(namespace, srcCode) {
            printInfo('Beginning compilation');
            var sb = new StringBuilder();

            printQuery('Compiling exports');
            exports.compile(namespace, srcCode) |> sb.AppendLine;
            printSuccess('Exports successfully compiled');

            printQuery('Compiling view models');
            viewModel.compileCode(srcCode) |> sb.AppendLine;
            printSuccess('View models successfully compiled');

            printSuccess('Compilation complete');
            ret sb.ToString();
        }
    };

    preprocessor = {
        inlineScripts: false,

        transform: @(srcAst) {
            var partialOpMutator = new PartialOperatorMutator();
            var macroMutator = new AphidMacroMutator();
            var directiveMutator = new AphidPreprocessorDirectiveMutator();
            var includeMutator = new IncludeMutator();
            //includeMutator.Loader.SearchPaths.AddRange(_searchPaths);
            var constantFoldingMutator = new ConstantFoldingMutator();

            ret srcAst
                |> partialOpMutator.MutateRecursively
                |> macroMutator.MutateRecursively
                |> directiveMutator.MutateRecursively
                |> (inlineScripts ? includeMutator.MutateRecursively : @() $_)
                |> constantFoldingMutator.MutateRecursively;
        },
    };

    exports = {
        useBinaryFormatter: false,        

        compileFile: @(namespace, srcFile){
            printInfo('Parsing ~Cyan~{0}~R~', srcFile);
            ret srcFile |> File.ReadAllText @compile(namespace);
        },

        compile: @(namespace, srcCode){
            var srcAst;
            printQuery('Transforming code for ~Cyan~{0}~R~', namespace);
    
            try {
                srcAst = srcCode |> parse |> preprocessor.transform;
            } catch (e) {
                using Components.Aphid.UI;
                
                if (e.exception.GetType() == AphidParserException) {
                    AphidCli.DumpException(e.exception, srcCode);
                } else if (e.exception.InnerException != null && 
                    e.exception.InnerException.GetType() == AphidParserException) {
                    AphidCli.DumpException(e.exception.InnerException, srcCode);
                } else {
                    AphidCli.DumpException(e.exception, this.'$aphid');
                }                

                ret null;
            }

            printSuccess('Done transforming code');

            printQuery('Encoding ~Cyan~{0}~R~', namespace);
            var bytecode = AphidByteCode.Encode(srcAst);
            var resource = 'ByteCode_{0}' :: (bytecode |> md5.hex);
            printSuccess('Resource named ~Cyan~{0}~R~', resource);

            printInfo('Generating exports');
            printQuery('Searching for exports');
            var e = srcAst |> exports.find;

            printInfo('Compiling exports');

            var cs = e -> (@() exports.generate(namespace, resource, $_)) @join('\r\n');

            printSuccess('Exports generated');


            if (useBinaryFormatter) {
                printQuery('Serializing code');
            } else {
                printQuery('Compiling code to C#');
            }

            cs =
                '\r\n' +
                cs + '\r\n' +
                (useBinaryFormatter ?
                    resources.embed(namespace, resource, bytecode) :
                    csharp.fromAst(namespace, resource, srcAst));

            if (useBinaryFormatter) {
                printSuccess('Done serializing')
            } else {
                printSuccess('Done compiling code');
            }
            

            printQuery('Fixing imports');

            [ 'Components.Aphid.Interpreter', 'Components.Aphid.Parser' ]->@()
                cs = 'using global::' + $_ + ';\r\n' + cs.Replace($_ + '.', '');

            printSuccess('Done fixing imports');
            printSuccess('Output complete');

            ret cs.Trim() != '' ? cs : null;
        },

        find: @(srcAst) {
            var exports = new List[AphidObject]();

            srcAst @ast.walk(@(node, context) {
                if (!context.isRoot && !context.isBlock && node.isId() && node.firstAttr(export)) {
                    var exportExp = context.stack
                        ->@.node
                        @aq.first(@(x)
                            x.GetType() == BinaryOperatorExpression &&
                            x.isOp(AphidTokenType.AssignmentOperator));

                    var retType =
                        ($(node.attrs() #!) 1: 'void', node.attr(1).Identifier)
                        |> resolveType;

                    var memberPath = exportExp.lhs().GetChildren()->@.Identifier;
                    var className = memberPath[0];
                    var propertyName = memberPath[1];
                
                    var params = exportExp.rhs().Args
                        ->@()({
                            type: ($_.noAttrs() ? 'AphidObject' : $_.attr(0).Identifier) |> resolveType,
                            name: $_.Identifier
                        });

                    {
                        retType,
                        className,
                        propertyName,
                        params,
                        func: exportExp.rhs()
                    } |> exports.Add;
                }
            });

            ret exports;
        },

        generate: @(namespace, resource, export) {
        
            var typeName = export.className;
            var delName = export.propertyName + 'Delegate';
            var fieldName = '_' + export.propertyName;
            var f = code.field(code.typeExp(typeName), fieldName);
            
            var d = code
                .namespace(namespace)
                .type(typeName)
                .partial()
                .field(delName, fieldName)
                .static()
                .next()
                .withPublic()
                .property(delName, export.propertyName)
                .static()
                .getStmt(
                    f.ifNull([
                        code
                            .ctor(AphidInterpreter, [])
                            .call(
                                'Interpret',
                                [
                                    useBinaryFormatter ?
                                        code.typeExp(AphidByteCode).call(
                                            'Decode',
                                            [ code.var(resources.typeName).field(resource) ]) :
                                        code.var(resources.typeName).call(resource)
                                ])
                            .stmt(),
                    ]))
                .wrapField(f)
                .next()
                .delegate(export.retType, delName);

            export.params->@() d.param($_.type, $_.name);

            ret d.next().namespace().code();
        }
    };

    resources = {
        typeName: 'AphidCompilerResources',
        embed: @(namespace, resource, buffer) {
            var type = byte.MakeArrayType();
            var fieldName = '_' + resource;

            ret code
                .namespace(namespace)
                .type(typeName)
                .partial()
                .field(type, fieldName, code.arrayCreate(type, buffer->code.primitive))
                .static()
                .next()
                .withPublic()
                .property(type, resource)
                .static()
                .getField(code.typeExp(typeName).field(fieldName))
                .next()
                .namespace()
                .code();
        },
    };

    emit = macro(@(text) {
        sb.Append(getTab());
        sb.Append(text);
    });
    
    emitLine = macro(@(text) {
        sb.Append(getTab());
        sb.AppendLine(text);
    });

    emitFormat = macro(@(fmt, fmtArg) {
        sb.Append(getTab());
        sb.AppendFormat(fmt, fmtArg);
    });

    emitLineFormat = macro(@(fmt, fmtArg) {
        sb.Append(getTab());
        sb.AppendFormat(fmt, fmtArg);
        sb.AppendLine();
    });

    concat = macro(@(text) { sb.Append(text) });
    
    concatLine = macro(@(text) {
        sb.Append(text);
        sb.AppendLine();
    });

    csharp = {
        sb: null,
        indentCount: 0,
        tabList: 0..128->@(i) i * '    ',
        tab: '',
        propCache: new Dictionary[string, Object](),
        
        fromAst: @(namespace, resource, block) {
            sb = new StringBuilder(0x1000000);
            getTab = macro(@{ tab });
            indent = macro(@{ tab = tabList[++indentCount] });
            unindent = macro(@{ tab = tabList[--indentCount] });

            emit('namespace ');
            concatLine(namespace);
            emitLine('{');
            indent();
            emitLine('using global::Components.Aphid.Lexer;');
            emitLine('using global::Components.Aphid.Parser;');
            emitLine('using System.Collections.Generic;');
            emitLine('');
            emitLineFormat('public static partial class {0}', resources.typeName);
            emitLine('{');
            indent();
            emitLineFormat('public static List<AphidExpression> {0}()', resource);
            emitLine('{');
            indent();
            emit('return ');
            compileAst(block);
            sb.AppendLine(';');
            unindent();
            emitLine('}');
            unindent();
            emitLine('}');
            unindent();
            emitLine('}');

            ret sb;
       },

       compileAst: @(compileBlock, compileDelim, genericParam) {
            if (genericParam defined) {
                emitLineFormat('new List<{0}>', genericParam);
            } else {
                emitLine('new List<AphidExpression>');
            }

            emitLine('{');
            indent();
            for (compileBlock) compileNode($_, ',');
            unindent();

            if (compileDelim defined && compileDelim.Length != 0) {
                emitLine('},');
            } else {
                emitLine('}');
            }
        },

        bindingFlags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance,

        compileNode: @(node, compileNodeDelim) {
            var t = node.GetType();
            emit('new ');
            concat(t.Name);
            concatLine('(');
            indent();
            
            var ctorParams;

            if (propCache.ContainsKey(t.FullName)) {
                ctorParams = propCache.get_Item(t.FullName);
            } else {
                
                var props = t.GetProperties(bindingFlags);
                ctorParams = new List[PropertyInfo]();

                for (props)
                    if ($_.PropertyType != AphidExpressionType) {
                        ctorParams.Add($_);
                    }

                propCache.Add(t.FullName, ctorParams);
            }
            
            var count = ctorParams #!;
            var last = count - 1;
            var i = 0;

            for (ctorParams) 
                compileArg(i++ == last, $_.GetValue(node));
            
            unindent();

            if (compileNodeDelim defined) {
                emitLine('),');
            } else {
                emitLine(')');
            }
        },

        compileArg: @(isLast, arg) {            
            if (!isLast) {
                if (arg == null) {
                    emitLine('null,');
                    ret null;
                }

                var t = arg.GetType();

                if (t == AphidTokenType) {
                    emit('AphidTokenType.');
                    concat(arg);
                    concatLine(',');
                } else if (t.BaseType == AphidExpression) {
                    compileNode(arg, ',');
                // Todo: investigate optimizing via hardcoding cases for generic 
                // types e.g. List[IdentifierExpression]
                // } else if (IEnumerable[IdentifierExpression].IsAssignableFrom(t)) {
                //     compile(arg, delim, 'IdentifierExpression');
                } else if (IEnumerable[AphidExpression].IsAssignableFrom(t)) {
                    compileAst(arg, isLast ? '' : ',', t.GetGenericArguments()[0].Name);
                } else if (t == string) {
                    emit('"');
                    concat(arg.Replace('"', '\\"'));
                    concatLine('",');
                } else if (t == decimal) {
                    emit(arg.ToString());
                    concatLine(',');
                } else if (t == bool) {
                    emit(arg ? 'true' : 'false');
                    concatLine(',');
                } else {
                    throw 'Not implemented: {0}' :: t;
                }

            } else {
                if (arg == null) {
                    emitLine('null');
                    ret null;
                }

                var t = arg.GetType();

                if (t == AphidTokenType) {
                    emit('AphidTokenType.');
                    concatLine(arg);
                } else if (t.BaseType == AphidExpression) {
                    compileNode(arg);
                } else if (IEnumerable[AphidExpression].IsAssignableFrom(t)) {
                    compileAst(arg, isLast ? '' : ',', t.GetGenericArguments()[0].Name);
                } else if (t == string) {
                    emit('"');
                    concat(arg.Replace('"', '\\"'));
                    concatLine('"');
                } else if (t == decimal) {
                    emitLine(arg.ToString());
                } else if (t == bool) {
                    emitLine(arg ? 'true' : 'false');
                } else {
                    throw 'Not implemented: {0}' :: t;
                }
            }
        },

        refs: null,

        params: null,
        provider: new CSharpCodeProvider(),

        compileAsm: @(cs) {
            //using Microsoft.CSharp;
            
            //var provider = new CSharpCodeProvider();

            if (params == null) {
                params = createDefaultParams();
            }

            //cs |> Console.WriteLine;

            var results = provider.CompileAssemblyFromSource(params, cs);

            if ((results.Errors #!) > 0) {
                results.Errors |> dump;
                throw (results.Errors |> serialize);
            }

            ret results;
        },

        createDefaultParams: @() {
            using System.CodeDom.Compiler;

            var params = new CompilerParameters();
            params.GenerateInMemory = true;
            var asms = AppDomain.CurrentDomain.GetAssemblies()-?(@() !$_.IsDynamic)->@.Location;
            asms->params.ReferencedAssemblies.Add;

            ret params;
        },
    };
}();