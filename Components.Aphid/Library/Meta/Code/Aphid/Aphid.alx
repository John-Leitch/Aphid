namespace Components.Aphid;
token AphidTokenType;
base AphidExpression;
node AphidNodeType;
parser AphidParser;
mutable;

Lexer({
    init: @() {
        #'Std';
        #'Aphid.Tmpl';
        #'Aphid.Code';
        #'Aphid.Tokens';        
    },
    name: "Components.Aphid.Lexer.Aphid",
    modes: [ 
        {
            mode: "Aphid",
            tokens: tokens,
            keywords: [
                'break',
                'catch',
                'continue',
                'default',
                'defined',
                'delete',
                'do',
                'else',
                'extend',
                'false',
                'finally',
                'for',
                'if',
                'in',
                'load',
                'lock',
                'new',
                'null',
                'ret',
                'switch',
                'this',
                'throw',
                'true',
                'try',
                'using',
                'while',
            ],
            keywordDefault: getKeywordHelper('Identifier'),
            keywordTail: getKeywordHelper('{Keyword}')            
        },
        {
            mode: "Text",
            tokens: [
                { regex: '<%', type: 'GatorOpenOperator', newMode: "Aphid" },
                { regex: '<%=', type: 'GatorEmitOperator', newMode: "Aphid" },
                { regex: '<', code: textCode },
                { code: textCode },
            ]
        },
        {
            mode: "Shell",
            tokens: [
                { regex: '$', type: 'AphidExpressionOperator', newMode: "Aphid" },
                { code: shellCode },
            ]
        },
    ],
    ignore: [ 
        //"GatorOpenOperator",
        //"GatorCloseOperator",
        "WhiteSpace",
        "Comment" 
    ]
});

////////////////////////////////////////////////////////////////
// Types
////////////////////////////////////////////////////////////////
ArrayAccessExpression = { ArrayExpression, list KeyExpressions };
ArrayExpression = { list Elements };
BinaryOperatorExpression = { LeftOperand, AphidTokenType Operator, RightOperand };
BinaryOperatorBodyExpression = { AphidTokenType Operator, FunctionExpression Function };
BooleanExpression = { bool Value };
BreakExpression = { };
CallExpression = { FunctionExpression, opt list Args };
ContinueExpression = { };
DoWhileExpression = { Condition, list Body };
DynamicMemberExpression = { MemberExpression };
ExtendExpression = { IdentifierExpression ExtendType, ObjectExpression Object };
ForEachExpression = { Collection, list Body, opt Element };
ForExpression = { Initialization, Condition, Afterthought, list Body };
FunctionExpression = { list Args, list Body };
GatorOpenExpression = { };
GatorCloseExpression = { };
GatorEmitExpression = { Expression };
IdentifierExpression = { string Identifier, opt list IdentifierExpression Attributes };
IfExpression = { Condition, list Body, list ElseBody };
ImplicitArgumentExpression = { AphidTokenType Operator };
ImplicitArgumentsExpression = { AphidTokenType Operator };
LoadLibraryExpression = { LibraryExpression };
LoadScriptExpression = { FileExpression };
LockExpression = { list Expressions, list Body };
NullExpression = { };
NumberExpression = { decimal Value, };
ObjectExpression = { list BinaryOperatorExpression Pairs, opt IdentifierExpression Identifier };
PartialFunctionExpression = { CallExpression Call };
PartialOperatorExpression = { AphidTokenType Operator, Operand };
PatternExpression = { opt list Patterns, Value };
PatternMatchingExpression = { TestExpression, list PatternExpression Patterns };
UnaryOperatorExpression = { AphidTokenType Operator, Operand, opt bool IsPostfix };
UsingExpression = { Disposable, list Body };
StringExpression = { string Value };
SwitchCase = { list Cases, list Body };
SwitchExpression = { Expression, list SwitchCase Cases, list DefaultCase };
TernaryOperatorExpression = { AphidTokenType Operator, FirstOperand, SecondOperand, ThirdOperand };
TextExpression = { string Text };
ThisExpression = { };
TryExpression = { list TryBody, IdentifierExpression CatchArg, list CatchBody, list FinallyBody };
WhileExpression = { Condition, list Body };

////////////////////////////////////////////////////////////////
// Macros
////////////////////////////////////////////////////////////////
Delim = macro(@(_left, _value, _right) {
    Match(_left);
    _value;
    Match(_right);
});

Parens = macro(@(_value) { Delim(LeftParenthesis, _value, RightParenthesis); });

Prefix = macro(@(_token, _value) {
    Match(_token);
    _value;
});

TakeToken = macro(@(_var) {
    _var = TokenType;
    NextToken;
});

SkipThen = macro(@(_retVal) {
    @{
        NextToken;
        ret _retVal;
    };
});

ThenSkip = macro(@(_retVal) {
    @{
        exp = _retVal;
        NextToken;
        ret exp;
    };
});

ParseBinOpExp = macro(@(_parse, _ops) {
    @{
        operand = _parse();

        while (_ops) {
            TakeToken(op);
            operand = BinaryOperatorExpression(operand, op, _parse());
        }

        ret operand;
    };
});

CommaOrBreak = macro(@{
    if (Comma) {
        NextToken;
    } else {
        break;
    }
});

////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////
root list Parse = @{
    expressionSequence;
    NextToken;
    while (!None) expressionSequence += ParseStatement();

    ret expressionSequence;
};

ParseStatement = _ParseStatement(true);
ParseSingleStatement = _ParseStatement(false);

_ParseStatement = macro(@(_requireEos) {
    @{
        exp;
    
        // Todo add support for $ op
        switch (TokenType) {
            ifKeyword: exp ParseIfExpression;
            forKeyword: exp ParseForExpression;
            whileKeyword: exp ParseWhileExpression;
            
            doKeyword: { 
                exp ParseDoWhileExpression;
                MatchEos(_requireEos);
            }

            extendKeyword: exp ParseExtendExpression;
            tryKeyword: exp ParseTryExpression;
            switchKeyword: exp ParseSwitchExpression;
            usingKeyword: exp ParseUsingExpression;
            lockKeyword: exp ParseLockExpression;

            Text: exp ParseTextExpression;
            GatorOpenOperator: { exp = GatorOpenExpression(); NextToken; }
            GatorCloseOperator: { exp = GatorCloseExpression(); NextToken; }
            GatorEmitOperator: exp ParseGatorEmitExpression;
            
            default:  {
                exp ParseExpression;

                if (_requireEos) {
                    while (Comma) {
                        NextToken;
                        exp = BinaryOperatorExpression(exp, Comma, ParseExpression());
                    }
                }

                switch (TokenType) {
                    forKeyword: {
                        NextToken;
                        IdentifierExpression id;
                        
                        if (LeftParenthesis) {
                            NextToken;
                            id = ParseIdentifierExpression();
                            Match(RightParenthesis);
                        }

                        exp = ForEachExpression(exp, ParseSingleBlock(), id);
                    }
                }

                MatchEos(_requireEos);
            }
        }

        ret exp;
    };
});

MatchEos = macro(@(_requireEos) {
    if (_requireEos) {
        if (EndOfStatement)
            NextToken;
        else if (!RightBrace && !None)
            Error;
    }
});

root ParseExpression = @() ParseAssignmentExpression();

ParseAssignmentExpression = ParseBinOpExp(
    ParsePipelineExpression, 
    AssignmentOperator |
    PlusEqualOperator |
    MinusEqualOperator |
    MultiplicationEqualOperator |
    DivisionEqualOperator |
    ModulusEqualOperator |
    BinaryAndEqualOperator |
    OrEqualOperator |
    XorEqualOperator |
    ShiftLeftEqualOperator |
    ShiftRightEqualOperator);

ParsePipelineExpression = @{
    operand ParseRangeExpression;
    inPipeline = false;
    while (true) {
        switch (TokenType) {
            PipelineOperator: {
                inPipeline = true;
                TakeToken(op);
                operand = BinaryOperatorExpression(
                    operand, 
                    PipelineOperator, 
                    ParseRangeExpression());
            }

            InteropOperator: {
                inPipeline = true;
                operand = BinaryOperatorExpression(
                    operand, 
                    PipelineOperator, 
                    ParsePrefixUnaryOperatorExpression());
            }

            FunctionOperator: {
                inPipeline = true;
                operand = BinaryOperatorExpression(
                    operand, 
                    PipelineOperator, 
                    ParseFunctionExpression());
            }

            AggregateOperator,
            AnyOperator,
            CountOperator,
            EndsWithOperator,
            FirstOperator,
            GroupByOperator,
            LastOperator,
            OrderByOperator,
            OrderByDescendingOperator,
            SelectManyOperator,
            SelectOperator,
            StartsWithOperator,
            WhereOperator: {
                inPipeline = true;
                TakeToken(t);
                operand = BinaryOperatorExpression(
                    operand,
                    t,
                    ParseRangeExpression());
            }

            DistinctOperator,
            PostfixCountOperator,
            PostfixFirstOperator,
            PostfixLastOperator,
            PostfixOrderOperator,
            PostfixOrderDescendingOperator: {
                inPipeline = true;
                operand = UnaryOperatorExpression(TokenType, operand);
                NextToken;
            }

            default: {
                if (inPipeline && Identifier) {
                    operand = BinaryOperatorExpression(
                        operand,
                        PipelineOperator,
                        ParseExpression());
                } else {
                    break;
                }
            }
        }        
    }

    ret operand;
};

ParseRangeExpression = ParseBinOpExp(
    ParseConditionalExpression,
    RangeOperator
    | CompositionOperator
    | CustomOperatorOr());

ParseConditionalExpression = @{
    exp ParseLogicalExpression;

    if (ConditionalOperator) {
        NextToken;
        trueExpression ParseExpression;
        ColonOperator;
        falseExpression ParseExpression;

        ret TernaryOperatorExpression(
            ConditionalOperator,
            exp,
            trueExpression,
            falseExpression);
    } else {
        ret exp;
    }
};

ParseLogicalExpression = ParseBinOpExp(ParseComparisonExpression, AndOperator | OrOperator);

ParseComparisonExpression = ParseBinOpExp(
    ParsePostfixUnaryOperationExpression, 
    EqualityOperator |
    NotEqualOperator | 
    LessThanOperator |
    LessThanOrEqualOperator |
    GreaterThanOperator |
    GreaterThanOrEqualOperator);

ParsePostfixUnaryOperationExpression = @{
    term = ParseBinaryOrExpression();

    switch (TokenType) {
        IncrementOperator, DecrementOperator: {
            TakeToken(op);

            ret UnaryOperatorExpression(op, term, true);
        }

        default: ret term;
    }
};

ParseBinaryOrExpression = ParseBinOpExp(ParseXorExpression, BinaryOrOperator);
ParseXorExpression = ParseBinOpExp(ParseBinaryAndExpression, XorOperator);
ParseBinaryAndExpression = ParseBinOpExp(ParseShiftExpression, BinaryAndOperator);
ParseShiftExpression = ParseBinOpExp(ParseAdditionExpression, ShiftLeft | ShiftRight);
ParseAdditionExpression = ParseBinOpExp(ParseTermExpression, AdditionOperator | MinusOperator);

ParseTermExpression = ParseBinOpExp(
    ParsePrefixUnaryOperatorExpression,
    MultiplicationOperator | DivisionOperator | ModulusOperator);

ParsePrefixUnaryOperatorExpression = @{
    switch (TokenType) {
        AdditionOperator,
        MinusOperator,
        NotOperator,
        IncrementOperator,
        DecrementOperator,
        MultiplicationOperator,
        ComplementOperator,
        InteropOperator,
        newKeyword,
        loadKeyword,
        // CustomOperatorTup Begin
        CustomOperator000,
        CustomOperator001,
        CustomOperator002,
        CustomOperator003,
        CustomOperator004,
        CustomOperator005,
        CustomOperator006,
        CustomOperator007,
        CustomOperator008,
        CustomOperator009,
        CustomOperator010,
        CustomOperator011,
        CustomOperator012,
        CustomOperator013,
        CustomOperator014,
        CustomOperator015,
        CustomOperator016,
        CustomOperator017,
        CustomOperator018,
        CustomOperator019,
        CustomOperator020,
        CustomOperator021,
        CustomOperator022,
        CustomOperator023,
        CustomOperator024,
        CustomOperator025,
        CustomOperator026,
        CustomOperator027,
        CustomOperator028,
        CustomOperator029,
        CustomOperator030,
        CustomOperator031,
        CustomOperator032,
        CustomOperator033,
        CustomOperator034,
        CustomOperator035,
        CustomOperator036,
        CustomOperator037,
        CustomOperator038,
        CustomOperator039,
        CustomOperator040,
        CustomOperator041,
        CustomOperator042,
        CustomOperator043,
        CustomOperator044,
        CustomOperator045,
        CustomOperator046,
        CustomOperator047,
        CustomOperator048,
        CustomOperator049,
        CustomOperator050,
        CustomOperator051,
        CustomOperator052,
        CustomOperator053,
        CustomOperator054,
        CustomOperator055,
        CustomOperator056,
        CustomOperator057,
        CustomOperator058,
        CustomOperator059,
        CustomOperator060,
        CustomOperator061,
        CustomOperator062,
        CustomOperator063,
        CustomOperator064,
        CustomOperator065,
        CustomOperator066,
        CustomOperator067,
        CustomOperator068,
        CustomOperator069,
        CustomOperator070,
        CustomOperator071,
        CustomOperator072,
        CustomOperator073,
        CustomOperator074,
        CustomOperator075,
        CustomOperator076,
        CustomOperator077,
        CustomOperator078,
        CustomOperator079,
        CustomOperator080,
        CustomOperator081,
        CustomOperator082,
        CustomOperator083,
        CustomOperator084,
        CustomOperator085,
        CustomOperator086,
        CustomOperator087,
        CustomOperator088,
        CustomOperator089,
        CustomOperator090,
        CustomOperator091,
        CustomOperator092,
        CustomOperator093,
        CustomOperator094,
        CustomOperator095,
        CustomOperator096,
        CustomOperator097,
        CustomOperator098,
        CustomOperator099,
        CustomOperator100,
        CustomOperator101,
        CustomOperator102,
        CustomOperator103,
        CustomOperator104,
        CustomOperator105,
        CustomOperator106,
        CustomOperator107,
        CustomOperator108,
        CustomOperator109,
        CustomOperator110,
        CustomOperator111,
        CustomOperator112,
        CustomOperator113,
        CustomOperator114,
        CustomOperator115,
        CustomOperator116,
        CustomOperator117,
        CustomOperator118,
        CustomOperator119,
        CustomOperator120,
        CustomOperator121,
        CustomOperator122,
        CustomOperator123,
        CustomOperator124,
        CustomOperator125,
        CustomOperator126,
        CustomOperator127,
        CustomOperator128,
        CustomOperator129,
        CustomOperator130,
        CustomOperator131,
        CustomOperator132,
        CustomOperator133,
        CustomOperator134,
        CustomOperator135,
        CustomOperator136,
        CustomOperator137,
        CustomOperator138,
        CustomOperator139,
        CustomOperator140,
        CustomOperator141,
        CustomOperator142,
        CustomOperator143,
        CustomOperator144,
        CustomOperator145,
        CustomOperator146,
        CustomOperator147,
        CustomOperator148,
        CustomOperator149,
        CustomOperator150,
        CustomOperator151,
        CustomOperator152,
        CustomOperator153,
        CustomOperator154,
        CustomOperator155,
        CustomOperator156,
        CustomOperator157,
        CustomOperator158,
        CustomOperator159,
        CustomOperator160,
        CustomOperator161,
        CustomOperator162,
        CustomOperator163,
        CustomOperator164,
        CustomOperator165,
        CustomOperator166,
        CustomOperator167,
        CustomOperator168,
        CustomOperator169,
        CustomOperator170,
        CustomOperator171,
        CustomOperator172,
        CustomOperator173,
        CustomOperator174,
        CustomOperator175,
        CustomOperator176,
        CustomOperator177,
        CustomOperator178,
        CustomOperator179,
        CustomOperator180,
        CustomOperator181,
        CustomOperator182,
        CustomOperator183,
        CustomOperator184,
        CustomOperator185,
        CustomOperator186,
        CustomOperator187,
        CustomOperator188,
        CustomOperator189,
        CustomOperator190,
        CustomOperator191,
        CustomOperator192,
        CustomOperator193,
        CustomOperator194,
        CustomOperator195,
        CustomOperator196,
        CustomOperator197,
        CustomOperator198,
        CustomOperator199,
        CustomOperator200,
        CustomOperator201,
        CustomOperator202,
        CustomOperator203,
        CustomOperator204,
        CustomOperator205,
        CustomOperator206,
        CustomOperator207,
        CustomOperator208,
        CustomOperator209,
        CustomOperator210,
        CustomOperator211,
        CustomOperator212,
        CustomOperator213,
        CustomOperator214,
        CustomOperator215,
        CustomOperator216,
        CustomOperator217,
        CustomOperator218,
        CustomOperator219,
        CustomOperator220,
        CustomOperator221,
        CustomOperator222,
        CustomOperator223,
        CustomOperator224,
        CustomOperator225,
        CustomOperator226,
        CustomOperator227,
        CustomOperator228,
        CustomOperator229,
        CustomOperator230,
        CustomOperator231,
        CustomOperator232,
        CustomOperator233,
        CustomOperator234,
        CustomOperator235,
        CustomOperator236,
        CustomOperator237,
        CustomOperator238,
        CustomOperator239,
        CustomOperator240,
        CustomOperator241,
        CustomOperator242,
        CustomOperator243,
        CustomOperator244,
        CustomOperator245,
        CustomOperator246,
        CustomOperator247,
        CustomOperator248,
        CustomOperator249,
        CustomOperator250,
        CustomOperator251,
        CustomOperator252,
        CustomOperator253,
        CustomOperator254,
        CustomOperator255,
        CustomOperator256,
        CustomOperator257,
        CustomOperator258,
        CustomOperator259,
        CustomOperator260,
        CustomOperator261,
        CustomOperator262,
        CustomOperator263,
        CustomOperator264,
        CustomOperator265,
        CustomOperator266,
        CustomOperator267,
        CustomOperator268,
        CustomOperator269,
        CustomOperator270,
        CustomOperator271,
        CustomOperator272,
        CustomOperator273,
        CustomOperator274,
        CustomOperator275,
        CustomOperator276,
        CustomOperator277,
        CustomOperator278,
        CustomOperator279,
        CustomOperator280,
        CustomOperator281,
        CustomOperator282,
        CustomOperator283,
        CustomOperator284,
        CustomOperator285,
        CustomOperator286,
        CustomOperator287,
        CustomOperator288,
        CustomOperator289,
        CustomOperator290,
        CustomOperator291,
        CustomOperator292,
        CustomOperator293,
        CustomOperator294,
        CustomOperator295,
        CustomOperator296,
        CustomOperator297,
        CustomOperator298,
        CustomOperator299,
        CustomOperator300,
        CustomOperator301,
        CustomOperator302,
        CustomOperator303,
        CustomOperator304,
        CustomOperator305,
        CustomOperator306,
        CustomOperator307,
        CustomOperator308,
        CustomOperator309,
        CustomOperator310,
        CustomOperator311,
        CustomOperator312,
        CustomOperator313,
        CustomOperator314,
        CustomOperator315,
        CustomOperator316,
        CustomOperator317
        // CustomOperatorTup End
        : {
            TakeToken(t);
                        
            ret UnaryOperatorExpression(t, ParseArrayAccessExpression());
        }

        default: ret ParseArrayAccessExpression();
    }
};

ParseArrayAccessExpression = @{
    exp ParseCallExpression;

    while (LeftBracket) {
        NextToken;
        keys ParseTuple;
        RightBracket;
        exp = ArrayAccessExpression(exp, keys);
        ParseMemberBody(exp);
        ParseCallBody(exp);
    }

    if (definedKeyword) {
        NextToken;

        ret UnaryOperatorExpression(definedKeyword, exp, true);
    } else {
        ret exp;
    }
};

ParseCall = macro(@(_parseFunc) {
    @{
        function = _parseFunc();

        while (LeftParenthesis) {
            NextToken;
        
            if (RightParenthesis) {
                NextToken;
                function = CallExpression(function);
            } else {
                args ParseTuple;
                RightParenthesis;
                function = CallExpression(function, args);
            }
        }

        ret function;
    };
});

ParseCallBody = macro(@(_func) {
    while (LeftParenthesis) {
        NextToken;
        
        if (RightParenthesis) {
            NextToken;
            _func = CallExpression(_func);
        } else {
            args = ParseTuple();
            RightParenthesis;
            _func = CallExpression(_func, args);
        }
    }
});

ParseCallExpression = ParseCall(ParseMemberExpression);

ParseMemberExpression = @{ 
    factor ParseFactorCallExpression;
    ParseMemberBody(factor);
    ret factor;
};

ParseMemberBody = macro(@(_id) {
    while (MemberOperator) {
        NextToken;
        memberExp;

        switch (TokenType) {
            Identifier: {
                memberExp = IdentifierExpression(Lexeme);
                NextToken;
            }

            String: memberExp ParseStringExpression;

            LeftBrace: {
                NextToken;
                memberExp = DynamicMemberExpression(ParseExpression());
                RightBrace;
            }

            default: Error;
        }

        _id = BinaryOperatorExpression(_id, MemberOperator, memberExp);
        ParseCallBody(_id);        

        if (definedKeyword) {
            NextToken;

            ret UnaryOperatorExpression(definedKeyword, _id, true);
        }
    }
});

ParseFactorCallExpression = ParseCall(ParseFactorExpression);
ParseStringExpression = Lexeme |> StringExpression |> ThenSkip;

IdentifierExpression ParseIdentifierExpression = @{
    exp = IdentifierExpression(Lexeme);
    NextToken;

    if (Identifier) {
        id = exp;
        // Add support for [] instead of 'list IdentifierExpression', infer type
        attrs = list IdentifierExpression;

        do {
            attrs += id;
            id = IdentifierExpression(Lexeme);
            NextToken;
        } while (Identifier);

        exp = IdentifierExpression(id.Identifier, attrs);
    }    

    ret exp;
};

ParseUnaryExpression = @{
    TakeToken(t);

    ret UnaryOperatorExpression(t, ParseExpression());
};

ParseCondition = @{
    Parens(condition ParseExpression);
    
    ret condition;
};

ParseIfExpression = @{
    NextToken;
    condition ParseCondition;
    body ParseBlock;
    list elseBody;

    if (elseKeyword)
    {
        NextToken;
        elseBody ParseBlock;
    }

    ret IfExpression(condition, body, elseBody);
};

_ParseBlock = macro(@(_parseStatement) {
    @{
        statements;

        if (LeftBrace) {
            NextToken;
            while (!RightBrace) statements += ParseStatement();
            NextToken;
        } else {
            statements += _parseStatement();
        }

        ret statements;
    };
});

list ParseBlock = _ParseBlock(ParseStatement);
list ParseSingleBlock = _ParseBlock(ParseSingleStatement);

// Todo: infer return type and cast if necessary.
// Todo: Extend expression should probably accept IdExp to support attributes
ParseExtendExpression = SkipThen(
    ExtendExpression(ParseIdentifierExpression(), ParseObjectExpression()));

// Todo: support empty objects

ParseForExpression = @{
    NextToken;
    LeftParenthesis;
    initOrElement ParseExpression;

    if (inKeyword) {
        NextToken;
        collection ParseExpression;
        RightParenthesis;
        body ParseBlock;

        ret ForEachExpression(collection, body, initOrElement);
    } else if (RightParenthesis) {
        RightParenthesis;
        body ParseBlock;

        ret ForEachExpression(initOrElement, body, null);
    } else {
        EndOfStatement;
        condition ParseExpression;
        EndOfStatement;
        afterthought ParseExpression;
        RightParenthesis;
        body ParseBlock;

        ret ForExpression(initOrElement, condition, afterthought, body);
    }
};

ParseWhileExpression = SkipThen(WhileExpression(ParseCondition(), ParseBlock()));

ParseDoWhileExpression = @{
    NextToken;
    body ParseBlock;
    Prefix(whileKeyword, Parens(condition ParseExpression));

    ret DoWhileExpression(condition, body);
};

list ParseTuple = @{
    tuple;

    while (true) {
        tuple += ParseExpression();

        if (Comma) NextToken;
        else ret tuple;
    }
};

ParseUsingExpression = @{
    NextToken;

    if (LeftParenthesis) {
        NextToken;
        exp ParseExpression;
        RightParenthesis;

        ret UsingExpression(exp, ParseBlock());
    } else {
        exp ParseMemberExpression;

        if (EndOfStatement) NextToken;

        ret UnaryOperatorExpression(usingKeyword, exp);
    }
};

ParseLockExpression = @{
    NextToken;
    exps = list AphidExpression;

    while (true) {
        if (LeftParenthesis) {
            NextToken;
            exps += ParseExpression();
            RightParenthesis;
        } else if (Identifier) {
            AphidExpression exp;
            exp = IdentifierExpression(Lexeme);
            NextToken;

            while (MemberOperator) {
                NextToken;
                memberExp;

                switch (TokenType) {
                    Identifier: {
                        memberExp = IdentifierExpression(Lexeme);
                        NextToken;
                    }

                    LeftBrace: {
                        NextToken;
                        memberExp = DynamicMemberExpression(ParseExpression());
                        RightBrace;
                    }

                    default: Error;
                }

                exp = BinaryOperatorExpression(exp, MemberOperator, memberExp);
            }

            exps += exp;
        }

        CommaOrBreak();
    }

    //Todo: support eos here for scope lock e..g
    // var fun = @{
    //     if (foo.bar) {
    //         lock some.var;
    //         if (some.var) { /* ... */ }
    //         /* some.var lock is released here */
    //     }
    // }
    // 
    // Todo: support function attr e.g. var fun = lock some.var @{ /* ... */ };

    ret LockExpression(exps, ParseBlock());
};

ParseLoadScriptExpression = SkipThen(LoadScriptExpression(ParseExpression()));
ParseLoadLibraryExpression = SkipThen(LoadLibraryExpression(ParseExpression()));

// Todo: fix now that var decls work
ParseTryExpression = @{
    NextToken;
    tryBody ParseBlock;
    IdentifierExpression catchArg;
    list catchBody;           
    list finallyBody;

    switch (TokenType) {
        catchKeyword: {
            NextToken;

            if (LeftParenthesis) {
                Parens(catchArg ParseIdentifierExpression);
            }

            catchBody ParseBlock;

            if (finallyKeyword) {
                NextToken;
                finallyBody ParseBlock;
            }
        }

        finallyKeyword: {
            NextToken;
            finallyBody ParseBlock;
        }

        default: Error;
    }

    ret TryExpression(tryBody, catchArg, catchBody, finallyBody);
};

ParseSwitchExpression = @{
    NextToken;
    Parens(exp ParseExpression);
    LeftBrace;
    cases = list SwitchCase;
    list defaultCase;

    while (!RightBrace) {
        if (!defaultKeyword) {
            caseTuple ParseTuple;
            ColonOperator;
            block ParseBlock;
            cases += SwitchCase(caseTuple, block);
        } else {
            NextToken;
            ColonOperator;
            defaultCase ParseBlock;
        }
    }

    NextToken;

    ret SwitchExpression(exp, cases, defaultCase);
};

ObjectExpression ParseObjectExpression = @{
    NextToken;
    inNode = true;
    childNodes = list BinaryOperatorExpression;

    while (inNode) {
        switch (TokenType) {
            Identifier, String: {
                childNodes += ParseKeyValuePairExpression();
                switch (TokenType) {
                    Comma: NextToken;
                    RightBrace: {
                        NextToken;
                        inNode = false;
                    }
                    default: Error;
                }
            }
            RightBrace: {
                NextToken;
                inNode = false;
            }
            default: Error;
        }
    }

    ret ObjectExpression(childNodes);
};

BinaryOperatorExpression ParseKeyValuePairExpression= @{
        exp;
        id;
        if (Identifier) id = ParseIdentifierExpression();
        else id = ParseStringExpression();

        if (ColonOperator || AssignmentOperator) {
            NextToken;
            exp ParseExpression;
        } else {
            exp = id;
        }

        ret BinaryOperatorExpression(id, ColonOperator, exp);
};

ParseArrayExpression = @{
    NextToken;
    inNode = true;
    childNodes = list AphidExpression;

    if (!RightBracket) {
        while (inNode) {
            childNodes += ParseExpression();

            switch (TokenType) {
                Comma: {
                    NextToken;

                    if (RightBracket) {
                        NextToken;
                        inNode = false;
                    }
                }
                RightBracket: {
                    NextToken;
                    inNode = false;
                }
                default: Error;
            }
        }
    } else {
        NextToken;
    }

    ret ArrayExpression(childNodes);
};

ParseNumberExpression = @(){
    exp = NumberExpression(decimal.Parse(Lexeme));
    NextToken;
    
    ret exp;
};

FunctionExpression ParseFunctionDeclaration = @{
    argExp;
    args;    
    body;
    NextToken;

    if (!RightParenthesis) {
        while (true) {
            if (Identifier) {
                id ParseIdentifierExpression;
                argExp = id;

                if (AssignmentOperator) {
                    TakeToken(op);
                    argExp = BinaryOperatorExpression(id, op, ParseExpression());
                }

                args += argExp;

                CommaOrBreak();
            } else {
                Error;
            }
        }
    }

    RightParenthesis;
    isSingleLine = TokenType != LeftBrace;
    block = ParseSingleBlock();

    if (isSingleLine && UseImplicitReturns) {
        body += UnaryOperatorExpression(retKeyword, block[0]);
    } else {
        body = block;
    }

    ret FunctionExpression(args, body);
};

ParseFunctionExpression = @{
    exp;
    body;
    args;    
    NextToken;

    switch (TokenType) {
        LeftParenthesis: exp = ParseFunctionDeclaration();

        LeftBrace: exp = FunctionExpression(args, ParseBlock());

        MinusOperator,
        AdditionOperator,
        MultiplicationOperator,
        DivisionOperator,
        ModulusOperator,
        BinaryAndOperator,
        BinaryOrOperator,
        XorOperator,
        ShiftLeft,
        ShiftRight,
        AndOperator,
        OrOperator,
        EqualityOperator,
        NotEqualOperator,
        NotEqualOperator,
        LessThanOperator,
        GreaterThanOperator,
        LessThanOrEqualOperator,
        GreaterThanOrEqualOperator,
        PipelineOperator,

        MemberOperator: {
            TakeToken(op);
            exp = PartialOperatorExpression(op, ParseRangeExpression());
        }

        // CustomOperatorTup Begin
        CustomOperator000,
        CustomOperator001,
        CustomOperator002,
        CustomOperator003,
        CustomOperator004,
        CustomOperator005,
        CustomOperator006,
        CustomOperator007,
        CustomOperator008,
        CustomOperator009,
        CustomOperator010,
        CustomOperator011,
        CustomOperator012,
        CustomOperator013,
        CustomOperator014,
        CustomOperator015,
        CustomOperator016,
        CustomOperator017,
        CustomOperator018,
        CustomOperator019,
        CustomOperator020,
        CustomOperator021,
        CustomOperator022,
        CustomOperator023,
        CustomOperator024,
        CustomOperator025,
        CustomOperator026,
        CustomOperator027,
        CustomOperator028,
        CustomOperator029,
        CustomOperator030,
        CustomOperator031,
        CustomOperator032,
        CustomOperator033,
        CustomOperator034,
        CustomOperator035,
        CustomOperator036,
        CustomOperator037,
        CustomOperator038,
        CustomOperator039,
        CustomOperator040,
        CustomOperator041,
        CustomOperator042,
        CustomOperator043,
        CustomOperator044,
        CustomOperator045,
        CustomOperator046,
        CustomOperator047,
        CustomOperator048,
        CustomOperator049,
        CustomOperator050,
        CustomOperator051,
        CustomOperator052,
        CustomOperator053,
        CustomOperator054,
        CustomOperator055,
        CustomOperator056,
        CustomOperator057,
        CustomOperator058,
        CustomOperator059,
        CustomOperator060,
        CustomOperator061,
        CustomOperator062,
        CustomOperator063,
        CustomOperator064,
        CustomOperator065,
        CustomOperator066,
        CustomOperator067,
        CustomOperator068,
        CustomOperator069,
        CustomOperator070,
        CustomOperator071,
        CustomOperator072,
        CustomOperator073,
        CustomOperator074,
        CustomOperator075,
        CustomOperator076,
        CustomOperator077,
        CustomOperator078,
        CustomOperator079,
        CustomOperator080,
        CustomOperator081,
        CustomOperator082,
        CustomOperator083,
        CustomOperator084,
        CustomOperator085,
        CustomOperator086,
        CustomOperator087,
        CustomOperator088,
        CustomOperator089,
        CustomOperator090,
        CustomOperator091,
        CustomOperator092,
        CustomOperator093,
        CustomOperator094,
        CustomOperator095,
        CustomOperator096,
        CustomOperator097,
        CustomOperator098,
        CustomOperator099,
        CustomOperator100,
        CustomOperator101,
        CustomOperator102,
        CustomOperator103,
        CustomOperator104,
        CustomOperator105,
        CustomOperator106,
        CustomOperator107,
        CustomOperator108,
        CustomOperator109,
        CustomOperator110,
        CustomOperator111,
        CustomOperator112,
        CustomOperator113,
        CustomOperator114,
        CustomOperator115,
        CustomOperator116,
        CustomOperator117,
        CustomOperator118,
        CustomOperator119,
        CustomOperator120,
        CustomOperator121,
        CustomOperator122,
        CustomOperator123,
        CustomOperator124,
        CustomOperator125,
        CustomOperator126,
        CustomOperator127,
        CustomOperator128,
        CustomOperator129,
        CustomOperator130,
        CustomOperator131,
        CustomOperator132,
        CustomOperator133,
        CustomOperator134,
        CustomOperator135,
        CustomOperator136,
        CustomOperator137,
        CustomOperator138,
        CustomOperator139,
        CustomOperator140,
        CustomOperator141,
        CustomOperator142,
        CustomOperator143,
        CustomOperator144,
        CustomOperator145,
        CustomOperator146,
        CustomOperator147,
        CustomOperator148,
        CustomOperator149,
        CustomOperator150,
        CustomOperator151,
        CustomOperator152,
        CustomOperator153,
        CustomOperator154,
        CustomOperator155,
        CustomOperator156,
        CustomOperator157,
        CustomOperator158,
        CustomOperator159,
        CustomOperator160,
        CustomOperator161,
        CustomOperator162,
        CustomOperator163,
        CustomOperator164,
        CustomOperator165,
        CustomOperator166,
        CustomOperator167,
        CustomOperator168,
        CustomOperator169,
        CustomOperator170,
        CustomOperator171,
        CustomOperator172,
        CustomOperator173,
        CustomOperator174,
        CustomOperator175,
        CustomOperator176,
        CustomOperator177,
        CustomOperator178,
        CustomOperator179,
        CustomOperator180,
        CustomOperator181,
        CustomOperator182,
        CustomOperator183,
        CustomOperator184,
        CustomOperator185,
        CustomOperator186,
        CustomOperator187,
        CustomOperator188,
        CustomOperator189,
        CustomOperator190,
        CustomOperator191,
        CustomOperator192,
        CustomOperator193,
        CustomOperator194,
        CustomOperator195,
        CustomOperator196,
        CustomOperator197,
        CustomOperator198,
        CustomOperator199,
        CustomOperator200,
        CustomOperator201,
        CustomOperator202,
        CustomOperator203,
        CustomOperator204,
        CustomOperator205,
        CustomOperator206,
        CustomOperator207,
        CustomOperator208,
        CustomOperator209,
        CustomOperator210,
        CustomOperator211,
        CustomOperator212,
        CustomOperator213,
        CustomOperator214,
        CustomOperator215,
        CustomOperator216,
        CustomOperator217,
        CustomOperator218,
        CustomOperator219,
        CustomOperator220,
        CustomOperator221,
        CustomOperator222,
        CustomOperator223,
        CustomOperator224,
        CustomOperator225,
        CustomOperator226,
        CustomOperator227,
        CustomOperator228,
        CustomOperator229,
        CustomOperator230,
        CustomOperator231,
        CustomOperator232,
        CustomOperator233,
        CustomOperator234,
        CustomOperator235,
        CustomOperator236,
        CustomOperator237,
        CustomOperator238,
        CustomOperator239,
        CustomOperator240,
        CustomOperator241,
        CustomOperator242,
        CustomOperator243,
        CustomOperator244,
        CustomOperator245,
        CustomOperator246,
        CustomOperator247,
        CustomOperator248,
        CustomOperator249,
        CustomOperator250,
        CustomOperator251,
        CustomOperator252,
        CustomOperator253,
        CustomOperator254,
        CustomOperator255,
        CustomOperator256,
        CustomOperator257,
        CustomOperator258,
        CustomOperator259,
        CustomOperator260,
        CustomOperator261,
        CustomOperator262,
        CustomOperator263,
        CustomOperator264,
        CustomOperator265,
        CustomOperator266,
        CustomOperator267,
        CustomOperator268,
        CustomOperator269,
        CustomOperator270,
        CustomOperator271,
        CustomOperator272,
        CustomOperator273,
        CustomOperator274,
        CustomOperator275,
        CustomOperator276,
        CustomOperator277,
        CustomOperator278,
        CustomOperator279,
        CustomOperator280,
        CustomOperator281,
        CustomOperator282,
        CustomOperator283,
        CustomOperator284,
        CustomOperator285,
        CustomOperator286,
        CustomOperator287,
        CustomOperator288,
        CustomOperator289,
        CustomOperator290,
        CustomOperator291,
        CustomOperator292,
        CustomOperator293,
        CustomOperator294,
        CustomOperator295,
        CustomOperator296,
        CustomOperator297,
        CustomOperator298,
        CustomOperator299,
        CustomOperator300,
        CustomOperator301,
        CustomOperator302,
        CustomOperator303,
        CustomOperator304,
        CustomOperator305,
        CustomOperator306,
        CustomOperator307,
        CustomOperator308,
        CustomOperator309,
        CustomOperator310,
        CustomOperator311,
        CustomOperator312,
        CustomOperator313,
        CustomOperator314,
        CustomOperator315,
        CustomOperator316,
        CustomOperator317
        // CustomOperatorTup End
        : {
            TakeToken(op);
            exp = BinaryOperatorBodyExpression(op, ParseFunctionDeclaration());
        }

        default: exp = PartialFunctionExpression(ParseCallExpression());
    }

    ret exp;
};

ParsePatternMatchingExpression = @{
    NextToken;
    patterns = list PatternExpression;
    Parens(testExp ParseExpression);

    while (true) {
        tuple;

        while (true) {
            // Todo: add list support for varName funcName syntax
            tuple += ParseExpression();

            CommaOrBreak();
        }

        valueExp;

        if (ColonOperator) {
            NextToken;
            valueExp ParseExpression;
            // Todo: support opt with overloaded ctors so these args can
            // be reversed.
            patterns += PatternExpression(valueExp, tuple);
        } else {
            if (tuple.Count != 1) Error;

            patterns += PatternExpression(tuple[0]);
        }

        CommaOrBreak();
    }
    
    ret PatternMatchingExpression(testExp, patterns);
};


ParseFactorExpression = @{
    exp;
    
    switch (TokenType) {
        LeftBrace: exp ParseObjectExpression;
        LeftBracket: exp ParseArrayExpression;

        LeftParenthesis: {
            NextToken;
            exp ParseExpression;
            RightParenthesis;
        }

        String: exp ParseStringExpression;
        Number: exp ParseNumberExpression;

        Identifier: {
            id ParseIdentifierExpression;

            if (definedKeyword) {
                NextToken;
                exp = UnaryOperatorExpression(definedKeyword, id, true);
            } else if (LeftBrace) {
                obj = ParseObjectExpression();
                exp = ObjectExpression(obj.Pairs, id);
            } else {
                exp = id;
            }
        }

        FunctionOperator: exp ParseFunctionExpression;

        ImplicitArgumentOperator: {
            TakeToken(op);
            exp = ImplicitArgumentExpression(op);
        }

        ImplicitArgumentsOperator: {
            TakeToken(op);
            exp = ImplicitArgumentsExpression(op);
        }

        throwKeyword, retKeyword, deleteKeyword: exp ParseUnaryExpression;

        trueKeyword: {
            exp = BooleanExpression(true);
            NextToken;
        }

        falseKeyword: {
            exp = BooleanExpression(false);
            NextToken;
        }

        thisKeyword: _keywordExp(ThisExpression);

        LoadScriptOperator: exp ParseLoadScriptExpression;
        LoadLibraryOperator: exp ParseLoadLibraryExpression;
        
        nullKeyword: _keywordExp(NullExpression);
        
        continueKeyword: _keywordExp(ContinueExpression);
        breakKeyword: _keywordExp(BreakExpression);

        HexNumber: {
            exp = NumberExpression(System.Convert.ToUInt64(CurrentToken.Lexeme.Substring(2), 16));
            NextToken;
        }

        BinaryNumber: {
            exp = NumberExpression(BinaryNumber.Parse(CurrentToken.Lexeme.Substring(2)));
            NextToken;
        }

        PatternMatchingOperator: exp ParsePatternMatchingExpression;
        default: Error;
    }

    ret exp;
};

_keywordExp = macro(@(x){
    exp = x();
    NextToken;
});

ParseTextExpression = @{
    t;
    if (Text) {
        t = TextExpression(Lexeme);
        NextToken;
    }
    else t = TextExpression('');
    
    ret t;
};

ParseGatorEmitExpression = @{
    NextToken;
    t = GatorEmitExpression(ParseExpression());
    GatorCloseOperator;
    ret t;
};

CustomOperatorOr = macro(@{
    // CustomOperatorOr Begin
    CustomOperator000
    | CustomOperator001
    | CustomOperator002
    | CustomOperator003
    | CustomOperator004
    | CustomOperator005
    | CustomOperator006
    | CustomOperator007
    | CustomOperator008
    | CustomOperator009
    | CustomOperator010
    | CustomOperator011
    | CustomOperator012
    | CustomOperator013
    | CustomOperator014
    | CustomOperator015
    | CustomOperator016
    | CustomOperator017
    | CustomOperator018
    | CustomOperator019
    | CustomOperator020
    | CustomOperator021
    | CustomOperator022
    | CustomOperator023
    | CustomOperator024
    | CustomOperator025
    | CustomOperator026
    | CustomOperator027
    | CustomOperator028
    | CustomOperator029
    | CustomOperator030
    | CustomOperator031
    | CustomOperator032
    | CustomOperator033
    | CustomOperator034
    | CustomOperator035
    | CustomOperator036
    | CustomOperator037
    | CustomOperator038
    | CustomOperator039
    | CustomOperator040
    | CustomOperator041
    | CustomOperator042
    | CustomOperator043
    | CustomOperator044
    | CustomOperator045
    | CustomOperator046
    | CustomOperator047
    | CustomOperator048
    | CustomOperator049
    | CustomOperator050
    | CustomOperator051
    | CustomOperator052
    | CustomOperator053
    | CustomOperator054
    | CustomOperator055
    | CustomOperator056
    | CustomOperator057
    | CustomOperator058
    | CustomOperator059
    | CustomOperator060
    | CustomOperator061
    | CustomOperator062
    | CustomOperator063
    | CustomOperator064
    | CustomOperator065
    | CustomOperator066
    | CustomOperator067
    | CustomOperator068
    | CustomOperator069
    | CustomOperator070
    | CustomOperator071
    | CustomOperator072
    | CustomOperator073
    | CustomOperator074
    | CustomOperator075
    | CustomOperator076
    | CustomOperator077
    | CustomOperator078
    | CustomOperator079
    | CustomOperator080
    | CustomOperator081
    | CustomOperator082
    | CustomOperator083
    | CustomOperator084
    | CustomOperator085
    | CustomOperator086
    | CustomOperator087
    | CustomOperator088
    | CustomOperator089
    | CustomOperator090
    | CustomOperator091
    | CustomOperator092
    | CustomOperator093
    | CustomOperator094
    | CustomOperator095
    | CustomOperator096
    | CustomOperator097
    | CustomOperator098
    | CustomOperator099
    | CustomOperator100
    | CustomOperator101
    | CustomOperator102
    | CustomOperator103
    | CustomOperator104
    | CustomOperator105
    | CustomOperator106
    | CustomOperator107
    | CustomOperator108
    | CustomOperator109
    | CustomOperator110
    | CustomOperator111
    | CustomOperator112
    | CustomOperator113
    | CustomOperator114
    | CustomOperator115
    | CustomOperator116
    | CustomOperator117
    | CustomOperator118
    | CustomOperator119
    | CustomOperator120
    | CustomOperator121
    | CustomOperator122
    | CustomOperator123
    | CustomOperator124
    | CustomOperator125
    | CustomOperator126
    | CustomOperator127
    | CustomOperator128
    | CustomOperator129
    | CustomOperator130
    | CustomOperator131
    | CustomOperator132
    | CustomOperator133
    | CustomOperator134
    | CustomOperator135
    | CustomOperator136
    | CustomOperator137
    | CustomOperator138
    | CustomOperator139
    | CustomOperator140
    | CustomOperator141
    | CustomOperator142
    | CustomOperator143
    | CustomOperator144
    | CustomOperator145
    | CustomOperator146
    | CustomOperator147
    | CustomOperator148
    | CustomOperator149
    | CustomOperator150
    | CustomOperator151
    | CustomOperator152
    | CustomOperator153
    | CustomOperator154
    | CustomOperator155
    | CustomOperator156
    | CustomOperator157
    | CustomOperator158
    | CustomOperator159
    | CustomOperator160
    | CustomOperator161
    | CustomOperator162
    | CustomOperator163
    | CustomOperator164
    | CustomOperator165
    | CustomOperator166
    | CustomOperator167
    | CustomOperator168
    | CustomOperator169
    | CustomOperator170
    | CustomOperator171
    | CustomOperator172
    | CustomOperator173
    | CustomOperator174
    | CustomOperator175
    | CustomOperator176
    | CustomOperator177
    | CustomOperator178
    | CustomOperator179
    | CustomOperator180
    | CustomOperator181
    | CustomOperator182
    | CustomOperator183
    | CustomOperator184
    | CustomOperator185
    | CustomOperator186
    | CustomOperator187
    | CustomOperator188
    | CustomOperator189
    | CustomOperator190
    | CustomOperator191
    | CustomOperator192
    | CustomOperator193
    | CustomOperator194
    | CustomOperator195
    | CustomOperator196
    | CustomOperator197
    | CustomOperator198
    | CustomOperator199
    | CustomOperator200
    | CustomOperator201
    | CustomOperator202
    | CustomOperator203
    | CustomOperator204
    | CustomOperator205
    | CustomOperator206
    | CustomOperator207
    | CustomOperator208
    | CustomOperator209
    | CustomOperator210
    | CustomOperator211
    | CustomOperator212
    | CustomOperator213
    | CustomOperator214
    | CustomOperator215
    | CustomOperator216
    | CustomOperator217
    | CustomOperator218
    | CustomOperator219
    | CustomOperator220
    | CustomOperator221
    | CustomOperator222
    | CustomOperator223
    | CustomOperator224
    | CustomOperator225
    | CustomOperator226
    | CustomOperator227
    | CustomOperator228
    | CustomOperator229
    | CustomOperator230
    | CustomOperator231
    | CustomOperator232
    | CustomOperator233
    | CustomOperator234
    | CustomOperator235
    | CustomOperator236
    | CustomOperator237
    | CustomOperator238
    | CustomOperator239
    | CustomOperator240
    | CustomOperator241
    | CustomOperator242
    | CustomOperator243
    | CustomOperator244
    | CustomOperator245
    | CustomOperator246
    | CustomOperator247
    | CustomOperator248
    | CustomOperator249
    | CustomOperator250
    | CustomOperator251
    | CustomOperator252
    | CustomOperator253
    | CustomOperator254
    | CustomOperator255
    | CustomOperator256
    | CustomOperator257
    | CustomOperator258
    | CustomOperator259
    | CustomOperator260
    | CustomOperator261
    | CustomOperator262
    | CustomOperator263
    | CustomOperator264
    | CustomOperator265
    | CustomOperator266
    | CustomOperator267
    | CustomOperator268
    | CustomOperator269
    | CustomOperator270
    | CustomOperator271
    | CustomOperator272
    | CustomOperator273
    | CustomOperator274
    | CustomOperator275
    | CustomOperator276
    | CustomOperator277
    | CustomOperator278
    | CustomOperator279
    | CustomOperator280
    | CustomOperator281
    | CustomOperator282
    | CustomOperator283
    | CustomOperator284
    | CustomOperator285
    | CustomOperator286
    | CustomOperator287
    | CustomOperator288
    | CustomOperator289
    | CustomOperator290
    | CustomOperator291
    | CustomOperator292
    | CustomOperator293
    | CustomOperator294
    | CustomOperator295
    | CustomOperator296
    | CustomOperator297
    | CustomOperator298
    | CustomOperator299
    | CustomOperator300
    | CustomOperator301
    | CustomOperator302
    | CustomOperator303
    | CustomOperator304
    | CustomOperator305
    | CustomOperator306
    | CustomOperator307
    | CustomOperator308
    | CustomOperator309
    | CustomOperator310
    | CustomOperator311
    | CustomOperator312
    | CustomOperator313
    | CustomOperator314
    | CustomOperator315
    | CustomOperator316
    | CustomOperator317
    // CustomOperatorOr End
});