using System;
using System.Reflection;

if (Assembly.GetExecutingAssembly().Location.ToLower().Contains('components.aphid.scriptdebugger64.dll')) {    
    using Components.Aphid.Parser;
    var off = this.'$block'$!@.Index;
    var b = this.'$parent'.'$block';
    var index = b >^ (@(x) x.Index > off) |> b.IndexOf;
    '
        #"Std";        
        var sp = @(n) this."$script" @io.sibling(n);
        #"Aphid.Code" | sp;
        #"Aphid.Tmpl" | sp;        
        subhead("Running in test mode");
    '
    |> AphidParser.Parse
    @b.InsertRange(index) ;
}

var tokens = [
    { regex: '%>', type: 'GatorCloseOperator', newMode: "Text" },

    { regex: "#", type: "LoadScriptOperator" },
    { regex: "##", type: "LoadLibraryOperator" },

    { regex: ",", type: "Comma" },
    { regex: ":", type: "ColonOperator" },
    { regex: "@", type: "FunctionOperator" },
    { regex: "@>", type: "CompositionOperator" },
    { regex: "\\?", type: "ConditionalOperator" },
    { regex: "..", type: "RangeOperator" },

    { regex: "\\(", type: "LeftParenthesis" },
    { regex: "\\)", type: "RightParenthesis" },
    { regex: "\\[", type: "LeftBracket" },
    { regex: "\\]", type: "RightBracket" },
    { regex: "{", type: "LeftBrace" },
    { regex: "}", type: "RightBrace" },

    { regex: "=", type: "AssignmentOperator" },
    { regex: ".", type: "MemberOperator" },

    { regex: "-", type: "MinusOperator" },                
    { regex: "\\+", type: "AdditionOperator" },
    { regex: "\\*", type: "MultiplicationOperator" },
    { regex: "/", type: "DivisionOperator" },
    { regex: "%", type: "ModulusOperator" },                
    { regex: "&", type: "BinaryAndOperator" },
    { regex: "\\|", type: "BinaryOrOperator" },
    { regex: "^", type: "XorOperator" },                
    { regex: "<<", type: "ShiftLeft" },
    { regex: ">>", type: "ShiftRight" },

    { regex: "-=", type: "MinusEqualOperator" },
    { regex: "\\+=", type: "PlusEqualOperator" },                
    { regex: "\\*=", type: "MultiplicationEqualOperator" },
    { regex: "/=", type: "DivisionEqualOperator" },
    { regex: "%=", type: "ModulusEqualOperator" },
    { regex: "&=", type: "BinaryAndEqualOperator" },
    { regex: "\\|=", type: "OrEqualOperator" },
    { regex: "^=", type: "XorEqualOperator" }, 
    { regex: "<<=", type: "ShiftLeftEqualOperator" },
    { regex: ">>=", type: "ShiftRightEqualOperator" },               

    { regex: "~", type: "ComplementOperator" },
    { regex: "\\+\\+", type: "IncrementOperator" },
    { regex: "--", type: "DecrementOperator" },

    { regex: "!", type: "NotOperator" },
    { regex: "&&", type: "AndOperator" },
    { regex: "\\|\\|", type: "OrOperator" },

    { regex: "==", type: "EqualityOperator" },
    { regex: "!=", type: "NotEqualOperator" },
    { regex: "<>", type: "NotEqualOperator" },
    { regex: "<", type: "LessThanOperator" },
    { regex: ">", type: "GreaterThanOperator" },
    { regex: "<=", type: "LessThanOrEqualOperator" },
    { regex: ">=", type: "GreaterThanOrEqualOperator" },

    { regex: "\\|>", type: "PipelineOperator" },    
                
    { regex: "\\+>", type: "AggregateOperator" },
    { regex: "=\\?", type: "AnyOperator" },
    { regex: "-#", type: "CountOperator" },
    { regex: "-&", type: "GroupByOperator" },
    { regex: "-<", type: "SelectManyOperator" },
    { regex: "->", type: "SelectOperator" },        
    { regex: "-\\?", type: "WhereOperator" },

    { regex: "-\\\\", type: "OrderByOperator" },
    { regex: "-/", type: "OrderByDescendingOperator" },

    { regex: ">^", type: "FirstOperator" },
    { regex: ">$", type: "LastOperator" },
    { regex: ">#", type: "CountOperator" },

    { regex: "~^", type: "StartsWithOperator" },
    { regex: "~$", type: "EndsWithOperator" },

    { regex: "!\\?", type: "DistinctOperator" },
    { regex: "#!", type: "PostfixCountOperator" },
    { regex: "^!", type: "PostfixFirstOperator" },
    { regex: "$!", type: "PostfixLastOperator" },
    { regex: "\\?!", type: "PostfixAnyOperator" },
    { regex: "\\*!", type: "PostfixManyOperator" },
    { regex: "\\\\!", type: "PostfixOrderOperator" },
    { regex: "/!", type: "PostfixOrderDescendingOperator" },
    
    { regex: "$", type: "PatternMatchingOperator" },
    { regex: "$_", type: "ImplicitArgumentOperator" },
    { regex: "$args", type: "ImplicitArgumentsOperator" },

    { regex: "%%", type: "InteropOperator" },

    { regex: ";", type: "EndOfStatement" },

    { regex: "\\r|\\n|\\t|\\v|\\s", type: "WhiteSpace" },
    { code: idCode },
    { regex: "0", code: getNumber('NextChar();\r\nstate = 1;', 'return AphidTokenType.Number;') },
    { regex: "0x", code: zeroXCode },
    { regex: "0b", code: zeroBCode },
    { code: getNumber(
        'state = 0;', 
        'if (state == 1 || state == 3 || state == 5) { return AphidTokenType.Number; }') },
    getString('"'),
    getString("'"),    
    { regex: "//", code: singleLineCommentCode },
    { regex: "/\\*", code: commentCode }
];

Console.WriteLine('Adding custom operators');

var reChars = '\\+*|?()[]';

var customTokens =
    1..2
    ->@seq.rep($_,'`~!#%^&*-=\\+:<>.|/?')
    -<permutations
    ->concat
    ->(@()$_ ~: [ (reChars->@concat('\\'))-+'|', '\\$0' ])
    @except(tokens->?>@.regex-?@!= null @seq.array(string))
    @seq.iter(@(x,i) ({ regex: x, type: "CustomOperator{0:D3}" :: i.int() }));

customTokens->tokens.Add;

var parserRel = io.concat('Library', 'Meta', 'Code', 'Aphid', 'Aphid.alx');
var interpRel = io.concat('Interpreter', 'AphidInterpreter.cs');

var paths = aphid
    .GetRawStackTrace()
    ->?>(@()$_.Expression.Context.Filename)
    -?@!=null
    ->(@(f) 1..5 @prepend(f) +>@(x)io.up(x))
    -?(@io.end(parserRel) @> io.file)
    -?@io.end(interpRel) @> io.file;

if ((paths#!) == 0) {
    throw new InvalidOperationException('Could not find {0}', interpRel);
}

var updateCustomOperators = @(relCodeFile, regionBegin, regionEnd, getText) {
    var codeFile = relCodeFile @io.head(paths^!);
    codeFile @printInfo('Updating ~Cyan~{0}~R~ with custom operators');
    var code = codeFile |> File.ReadAllText;
    var matches = @Regex.Matches(code);
    var ends = regionEnd |> matches;
    var ranges = new List[Object]();

    ('(( |\t)+)' + regionBegin) |> matches
     for {
        var o = {
            indent: $_.Groups[1].Value,
            start: $_.Index,
            end: code.IndexOf(regionEnd, $_.Index)
        };
        ranges.Add(o);
    };

    ranges.Reverse();

    ranges->@() code = code
        .Remove($_.start, $_.end - $_.start)
        .Insert(
            $_.start,
            $_.indent + regionBegin + '\r\n' +
            ($_.indent |> getText) + 
            $_.indent);

    code @File.WriteAllText(codeFile);
};

var customOps = customTokens-.type;

var getCases = @(indent) customOps
    ->(@String.Format('{0}case AphidTokenType.{1}:\r\n', indent))
    +>(@(x, y) x + y);

var getOr = @(indent)
    indent +
    (customOps ->(@+'\r\n') +>(@(x, y) x + indent + '| ' + y));

var getTup = @(indent)
    indent +
    (customOps +>(@(x, y) x + ',\r\n' + indent + y)) +
    '\r\n';

updateCustomOperators(
    interpRel,
    '#region Custom Operator Cases',
    '#endregion',
    getCases);

updateCustomOperators(
    parserRel,
    '// CustomOperatorOr Begin',
    '// CustomOperatorOr End',
    getOr);

updateCustomOperators(
    parserRel,
    '// CustomOperatorTup Begin',
    '// CustomOperatorTup End',
    getTup);