using System;

var tokens = [
    { regex: '%>', type: 'GatorCloseOperator', newMode: "Text" },

    { regex: "#", type: "LoadScriptOperator" },
    { regex: "##", type: "LoadLibraryOperator" },

    { regex: ",", type: "Comma" },
    { regex: ":", type: "ColonOperator" },
    { regex: "@", type: "FunctionOperator" },
    { regex: "@>", type: "CompositionOperator" },
    { regex: "\\?", type: "ConditionalOperator" },
    { regex: "..", type: "RangeOperator" },

    { regex: "\\(", type: "LeftParenthesis" },
    { regex: "\\)", type: "RightParenthesis" },
    { regex: "\\[", type: "LeftBracket" },
    { regex: "\\]", type: "RightBracket" },
    { regex: "{", type: "LeftBrace" },
    { regex: "}", type: "RightBrace" },

    { regex: "=", type: "AssignmentOperator" },
    { regex: ".", type: "MemberOperator" },

    { regex: "-", type: "MinusOperator" },                
    { regex: "\\+", type: "AdditionOperator" },
    { regex: "\\*", type: "MultiplicationOperator" },
    { regex: "/", type: "DivisionOperator" },
    { regex: "%", type: "ModulusOperator" },                
    { regex: "&", type: "BinaryAndOperator" },
    { regex: "\\|", type: "BinaryOrOperator" },
    { regex: "^", type: "XorOperator" },                
    { regex: "<<", type: "ShiftLeft" },
    { regex: ">>", type: "ShiftRight" },

    { regex: "-=", type: "MinusEqualOperator" },
    { regex: "\\+=", type: "PlusEqualOperator" },                
    { regex: "\\*=", type: "MultiplicationEqualOperator" },
    { regex: "/=", type: "DivisionEqualOperator" },
    { regex: "%=", type: "ModulusEqualOperator" },
    { regex: "&=", type: "BinaryAndEqualOperator" },
    { regex: "\\|=", type: "OrEqualOperator" },
    { regex: "^=", type: "XorEqualOperator" }, 
    { regex: "<<=", type: "ShiftLeftEqualOperator" },
    { regex: ">>=", type: "ShiftRightEqualOperator" },               

    { regex: "~", type: "ComplementOperator" },
    { regex: "\\+\\+", type: "IncrementOperator" },
    { regex: "--", type: "DecrementOperator" },

    { regex: "!", type: "NotOperator" },
    { regex: "&&", type: "AndOperator" },
    { regex: "\\|\\|", type: "OrOperator" },

    { regex: "==", type: "EqualityOperator" },
    { regex: "!=", type: "NotEqualOperator" },
    { regex: "<>", type: "NotEqualOperator" },
    { regex: "<", type: "LessThanOperator" },
    { regex: ">", type: "GreaterThanOperator" },
    { regex: "<=", type: "LessThanOrEqualOperator" },
    { regex: ">=", type: "GreaterThanOrEqualOperator" },

    { regex: "\\|>", type: "PipelineOperator" },    
                
    { regex: "\\+>", type: "AggregateOperator" },
    { regex: "=\\?", type: "AnyOperator" },
    { regex: "-#", type: "CountOperator" },
    { regex: "-&", type: "GroupByOperator" },
    { regex: "-<", type: "SelectManyOperator" },
    { regex: "->", type: "SelectOperator" },        
    { regex: "-\\?", type: "WhereOperator" },

    { regex: "-\\\\", type: "OrderByOperator" },
    { regex: "-/", type: "OrderByDescendingOperator" },

    { regex: ">^", type: "FirstOperator" },
    { regex: ">$", type: "LastOperator" },
    { regex: ">#", type: "CountOperator" },

    { regex: "~^", type: "StartsWithOperator" },
    { regex: "~$", type: "EndsWithOperator" },

    { regex: "!\\?", type: "DistinctOperator" },
    { regex: "#!", type: "PostfixCountOperator" },
    { regex: "^!", type: "PostfixFirstOperator" },
    { regex: "$!", type: "PostfixLastOperator" },
    { regex: "\\\\!", type: "PostfixOrderOperator" },
    { regex: "/!", type: "PostfixOrderDescendingOperator" },
    
    { regex: "$", type: "PatternMatchingOperator" },
    { regex: "$_", type: "ImplicitArgumentOperator" },
    { regex: "$args", type: "ImplicitArgumentsOperator" },

    { regex: "%%", type: "InteropOperator" },

    { regex: ";", type: "EndOfStatement" },

    { regex: "\\r|\\n|\\t|\\v|\\s", type: "WhiteSpace" },
    { code: idCode },
    { regex: "0", code: getNumber('NextChar();\r\nstate = 1;', 'return AphidTokenType.Number;') },
    { regex: "0x", code: zeroXCode },
    { regex: "0b", code: zeroBCode },
    { code: getNumber(
        'state = 0;', 
        'if (state == 1 || state == 3 || state == 5) { return AphidTokenType.Number; }') },
    getString('"'),
    getString("'"),    
    { regex: "//", code: singleLineCommentCode },
    { regex: "/\\*", code: commentCode }
];

Console.WriteLine('Adding custom operators');

var tokenChars = [ 
    '`', '~', '!', /*'@',*/ '#', '%', '^',
    '&', '*', '-', /*'_',*/ '=', '\\\\', '+', ':',
    '<', '>', '.', '|', '/', '?'/*, '$'*/
];

using System.Text.RegularExpressions;

var usedTokens = tokens
    .where(@() $_.regex defined)    
    .select(@() $_.regex);

Console.WriteLine('Built in tokens:');    
usedTokens.select(@{ Console.WriteLine('  {0}', $_); });

Console.WriteLine('\r\nCustom tokens:');

extend string {
    e: @(s, value) s.replace(value, '\\' + value),
}

var regexEscape = @() $_.e('+').e('*').e('|').e('?').e('(').e(')').e('[').e(']');

var customTokenNumber = 0;

var addToken = @(t) {
    if (!usedTokens.contains(t)) {
        Console.WriteLine('  {0}', t);
        tokens.add({ regex: t, type: "CustomOperator" + str(customTokenNumber++).PadLeft(3, '0') });
    }
};

for (x in tokenChars) {
    for (y in tokenChars) {
        addToken(x + y |> regexEscape);
    }

    addToken(x |> regexEscape);
}

//Console.ReadLine();


