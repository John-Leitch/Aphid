var speech;

@{
    load System.Speech;
    using System.Speech;
    using System.Speech.Synthesis;
    using System.Speech.Recognition;

    _wavStream = macro(@{
        wavStream defined && wavStream != null ?
            wavStream : new MemoryStream()
    });

    _recognize = macro(@(init) {
        var recognizer = new SpeechRecognitionEngine();
        recognizer.LoadGrammar(new DictationGrammar());
        init;
        var result = 5 | TimeSpan.FromSeconds | recognizer.Recognize;

        ret result;
    });

    speech = {
        say: @(text, wavStream) {
            var speech = new SpeechSynthesizer();

            if (wavStream defined && wavStream != null) {
                speech.SetOutputToWaveStream(wavStream);
            }

            speech.Speak(text);
        },

        sayToWavStream: @(text, wavStream) {
            var s = _wavStream();
            say(text, s);
            s.Position = 0;
            
            ret s;
        },

        ipa: {
            prompt: @(pronunciation) {
                var p = new PromptBuilder();
                p.AppendTextWithPronunciation('foo', pronunciation);

                ret p;
            },
            
            say: @(pronunciation, wavStream)  speech.say(pronunciation | prompt, wavStream),
            sayToWavStream: @(pronunciation, wavStream) speech.sayToWavStream(pronunciation | prompt, wavStream),
            
            '$detailsFrom': @(o, x) x | o.sayToWavStream | speech.recognize.wavStream,        
            detailsFromText: @this.'$detailsFrom'(speech),
            detailsFromIpa: @this.'$detailsFrom'(ipa),

            '$getPronunciation': @(recognized) recognized != null ? recognized.Words -> @.Pronunciation : null,
            fromText: detailsFromText @> this.'$getPronunciation',
            fromIpa: detailsFromIpa @> this.'$getPronunciation',        
        },

        recognize: {
            audio: @{ _recognize(recognizer.SetInputToDefaultAudioDevice()) },
            wavStream: @(s) { _recognize(recognizer.SetInputToWaveStream(s)) },

            syllables: {
                text: @(t, recurse) {
                    var pass = 0;
                    var passResults = new List[Object]();
                    var pronunciation = t | speech.ipa.fromText;
                    
                    if ((pronunciation#!) != 1) {
                        ex.arg(t);
                    }

                    pronunciation = pronunciation$!;

                    while (true) {                   
                        
                        var fanned = 1..(pronunciation.Length-(pass == 0 ? 1 : 0))->@pronunciation.Substring(0);
                        
                        var detailSet = fanned->@(f)({
                            ipaIn: f,
                            details: f |>?> speech.ipa.detailsFromIpa,
                            ipaOut: details != null ? details.Words -> @.Pronunciation : [],
                            // detailJson: details | clrSerializer.serialize,
                        });                        

                        var result = {
                            pass: pass++,
                            t,
                            ipa: pronunciation,
                            syllables: detailSet
                                -?@!= null
                                -?(@()$_.ipaOut != null && ($_.ipaOut#!) == 1 && $_.ipaIn == $_.ipaOut[0])
                                ->@()({ text: $_.details.Text, ipa: $_.ipaOut[0], confidence: $_.details.Confidence }),
                            detailSet
                        };

                        if (!(recurse defined) || !recurse) {
                            ret result;
                        }

                        passResults.Add(result);

                        if ((result.syllables#!) == 0) {
                            ret passResults;
                        }

                        pronunciation = pronunciation.Remove(0, result.syllables[0].Length);
                    }
                },
            },
        },
    };
}();