_firstChar = macro(@(action) {
    @(word)
        !string.IsNullOrEmpty(word) ?
            (word.Remove(1).action() + (word.Length > 1 ? word.Substring(1) : '')) :
            word
});

_rml = macro(@(c) { word.Remove(word.Length - c) });

// Todo: -f/-fe into v/es
var language = {
    pluralize: (@(word)
        $(word#!) 0, 1: word,
        $(word $!)
            's', 'x', 'o': word + 'es',
            'y': ($(word[word.Length - 2])
                'b', 'c', 'd', 'f', 'g', 'h', 'j',
                'k', 'l', 'm', 'n', 'p', 'q', 'r',
                's', 't', 'v', 'x', 'z', 'w':
                _rml(1) + 'ies',
                word + 's'),                
            $(word.Substring(word.Length - 2))
                'sh', 'ch': word + 'es',
                's', 'x': _rml() + 'es',
                word + 's'),    

    capitalize: _firstChar(ToUpper),
    camelCase: _firstChar(ToLower),
    
    acronym: @(camel, str) {
        if (string.IsNullOrEmpty(str)) {
            ret str;
        }

        var s = camel ? str[0].ToLower() : str[0].ToUpper();

        for (var i = 1; i < str.Length; i++) {
            var c = str[i];
            if (char.IsUpper(c)) {
                s += c.ToLower();
            }   
        }

        ret s.Length == 2 && !camel ? s.ToUpper() : s;
    },
};

// var tests =
//     'boy,boys
//     girl,girls
//     book,books
//     piano,pianos
//     photo,photos
//     stereo,stereos
//     dynamo,dynamos
//     baby,babies
//     lady,ladies
//     city,cities
//     story,stories
//     box,boxes
//     class,classes
//     branch,branches
//     brush,brushes
//     watch,watches'
//     .Split('\n')->@()$_.Trim().Split(',') @() [ $_[0].Trim() |language.pluralize, $_[1].Trim()];

extend string {
    chars: @(s) __string.getChars(s),
    lower: @(s) __string.lower(s),
    split: @(s, separator) __string.split(s, separator),
    replace: @(s, value, replacement) __string.replace(s, value, replacement),
    isMatch: @(s, pattern) __string.isMatch(s, pattern),
    contains: @(s, s2) __string.contains(s, s2),
    length: @(s) __string.length(s),
    remove: @(s, index) __string.remove(s, index),
        
    substring: @(s, index, length) length defined ? 
        __string.substring(s, index, length) : 
        __string.substring(s, index, null),
        
    startsWith: @(s, value) __string.startsWith(s, value),
    endsWith: @(s, value) __string.endsWith(s, value),
    
    removeAt: @(x, substring)
        substring
        |> x.IndexOf
        |> x.Remove,

    removeAtIndexOf: @(x, value, offset)
        ((var i = x.IndexOf(value)) < 0) ?
            x :
            x.Remove(i + (offset defined ? offset : 0)),

    dec: @(x) x |> Decimal.Parse,

    pluralize: language.pluralize,
    capitalize: language.capitalize,
    camelCase: language.camelCase,
}

extend IntPtr {
    toHex: @(p) '0x' + string
        .Format("{0:x}", p.ToInt64())
        .PadLeft(IntPtr.Size == 0x4 ? 0x8 : 0x10, '0'),
}

var format = string.Format;
var join = string.Join;
var concat = string.Concat;