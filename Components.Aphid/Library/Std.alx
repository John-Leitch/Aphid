//AppDomain.CurrentDomain.add_AssemblyResolve(@(o, e) (e.Name ~= 'System\\.Threading\\.Tasks\\.Extensions,') ? extAsm : null )
//ad.add_ReflectionOnlyAssemblyResolve(@(o, e) (e.Name ~= 'System\\.Threading\\.Tasks\\.Extensions,') ? extAsm : null )
// ad.add_ReflectionOnlyAssemblyResolve(@(o, e)

// Todo:
// * Extract to separate files e.g. Std.DumpType.alx
// * Create script to apply include inlining to scripts of same 'namespace'
//   e.g. Std.DumpType.alx, Std.Print.alx, Std.alx, etc.
// * Add null extend to cover calls like .dir() to null.
// * Add fork function for Aphid scripts.
// * Add function to hide console.
// * Add API for scheduled tasks.
// * Add API for creating windows services.
// * Add isolation API that copies bins and headers to 
//   unique temp directory and forwards execution for
//   easier autoupdate.
// * Support partial application for custom ops.
// * Support F# style op to func e.g. (+).
//   - Implement at tokenization layer for simplicity.
// * Add whitespace support to main language.
// * Add tailcall elimination.
// * Add immutable keyword that can be used in place of
//   var e.g. immutable foo = 'test';
// * Add private keyword that can be used for locals to
//   prevent automatic resolution outside of function scope e.g.
//   private foo = 'test'; 
//   var func = @{ foo defined @print('defined? {0}') };
//   func();
// * Add private get for locals, accessible normally, set only local.
// * Add protected, other modifiers.
// * Add type decl support to locals e.g. function foo
//   - Ensure type aliases are supported e.g. 
//     AphidFunction -> function, UInt32 -> uint.
//   - Support in AphidObject. Store type name as well as
//     flags for modifiers and validate value/member access.
// * Include and import sequences e.g.
//   using System + Linq, Reflection
//   -> using System.Linq; using System.Reflection
//   using System & Linq, Reflection
//   -> using System; using System.Linq; using System.Reflection
// * Add inline path support to # and load e.g. #..\foo\bar.txt
// * Add pattern support for # and load e.g. load .\Debug\*Mock.dll
// * Make semicolons optional for: ##, #, using, load
// * Update query operators to return lazy IEnumerable
// * Add language integrated PLINQ support
// * Add support for interfaces (and base types if they don't work)
//   to the extension system.
// * Add support for C# extensions in Aphid
// * Generate Aphid function set and API based on PS Cmdlet metadata
// * Global hotkeys with windows hook
//   - Make autocomplete console resolution easily scriptable and 
//     use with global hooks for fast shortcut resolution.
//   - Look into low level console API, further abstract API and 
//     add support for WPF controls.
// * Create UI automation API.
// * Add native PInvoke support.
// * Build AOP API using scripted mutator.
//   - Add function call tracing via expression injection.
//   - Add argument, state, etc. tracing with automatic detailed
//     output for target functions and udner specific conditions
//     e.g. test assert failed.
// * Use IPC to create process singleton API for regular operations
//   that have high init cost but low runtime cost.
//   - Create remote proxy compatible with IPC channel.
// * API based on file system watcher with emphasis on
//   expressiveness and UI.
//   - Use WPF API to make GUI FSW builder/editor and IO 
//     visualization controls.
// * Add naked functions
// * Support <obj>[<string>] style dynamic member access.
// * Verify Dictionary<T,K> support, improve if necessary.
// * Generate three char custom operators.
// * Overhaul query operators.
//   - Add index operator e.g. ->@(x, i) { }
//   - Make configurable by passing context options by
//     special operator.
//     * Ensure option context support is scope and thread safe.
//     * Support async, lazy
using Components;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

##'Components.Aphid.Library.StandardLibrary';
#'Core\\Internals';
#'Meta\\Reflection';
#'Core\\Operators';
#'Core\\Enums';
#'Core\\Linq';
#'Core\\Async';
#'String';
#'List';
#'Conversion';
#'Cli';
#'Query';
#'Meta';
#'Core\\ClrSerializer';
#'Math';
#'IO';
#'Debugging\\Dbg';
#'Core\\Runtime';

//AphidConfig.Current.ExceptionHandlingClrStack = true;
//>>>var attrs = Enumerable.Take(((getAllTypes()-<@()$_.GetMethods()-<@()$_.GetParameters())-?@()(var a = $_.Attributes) !=ParameterAttributes.None&&$_.Attributes!=ParameterAttributes.Out), 100)->@()({attrs:$_.Attributes, meth:$_})
// Todo: make API for exporting custom ops/type extensions/etc.,
// to other scopes so they can be defined using imports and includes
// without causing scope pollution.

// this.{"$block"}.AddRange(@{
//     using System.Text;
//     var i = 0; 
//     cls();
//     [ 
//         'foobar' ~= 'foo',
//         'hello world' ~= 'foo',
//         'foobar' ~~ 'foo',
//         'hello world' ~~ 'foo',
//         'foobar' ~: [ 'oba', '' ],
//         [ 'foo', 'bar', 'car' ] ~? 'ar' -+ ', ',
//         // 'Hello world' \| 'c:/temp/test.txt',
//         ('\x41\x42\x43\x44'->byte) \& 'c:/temp/test.dat',
//         |\ 'c:/temp/test.txt',
//         &\ 'c:/temp/test.dat',
//         |\ 'c:/temp/test.txt' ~= 'Hello',
//         |\ 'c:/temp/test.txt' ~= 'Hi' 
//     ]->serialize->@print('Test {0}: {1}', ++i);
// });
  
 