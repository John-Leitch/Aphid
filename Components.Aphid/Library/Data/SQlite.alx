// #'std';
var sqlite;
var fromEpoch = @(x) x | DateTimeOffset.FromUnixTimeSeconds @() $_.ToLocalTime();

@{
    #'system/nuget';
    nuget.reference('System.Data.SQLite.Core');
    using System.Data.SQLite;
    var encoding = Encoding.GetEncoding("iso-8859-1");

    sqlite = {
        getString: encoding.GetString,
        escape: {
            id: new SQLiteCommandBuilder() @.QuoteIdentifier,
        },
        db: null,
        connection: null,
        version: 3,
        dateTimeFormat: 'CurrentCulture',
        dateTimeFormatValues: [
            null,
            'ms',
            'Ticks',
            'CurrentCulture',
        ],
        open: @(file) {
            db = file;
            connection = new SQLiteConnection(
                [
                    'Data Source="{0}"' :: $_,
                    version != null ? 'version={0}' :: version : null,
                    dateTimeFormat != null ? 'datetimeformat={0}' :: dateTimeFormat : null,                    
                ]
                -?@!= null
                @join(';'));

            connection.Open();

            ret sqlite;
        },
        query: @(command) {
            var cmd = connection.CreateCommand();
            cmd.CommandText = command;
            printQuery('Executing ~Cyan~{0}~R~', command);

            try {
                using (var rows = cmd.ExecuteReader()) {
                    ret rows->@(r){
                        var o = {};
                        0..r.FieldCount->@{
                            // r.dir();
                            var n = r.GetName($_);
                            // n | print;
                            // r.GetDataTypeName($_) | print;
                            // r.GetFieldType($_) | print;
                            
                            o[n] = r.GetValue($_);
                            var vt = o[n].GetType();
                            // vt | print;
                            if (vt == byte.MakeArrayType()) {
                                var v = o[n];
                                o[n] = v | getString;
                                o[n + '__hex'] = v | hex;                                
                                o[n + '__unicode'] = v | Encoding.Unicode.GetString;
                            }
                            
                            if ((vt == int || vt == long || vt == float || vt == double) && o[n] >= 500000000) {
                                if ((var g = o[n] | timestamp.guess) != null) {
                                    o[n + '_timestamp_guess'] = g;
                                }

                                // [ [ '', 0 ], [ '_cocoa',978307200] ] for (t)
                                //     [ [ 'seconds', 1 ], [ 'ms', 1000 ], [ 'ticks', 10000000 ] ] for
                                //         try {
                                //             o[n + '__epoch_' + $_[0] + t[0]] =
                                //                 (o[n] / $_[1] - t[1])
                                //                 | DateTimeOffset.FromUnixTimeSeconds
                                //                 @() $_.ToLocalTime();
                                //         } catch {

                                //         }
                            }
                            
                        };
                        ret o;
                    }
                }
            } catch (e) {
                ret { error: e, query: cmd.CommandText };
            }
        },
        getRows: @(tableName) {
            var s = tableName | escape.id @format('SELECT * FROM {0}');
            
            var res = s | query;

            if (res.error defined) {
                console.error('Failed, trying with ticks workaround'); 
                var backup = dateTimeFormat;
                connection.Close();
                dateTimeFormat = 'Ticks';
                connection.Open();
                res = s | query;
                
                var fixTicks = @(m)
                    m.Keys
                    -?(@()m[$_].GetType() == DateTime)
                    toArray
                    for (k) m[k] = m[k].Ticks | timestamp.guess;

                if (!(res.error defined)) {
                    res->fixTicks;
                }

                connection.Close();
                dateTimeFormat = backup;
                connection.Open();
            }

            ret res;
        },
        getSchema: @(tableName) {
            var table = connection.GetSchema(tableName);
            var cols = table.Columns;
            
            ret table.Select()->@(r){
                var o = {};
                0..cols.Count->@() o[cols[$_].ColumnName] = r.ItemArray[$_];
                ret o;
            }
        },
        getTables: @getSchema('Tables'),
        dumpRows: @(schema) schema->@() $_.TABLE_NAME | getRows,
        dump: @() ({
            file: connection.FileName,
            schema: { tables: getTables(), views: getSchema('Views') },
            tables: schema.tables | dumpRows,
            views: schema.views | dumpRows,
        }),
    };
}();

// 'c:/source/malware/test.db' | sqlite.open;
// sqlite.dump() | print;