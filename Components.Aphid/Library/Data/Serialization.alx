
// load System.Xml.Linq;

var toJson;
var useNewtonsoftJson;
var toXml;
var toDataContract;
var toJsonDataContract;
var dumpJson;
var dumpXml;
var dumpDataContract;
var dumpJsonDataContract;

@{
    using Components;
    using Components.Json;
    using System;
    using System.Reflection;
    using System.Xml.Linq;

    ////////////////////////////////////////////////////////////////
    // Todo: add to std
    toJson = JsonSerializer.Serialize;

    useNewtonsoftJson = @(assemblyPath) {
        if (assemblyPath defined) {
            loadFile(assemblyPath);
        } else {
            load Newtonsoft.Json;
        }

        toJson = @{
            using Newtonsoft.Json;
            var s = new JsonSerializerSettings();
            s.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
            s.PreserveReferencesHandling = PreserveReferencesHandling.Objects;
            s.Formatting = Formatting.Indented;
            var p = s.GetType().GetProperty('MaxDepth');
            
            p.SetValue(
                s,
                Activator.CreateInstance(
                    p.PropertyType,
                    [ Convert.ChangeType(1, Int32) ]));

            ret @() JsonConvert.SerializeObject($_, s);
        }();
    };

    toXml = @(o)
        XmlObject.SerializeToString.Members[0]
            .MakeGenericMethod([ o.GetType() ])
            .Invoke(new Object(), [ o ]);

    var rtsInitialized = false;

    _tdc = macro(@(id, name) {
        id = @(o) {
            lock rtsInitialized if (!rtsInitialized) {
                load System.Runtime.Serialization;
                rtsInitialized = true;
            }

            using System.IO;
            using System.Runtime.Serialization;
            using System.Runtime.Serialization.Json;
            using System.Text;
            var s = new MemoryStream();
            var serializer = new name(o.GetType());
            serializer.WriteObject(s, o);
            s.Position = 0;
            var r = s.ToArray() |> Encoding.UTF8.GetString;
            s.Dispose();
            ret r;
        };
    });

    _tdc(toDataContract, DataContractSerializer);
    _tdc(toJsonDataContract, DataContractJsonSerializer);

    dumpJson = toJson @> Console.WriteLine;
    dumpXml = toXml @> Console.WriteLine;
    dumpDataContract = toDataContract @> Console.WriteLine;
    dumpJsonDataContract = toJsonDataContract @> Console.WriteLine;
}()