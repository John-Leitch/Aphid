var hashDB;

@{
    #'System/Cryptography';

    _hf = macro(@(n) { file | File.Exists ? file | n.hexFile : 'FileNotFound' });

    hashDB = {
        open: @(dbName) ((!(dbName defined) ? '' : dbName + '_') + 'hashes.txt') | openFile,
        openFile: @(dbFile){
            var db = {
                fast: false,
                updateOnAdd: false,
                allowDuplicates: false,
                hashDBFile: dbFile,
                md5s: null,
                sha256s: null,
                stream: File.Open(hashDBFile, FileMode.OpenOrCreate, FileAccess.ReadWrite),
                reader: new StreamReader(stream),
                writer: new StreamWriter(stream),
                close: stream.Close,
                getKey: @(f) f | Path.GetFullPath @() $_.Replace('/', '\\'),
                fastProvider: new ThreadLocal[SHA256CryptoServiceProvider](@() new SHA256CryptoServiceProvider()),
                add: @(f) {
                    initRows();
                    // stream.Position | dump;
                    //stream.Position = stream.Length;
                    var file = f | getKey;

                    if (!allowDuplicates && rows[file] defined) {
                        ret rows[file];
                    }

                    var o;
                    if (fast) {
                        o = { path: file, sha256: _hf(sha256) };
                        rows[file] = o;
                        [ file, o.sha256 ]->writer.WriteLine;

                        if (updateOnAdd) {
                            sha256s[o.sha256] = o;
                        }
                    } else {
                        o = { path: file, md5: _hf(md5), sha1: _hf(sha1), sha256: _hf(sha256), sha512: _hf(sha512) };
                        rows[file] = o;
                        [ file, o.md5, o.sha1, o.sha256, o.sha512 ]->writer.WriteLine;

                        if (updateOnAdd) {
                            md5s[o.md5] = o;
                        }
                    }
                    
                    writer.Flush();
                    // stream.Position | dump;
                    ret o;
                },
                rows: null,
                initRows: @{
                    if (rows == null) {
                        read();
                    }

                    ret rows;
                },
                read: @{
                    if (rows == null) {
                        rows = {};
                        if (fast) {
                            sha256s = {};
                        } else {
                            md5s = {}
                        }
                    }

                    var r = reader.ReadLine;

                    while (!reader.EndOfStream) {
                        if (fast) {
                            var o = { path: r(), sha256: r() };
                            rows[o.path] = o;
                            sha256s[o.sha256] = o;
                        } else {
                            var o = { path: r(), md5: r(), sha1: r(), sha256: r(), sha512: r() };
                            rows[o.path] = o;
                            md5s[o.md5] = o;
                        }
                    }

                    ret rows;
                },
                get: @(f) {
                    initRows();
                    var k = f | getKey;

                    if (rows[k] defined) {
                        ret rows[k];
                    } else {
                        ret add(k);
                    }
                },
                has: @(f) initRows()[f | getKey] defined,
                hasSHA256: @(f) {
                    initRows();
                    ret sha256s[f | sha256.hexFile] defined;
                },
                hasMD5: @(f) {
                    initRows();
                    ret md5s[f | md5.hexFile] defined;
                },
                addCheck: @(f) {
                    initRows();
                    // stream.Position | dump;
                    //stream.Position = stream.Length;
                    var file = f | getKey;

                    if (rows[file] defined) {
                        ret false;
                    }

                    var result;
                    if (fast) {
                        var o = { path: file, sha256: null };

                        using (var s = File.OpenRead(file)) {
                            var b = fastProvider.Value.ComputeHash(s);
                            
                            o.sha256 = format(
                                "{0:x2}{1:x2}{2:x2}{3:x2}{4:x2}" +
                                "{5:x2}{6:x2}{7:x2}{8:x2}{9:x2}" +
                                "{10:x2}{11:x2}{12:x2}{13:x2}" +
                                "{14:x2}{15:x2}{16:x2}{17:x2}" +
                                "{18:x2}{19:x2}{20:x2}{21:x2}" +
                                "{22:x2}{23:x2}{24:x2}{25:x2}" + 
                                "{26:x2}{27:x2}{28:x2}{29:x2}" +
                                "{30:x2}{31:x2}",
                                b[0], b[1], b[2], b[3], b[4], b[5], b[6],
                                b[7], b[8], b[9], b[10], b[11], b[12],
                                b[13], b[14], b[15], b[16], b[17], b[18],
                                b[19], b[20], b[21], b[22], b[23], b[24],
                                b[25], b[26], b[27], b[28], b[29], b[30],
                                b[31]);
                        }
                        
                        rows[file] = o;
                        writer.WriteLine(file);
                        writer.WriteLine(o.sha256);
                        
                        if ((result = !(sha256s[o.sha256] defined)) && updateOnAdd) {
                            sha256s[o.sha256] = o;
                        }
                    } else {
                        var o = { path: file, md5: _hf(md5), sha1: _hf(sha1), sha256: _hf(sha256), sha512: _hf(sha512) };
                        rows[file] = o;
                        [ file, o.md5, o.sha1, o.sha256, o.sha512 ]->writer.WriteLine;
                        if ((result = !(md5s[o.md5] defined)) && updateOnAdd) {
                            md5s[o.md5] = o;
                        }
                    }
                    
                    writer.Flush();
                    // stream.Position | dump;
                    ret result;
                },
            };
            ret db;
        }
    };
}();