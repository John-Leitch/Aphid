var objTree;
var stringTree;

@{
    objTree = {
        fromArrays: @(arrays){
            var root = {};

            arrays->@{
                var r = root;
                $_->@() r = !(r[$_] defined) ? (r[$_] = {}) : r[$_];
            };

            ret root;
        }
    };

    stringTree = {
        defaultIndent: 2,
        cycleDetetion: true,
        fromObjTree: @(root, name)
            stringTree.create(
                { node: name defined ? name : root, children: root },
                @(n) n.node,
                @(n) n.children | keys->@(k)({ node: k, children: n.children[k] })),

        fromArrays: objTree.fromArrays @> fromObjTree,

        create: @(root, dumpNode, getChildren) {
            var sb = new StringBuilder();
            createCore(root, dumpNode, getChildren, sb, 0, [], true, new List[Object]());
        
            ret sb.ToString();
        },

        createCore: @(node, dumpNode, getChildren, sb, indent, depths, lastChild, traversed) {
            this.'$internal'.CopyTo(this);

            0..indent->@(i) sb.Append(
                (var ai = i == indent - 1) && lastChild ? ("└" + getHorizontalLine()) :
                (var hd = (depths#!) > 0) && ai && (depths$!) == i ? ("├"+ getHorizontalLine()) :
                hd && (depths=?(@==i)) ? ("│" + getSpace()) :
                (" " + getSpace()));

            node | dumpNode | sb.AppendLine;        

            (var nodes = node | getChildren) |> toArray @except(traversed) -> @(c) createCore(
                c,
                dumpNode,
                getChildren,
                sb,
                indent + 1,
                (var lc = (nodes$!) | c.Equals) ? depths : aq.concat(depths, [ indent ]),                
                lc,
                traversed);
        },

        '$internal': {
            getSpace: @() (defaultIndent - 1) * ' ',
            getHorizontalLine: @() (defaultIndent - 1) * '─',
        },
    };
}();