    #'Std';
    #'Meta\\Code\\Generation\\IL';

using Components.Aphid.UnitTests;
using Components.Aphid.UnitTests.Shared;

var global = this;
var lastException = null;
var success;
var fault;
var getTestKeys;
var runTests;
var isStandalone;
var tryAction;



if (!(global.childCreated defined )) {
    global.childCreated = false;
    global.allTests = { success: 0, total: 0 };
    global.isAsync = false;
}

@{


    getTestKeys = @{
        var s = global;
        var k = s |> keys |> Enumerable.ToList;
        var i = 'tests' |> k.IndexOf;

        if (i == -1) {
            ret [];
        }

        ret Enumerable.Skip(k, i + 1)
            -? (@(x)
                !x.StartsWith('$') &&
                s.{x} != null &&
                s.{x}.GetType() == AphidFunction)
            |> Enumerable.ToArray;
    };

    _try = macro(@(expectSuccess) {
        @() @{
            if (expectSuccess) {
                $_();
                ret true;
            } else {
                var actual = isThrow(@{
                    $_();
                });

                ret actual != null;
            }
        }
    });

    success = _try(true);
    fault = _try(false);

    using System.IO;
    var exe = getExe();

    isStandalone =
        !String.IsNullOrEmpty(exe) &&
        Path.GetFileName(exe).ToLower().StartsWith('aphid');

    tryAction = @AphidCli.TryAction(this.{'$aphid'}, null);

    if (isStandalone) {
        if (!global.childCreated) {
            head('Aphid Test Framework');
        }

        var makeAssert = @(f) f @> @() $_ ? $_ : throw new InvalidOperationException();
        global.isTrue = makeAssert(@== true);
        global.isFalse = makeAssert(@== false);
        global.isFoo = makeAssert(@== 'foo');
        global.is9 = makeAssert(@== 9);
        global.isNull = makeAssert(@== null);
        global.notNull = makeAssert(@!= null);
        
        
        global.isThrow = @(f) {
            try f();
            catch ret true;
            
            throw string.Format(
                'Expected exception from test function: {0}',
                f);
        };

        var args = getCommandLineArgs();
        var hasPath = args.Length == 3;

        if (!global.childCreated &&
            (args.Length == 2 || hasPath) &&
            Path.GetFileName(args[1].ToLower()) == 'test.alx') {
            global.childCreated = true;
            async.degree(8);
            var eachFunc = true ? async.each : seq.each;
            global.isAsync = eachFunc == async.each;
            _i = macro(@(n) {
                Path
                    .GetFileNameWithoutExtension($_)
                    .ToLower() != n
            });

            (hasPath ?
                args[2] :
                args[1] |> Path.GetFullPath |> Path.GetDirectoryName)
            |> Directory.GetFiles
            -?(@()
                _i('test') &&
                _i('testbase') &&
                _i('aoptest') &&
                $_.EndsWith('.alx'))
            |> toArray
            @eachFunc(@()
                $_.Replace('\\', '\\\\')
                @format('@{{ var curTest = "{0}"; var curFunc=@{{}}; #"{0}"; curFunc(); print() }}()')
                AphidParser.Parse)
                |> toArray;

            var failed = global.allTests.success < global.allTests.total;
            print();
            subhead('Final Results');
            (failed ? printCriticalError : printSuccess)(
                'Finished running all tests, ~{0}~{1:n0}/{2:n0}~R~ succeeded',
                failed ? 'Red' : 'Green',
                global.allTests.success,
                global.allTests.total);
        } else {
            // global.FlattenScope()-<@.Keys->print;
            // repl.run();
            frame().Scope.{'$block'}.AddRange(@{ runTests(global) });
        }
    }



    runTests = @(scope){
        printQuery(
            'Searching for tests in {0}',
            scope.curTest defined ? scope.curTest : 'script',
            Thread.CurrentThread.ManagedThreadId);

        var testKeys = getTestKeys(scope);

        printSuccess('Found ~Cyan~{0}~R~ tests', testKeys.Length);        
        //testKeys->@format('  ~Cyan~-~R~ {0}') @join('\r\n') |> print;
        
        if (!global.isAsync) {
            printInfo('Executing tests');
        }
        var testResults = testKeys->@(k) {
            var r = { key: k, func: scope.{k}, result: null, success: true };

            if (!global.isAsync) {
                printQuery('Running test ~Magenta~{0}~R~', k);
            }
            //Todo: output exception details when tryAction returns false.
            if (!tryAction(@{
                r.result = r.func();
                
                if (!global.isAsync && Environment.UserInteractive && !Console.IsOutputRedirected) {
                    var len = format('Running test {0}', k).Length;
                    var x = len + 4;

                    if (x < Console.WindowWidth) {
                        Console.CursorTop = Console.CursorTop - 1;                    
                        Console.CursorLeft = len + 4;
                    } else {
                        Console.CursorLeft = 0;
                    }
                }


                // lock global {
                if (global.isAsync) {
                    print('Test ~Magenta~{0}~R~ {1}' :: [
                        k,
                        r.result == null || r.result.GetType() != bool || r.result ?
                            ' -> ~Green~Successful~R~' : 
                            ' -> ~Red~Unsuccessful~R~'
                    ]);
                } else {

                    if (r.result == null || r.result.GetType() != bool || r.result) {
                        print(' -> ~Green~Successful~R~');
                    } else {
                        r.success = false;
                        print(' -> ~Red~Unsuccessful~R~');
                        printError('Failed with return value: ~Yellow~{0}~R~', r.result |> serialize);

                        if (global.lastException != null) {
                            print(
                                '    Underlying exception: ~Yellow~{0}~R~',
                                global.lastException.message);
                        }
                    }
                }
                // }
            })) {
                r.success = false;
                r.error = AphidCli.LastException;
            }

            ret r;
        };

        var failed = testResults=?@()!$_.success;
        var success = testResults-#(@.success);
        global.allTests.success += success;
        global.allTests.total += testResults.Count;

        (failed ? printCriticalError : printSuccess)(
            'Done, ~{0}~{1:n0}/{2:n0}~R~ tests succeeded',
            failed ? 'Red' : 'Green',
            success,
            testResults.Count);

        //var faults = testResults-?@() $_.error defined;
//
        //if ((faults #!) > 0) {
            //dumpe(faults);
        //}
    };
}();