_c = macro(@(n, f) { _c2(n, '', '', f)  });
_c2 = macro(@(n, pref1, pref2, type) { _cInner(id(pref1, n), id(To, pref2, type)) });
_cInner = macro(@(n, f) { extend unknown { n: @(x) Convert.f(x) } });

_cu = macro(@(n, f3) {
    _c(n, f3);
    _c2(n, u, U, f3);    
});

_c(byte, Byte);
_c(sbyte, SByte);
_cu(short, Int16);
_cu(int, Int32);
_cu(long, Int64);
_cu(long, Int64);
_c(float, Single);
_c(double, Double);

extend unknown { char: @(x) Convert.ToChar(Convert.ToByte(x)), }

using System.Collections;
_h = macro(@(s) { _f(s, $_) });
_i = macro(@(s, a) { _f(s, $_.a()) });
_f = macro(@(s, a) { format('{0:x' + quote(s) + '}', a) });
_e = macro(@(t, v) { throw new ArgumentException('Cannot convert ' + quote(t) + ' ' + v + ' to hex') });

var hex = @() ($(var t = $_.GetType())
    bool: $_ ? '01' : '00',
    sbyte, byte: _h(2),
    short, ushort: _h(4),
    int, uint: _h(8),
    long, ulong: _h(16),    
    char: _i(4, ushort),
    string: ($_ -> (@() _i(4, ushort)) |> concat),
    float: _i(8, uint),
    double: _i(16, ulong),
    decimal: (var u = $_.ulong()) == $_ ? _f(16, u) : _e(decimal, $_),
    t.GetInterface(IEnumerable) != null ? ($_->hex |> concat) : _e(type, $_.GetType()));

var unhex = @()
    '-,: \t\r\n'
    | $_.Split
    -<(@() ($($_.Length % 2) 0: $_, $_.PadLeft($_.Length + 1, '0')).ToCharArray() @every(2))
    ->concat
    ->@() Convert.ToByte($_, 16);

var unhexStr = @() $_ | unhex | Encoding.GetEncoding("iso-8859-1").GetString;

var hexDump = {
    initialized: false,
    init: @{
        fmt = string.Format.Members[6].Invoke;

        if (valueColor == null) {
            valueColor = console.color.pair(
                'a0d060' | unhex | @console.color.add(0x60),
                '2050e0' | unhex | @console.color.add(-0x60));
        }

        if (nonPrintable == null) {
            nonPrintable = console.color.fg(SystemColor.Gray) + '.' + VT100.Reset;
        }

        initialized = true;
    },    
    fmt: null,
    valueColor: null,
    nonPrintable: null,
    label: true,
    ascii: true,
    getFormat: @(size, width)
        (label ? 
            console.color.fg(SystemColor.DarkGray) + '{0:x8}' +
            VT100.Reset + 
            ': ' :
            '') +
        valueColor +
        (0..width
            ->(@()$_*size..size
                ->(@()'{{{0}:x2}}' :: $_ + 1)
                |> reverse
                |> concat)
        @join(' ')) +
        VT100.Reset,
    fromFile: @(file, size, width, height) {
        if (!initialized) {
            init();
        }

        if ($args.Count < 2) {
            size = 1;
        }

        if ($args.Count < 3) {
            width = 32 / size;
        }

        if ($args.Count < 4) {
            height = -1;
        }

        var rowSize = size * width;
        var remaining = height > -1 ? Math.Min(file | io.len, rowSize * height) : file | io.len;        
        var reader = new BinaryReader(file | io.open.read);
        var tmpl = getFormat(size, width);
        var objBuffer = Array.CreateInstance(Object, rowSize + 1);
        var strWidth = (label ? 10 : 0) + (size * width) + width;
        var sb = new StringBuilder();

        do {
            objBuffer[0] = reader.BaseStream.Position;
            
            var bytes = reader.ReadBytes(rowSize);
            var t;
            var fullLine = bytes.Length == rowSize;

            if (fullLine) {
                t = tmpl;
            } else {
                t = getFormat(size, bytes.Length / size | Math.Ceiling);
                
                for (var i = 1; i < objBuffer.Length; i++) {
                    objBuffer[i] = 0.byte();
                }
            }

            Array.Copy(bytes, 0, objBuffer, 1, bytes.Length);
            sb.Append(fmt(null, [ t, objBuffer ]));
            
            if (ascii) {
                if (!fullLine) {                
                    var delta = (rowSize - bytes.Length) * 2;                
                    ' ' * (delta + Math.Ceiling(delta / size / 2)) |> sb.Append
                }            
                
                sb.Append(' ' + VT100.Reset);
                bytes for sb.Append($_ > 0x1f && $_ < 0x80 ? Convert.ToChar($_) :  nonPrintable);
            }
            
            console.line(sb);
            sb.Clear();
            
            remaining -= rowSize;            
        } while (remaining > 0);
    },
};    
//aphidupdatescripts.cmd & aphid64 * #'std'; this.dir('\\$ext\\.unknown'); ['uint', 'ulong', 'long']-^>@()0xdeadbeef.{$_}() @()print('{0} 0x{0:x8} {1}', $_, $_.GetType().Name)