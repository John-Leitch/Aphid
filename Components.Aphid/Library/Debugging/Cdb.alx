var cdb;

@{
    #'System/Stdio';
    #'Meta/Code/TokenMinimizer';
    _outObj = macro(@{ { enabled: true, shared: null, stdOut: null, stdError: null } });

    cdb = {
        cdbPath: 'c:\\debuggers\\cdb.exe',
        cdbProc: null,
        stdIn: null,
        redirectTask: null,
        consoleOut: true,    
        serializer: null,
        quote: null,
        verbose: true,
        buffers: _outObj(),
        callbacks: _outObj(),
        open: @(dmpFile) run('-Z "{0}"' :: dmpFile),
        run: @(args) {
            var s = new AphidSerializer(aphid);
            s.AlwaysQuoteKeys = true;
            s.UseDoubleQuotes = true;
            s.IgnoreLazyLists = false;
            s.IgnoreFunctions = true;
            s.IgnoreSpecialVariables = true;
            s.MaxElements = -1;
            s.SafeCollectionAccess = true;
            s.StringReferenceThreshold = 100000;
            s.SplitStrings = false;
            serializer = s;
            quote = serializer.Serialize;

            var si = new ProcessStartInfo(cdbPath, args);
            si.UseShellExecute = false;
            si.RedirectStandardError = true;
            si.RedirectStandardInput = true;
            si.RedirectStandardOutput = true;
            si.CreateNoWindow = true;
            si.WindowStyle = ProcessWindowStyle.Hidden;
            cdbProc = Process.Start(si);
            stdIn = cdbProc.StandardInput;
            
            buffers
            | keys
            -?@!='enabled'
            ->@() buffers[$_] = new StringBuilder();        

            redirectTask = async.long(@()
                stdio.redirect(
                    cdbProc,
                    @(data, isError){
                        _append = macro(@(n) { 
                            if (buffers.enabled) {
                                buffers.n.Append(data);
                            }

                            if (callbacks.enabled && callbacks.n != null) {
                                callbacks.n(data, isError);
                            }
                        });

                        _append(shared);

                        if (!isError) {
                            _append(stdOut);
                        } else {
                            _append(stdErr);
                        }
                        
                        if (consoleOut) {
                            Console.Write(data);
                        }
                    }));
        },
        writeLineCore: @(input) {
            // printInfo('~Cyan~[WriteLine]~R~ {0}', input);
            stdIn.WriteLine(input);
        },
        write: @(input, flush) {
            $(var t = input.GetType())
                string: writeLineCore(input),
                AphidObject: input | quote | writeLineCore,
                IEnumerable.IsAssignableFrom(t) ?
                    input->@() write($_, false) :
                    ex.arg(input);
            
            if (!(flush defined) || flush) {
                stdIn.Flush();
            }        
        },
        '$internal': {
            template: {
                xml: {
                    func: @{
                        load System.Xml.Linq;
                        using System.Xml.Linq;
                        var indent = 0;
                        var margin = @() '  ' * indent;
                        var w = Console.WriteLine;
                        var padding = '\r\n' * 3;
                        padding | w;
                        using System.Collections.Generic;
                        var lines = new List[Object]();
                        new XDeclaration("1.0", "utf-8", "yes") |> w;
                        new XAttribute('Cmd', cmdIn) @w('<CmdOut {0}>');

                        var line = null;
                        indent++;
                        while ((line = Console.In.ReadLine()) != null) {
                            new XElement('CmdLineOut', line)
                            @w('{0}{1}', margin());
                        }
                        indent--;
                        w('</CmdOut>');
                        padding | w;
                    },
                },

                obj: {
                    // func: @{
                    //     using System.Collections.Generic;
                    //     var w = Console.WriteLine;
                    //     this.'$aphid'.Serializer.StringReferenceThreshold = int.MaxValue;
                    //     var padding = '\r\n' * 3;
                    //     padding | w;
                        
                    //     Console.In
                    //         .ReadToEnd()
                    //         .Split('\n')
                    //         ->(@()$_.TrimEnd())
                    //         |> this.'$aphid'.Serializer.Serialize
                    //         |> w;
                        
                    //     // var lines = new List[Object]();
                    //     // var line = null;
                        
                    //     // while ((line = Console.In.ReadLine()) != null) {
                    //     //     // if (line.TrimEnd() != '') {
                    //     //         line.TrimEnd() | lines.Add;
                    //     //     // }
                    //     // }

                    //     // lines | this.'$aphid'.Serializer.Serialize | w;
                    //     padding | w;
                    // },

                    func: @{
                        var w = Console.WriteLine;
                        var r = Console.In.ReadLine;
                        
                        
                        w('\r\n\r\n\r\n[\'\r\n\r\n\r\n');
                        var line;
                        while ((line = r()) != null) 
                            w(line);
                            // w('"{0}",', );
                        
                        w('\r\n\r\n\r\n\']\r\n\r\n\r\n');
                    },

                    patterns: ["\\['(\\r\\n)", "(\\r\\n)'\\]"]->@string.Format('\\r\\n\\r\\n{0}\\r\\n\\r\\n'),
                },

                format: @(tmplFunc)
                    tmplFunc[0].Context.Code.Substring(
                        (var startOff = tmplFunc.Body^!@.Index),
                        (tmplFunc.Body$! @() $_.Index + $_.Length) - startOff)
                    | minTokens
                    | quote,
                
                parseOutput: @(tmpl){
                    var ts = buffers.stdOut.ToString;
                    var stdStr = ts();

                    var matches;
                    while ((matches = (tmpl.patterns -> @() stdStr ~~ $_))=?@()($_#!) == 0) {
                        async.sleep(100);
                        
                        try {
                            stdStr = ts();
                        } catch (e) {
                            printError('Error: {0}', e.message);
                        }

                        if (cdbProc.HasExited) {
                            printError('Cdb process exited, could not read output');
                            ret null;
                        }
                    }

                    var bounds = matches->@()$_[0].Groups[1].Index;
                    ret bounds[1] + 1 - bounds[0] @stdStr.Substring(bounds[0]) @()$_.Trim().Split(['\r\n'], StringSplitOptions.None);
                },
            },    
            execBlock: @(aphidBlock, dbgCmd)
                // strOut(@{%>
                //     .shell -ci <%= dbgCmd | quote %> aphid64portable * #'std';var cmdIn=<%= dbgCmd | quote %>;eval(<%= aphidBlock | template.format %>)
                // <%})
                strOut(@{%>
                    .shell -ci <%= dbgCmd | quote %> aphid64portable !<%= aphidBlock | template.format %>
                <%})
                .ToString()
                .Trim(),
        },        
        pipe: @(dbgCmd) {
            
            var start = DateTime.Now;
            
            if (verbose) {
                printInfo('Running ~Cyan~{0}~R~ command', dbgCmd);
            }

            var tmpl = __i.template.obj;
            ['shared', 'stdOut', 'stdError']->@()buffers[$_].Clear();
            dbgCmd @__i.execBlock(tmpl.func) |> write;
            var o = tmpl | __i.template.parseOutput;
            var time = DateTime.Now.Subtract(start);

            if (verbose) {
                printSuccess('Command finished in ~Magenta~{0}~R~', time);
            }

            ret o;
        },
        sos: {
            findModules: @()
                '%windir%'
                | env.expand
                @io.end('Microsoft.NET')
                @io.find.files('sos.dll'),

            loadExtension: @()
                findModules()
                -<(@() [ $_ @format('!load {0}'), $_ | io.up @format('.sympath+ {0}'), ])
                ->pipe,

            dumpExceptions: @{
                var out = new List[Object]();
                var pe = new Queue[Object]();
                
                var fan = @(c) [
                    c,
                    c.Replace('!PrintException -lines', '!PrintException -lines -nested')
                ];

                '!PrintException -lines' | fan -> pe.Enqueue;
                var known = new List[Object](pe);

                while (pe.Count > 0) {
                    var c = pe.Dequeue();
                    var dbgObj = c | pipe;
                    
                    if (dbgObj == null) {
                        printError('Error running stack command');
                        continue;
                    }

                    dbgObj | out.Add;
                    dbgObj
                        -?@!=null
                        -<(@(x)x ~~ '!PrintException [a-fA-F0-9]+')
                        ->@.Value
                        -<fan
                        @except(known)
                        for (x) {
                            x | pe.Enqueue;
                            x | known.Add;
                        }
                }

                ret out;
            }
        },
    };

    var __i = cdb.'$internal';
}();