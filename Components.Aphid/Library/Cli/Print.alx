

if (print defined && print != Cli.WriteLine) {
delete print;
using Components.External.ConsolePlus;
using Components.Aphid.TypeSystem;
using Components.Aphid.Interpreter;
using System.Threading;
using System.Diagnostics;

var handler = @(line, fmt) {

// if (Cli.WriteHandler == null || Cli.WriteHandler.GetType() != AphidFunction) {

    var tagFmt = '[Tid {1}{2}0x{0:x2}{3}';
    tagFmt = '[{1}{2}0x{0:x2}{3}';
    var tagDelim = ' ';
        
    var clamp = @(i) SystemColor.GetFields() @(f) f[i % (f.Length)].GetValue(null);
    var invert = @(c) c->@+0->(@(b) ~b |> Decimal.GetBits ^! @+0 @&0xff |> Convert.ToByte) |> Enumerable.ToArray;
    var tag = false;
    var sb = new StringBuilder();
     
    if(Console.CursorLeft == 0 &&
    !(var n = this.'$aphid'.GetStackFrame(1).Name).StartsWith('Cli.WriteHeader') &&
    true) {
    //(@{n|Console.WriteLine; ret n}()
    // (n
    // .StartsWith('Cli.Write') || n.StartsWith('Cli.WriteLine') || n.StartsWith('_styleEscaped'))) {
        tag = true;
        sb.AppendFormat(
            tagFmt,
            (var tid = Thread.CurrentThread.ManagedThreadId),
            (var tc = (tid | clamp)) | VT100.Foreground,
            tc | invert |> VT100.Background,
            VT100.Reset);
        

        var l = fmt;
        var hasToken = (l | Cli.EraseStyles).StartsWith('[');

        if (tag && !hasToken) {
            l = tagDelim + '*] ' + l;
        }

        var off = sb.Length;   
        sb.Append(l);
        
        if (tag && hasToken) {
            // var tmp = Console.CursorLeft;
            // Console.CursorLeft = off;
            sb.Remove(off, tagDelim.Length).Insert(off, tagDelim);
            // Console.Write(tagDelim);
            // Console.CursorLeft = tmp;
        }
    } else {
        if (fmt defined && fmt != null && fmt.Length > 0) {
            sb.Append(fmt);
        }
    }

    if (line)
    sb.Append('\r\n');

    if (sb.Length > 0) {
        lock (Console.Out) 
        sb.ToString() | Console.Write;
    }
};

//Cli.WriteHandler = @(msg) handler(false, msg);
//Cli.WriteLineHandler = @(msg) handler(true, msg);
// if ((this.'$aphid'.GetStackTrace()#!) == 1 && Thread.CurrentThread.ManagedThreadId == 1) {
// if (Cli.WriteHandler.Method.DeclaringType == Console && 
//  Thread.CurrentThread.ManagedThreadId == 1) {
//     Console.WriteLine('hooking');
//     Cli.WriteHandler = @(msg) handler(false, msg);
// }
}

using Components.External.ConsolePlus;

// var _t = tracePrint defined ? @() Cli.WriteLine('~Magenta~Printing {0}~R~', [ $_ ]) : @{};
_t = macro(@(a, b, c, d, e, f, g){ });
_print(var print, Cli.WriteLine);
_print(var out, Cli.Write);
// Todo: add print*() support for Cli.WriteMessage
// _print(printMsg, Cli.WriteMessage);

var printInfo;
var printQuery;
var printSuccess;
var printError;
var printCriticalError;

_msg = macro(@(msgName) { _msg2(id(print, msgName), id(Write, msgName, Message)) });
_msg2 = macro(@(printName, cliMember) { _print(printName, Cli.cliMember) });
_msg(Info);
_msg(Query);
_msg(Success);
_msg(Error); 
_msg(CriticalError);

_isCollection = macro(@(_o) {
    (_o != null) &&
    ((var _t = _o.GetType()) != AphidObject) &&
    (_t != string) &&
    (_t.GetInterface('IEnumerable') != null)
});

_print = macro(@(name, write) {
    name = @(fmt, arg0) {
        var skip = @() Enumerable.Skip($_, 1);
        
        if ($args.Count >= 1 && fmt == null) {
            _t('null format');
            _null write('null', []);
        } else if ($args.Count > 1 && _isCollection(fmt)) {
            _t('format collection');
            var args = $args |> skip -> @() _na($_);
            for (x in fmt) {
                write(_styleEscaped(x), args);
            }
        } else {
            switch ($args.Count) {
                0: {
                    _t('blank value');
                    write('');
                }
                1: {
                    if (fmt != null && fmt == AphidObject) {
                        _t('serialized object');
                        write(fmt |> serialize |> Cli.StyleEscape);
                    } else if (_isCollection(fmt)) {
                        _t('collection');
                        fmt->@(x) _styleEscaped(x) |> write;
                    } else {
                        _t('scalar');
                        _scalarFormat(fmt) |> write;
                    }
                }
                2: {
                    if (arg0 != null && (_isCollection(arg0))) {
                        _t('arg collection');
                        arg0->@() _styleEscaped($_) @write(_f(fmt));
                    } else {
                        _t('single format arg');
                        var a = _styleEscaped(arg0);
                        write(fmt, a);
                    }
                }
                default: {
                    _t('variadic formatted');
                    var args = $args |> skip ->@() _na($_);
                    write(_f(fmt), args);
                }
            }
        }
    };
});

_no = macro(@(x, f) { x == null ? 'null' : x.GetType().IsPrimitive ? x : f });
_n = macro(@(x1, f1) { _no(x1, f1(x1)) });
_na = macro(@(x2) { _no(x2, Cli.StyleEscape(x2)) });

_scalarFormat = macro(@(x4) { x4 == null ? 'null' : x4.ToString() });

_f = macro(@(x5) {
    x5 == null ? 'null' :
    (x5.GetType() == AphidObject) ? (x5 |> serialize |> Cli.Escape) :
    x5.ToString()
});

_styleEscaped = macro(@(x6) {
    x6 == null ? 'null' :
    (x6.GetType() == AphidObject) ? (x6 |> serialize |> Cli.StyleEscape) :
    _nonPrimitiveToString(x6)
});

_nonPrimitiveToString = macro(@(value) {
    !value.GetType().IsPrimitive ? value.ToString() : value
});


