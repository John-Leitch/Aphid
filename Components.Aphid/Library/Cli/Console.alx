using Components;
using Components.External.ConsolePlus;

var cls;
var exit = @() ($args.Count != 0 ? $_ : 0) |> Environment.Exit;
var getCommand = @() Environment.CommandLine;
var getCommandLineArgs = Environment.GetCommandLineArgs;

var fixColors = @{
    Console.ForegroundColor = ConsoleColor.Gray;
    Console.BackgroundColor = ConsoleColor.Black;
};

var console;
var head = @(msg){ Cli.WriteHeader($_, console.defaultHeaderStyle) };
var header = head;
var subhead = @(msg) { Cli.WriteSubheader(msg, console.defaultSubheaderStyle) };
var subheader = subhead;

var fatal = @{
    var msg = 'Fatal error';
    throw $($args.Count) 0: msg, '{0}: {1}' :: [ msg, $args[0] :: ($args @aq.skip(1)) ];
};

_ci = macro(@(a) { if (isSafe()) { a } });
_bp = macro(@{
    var curY = state.startPos + barYOffset;
    var needed = curY - (Console.BufferHeight - 1);    

    if (needed > 0) {
        Console.MoveBufferArea(
            0,
            needed,
            Console.BufferWidth,
            Console.BufferHeight - needed,
            0,
            0);

        state.startPos -= needed;
        curY = state.startPos + barYOffset;
    }

    Console.SetCursorPosition(0, curY);
});

@{
    using Components.Aphid.UI.Formatters;
    using Components.PInvoke;
    
    console = {
        vt100Supported: VT100.TryEnable(),
        writeLine: Console.WriteLine,
        line: writeLine,        
        write: Console.Write,
        head,
        header,
        subhead,
        subheader,
        defaultHeaderStyle: '~|Blue~~White~',
        defaultSubheaderStyle: defaultHeaderStyle,
        info: printInfo,
        query: printQuery,
        success: printSuccess,
        error: printError,
        fail: printCriticalError,
    
        free: @{            
            Cli.UseTrace = true;
            Kernel32.FreeConsole();
        },

        getWindow: Kernel32.GetConsoleWindow,
        exists: getWindow @> @!= IntPtr.Zero,
        isSafe: EnvironmentHelper.IsWindows ?
            @() exists() && Environment.UserInteractive && !Console.IsOutputRedirected :
            @() Cli.HasConsole,
        runWindowCmd: EnvironmentHelper.IsWindows ?
            @User32.ShowWindow(getWindow()) :
            @() throw new NotImplementedException(),
        show: @() runWindowCmd(ShowWindowCommands.SW_SHOW),
        hide: @() runWindowCmd(ShowWindowCommands.SW_HIDE),
        highlight: @(text) SyntaxHighlightingFormatter.Format(text, false),
        writeCode: highlight @> line,
        code: writeCode,

        bindKeyAsync: @(key, action) {
            using System.Threading;

            var t = new Thread(@{
                while (true) {
                    action();

                    while (Console.ReadKey(true).Key != key) {
                    }
                }
            });

            t.IsBackground = true;
            t.Start();

            ret t;
        },

        clear: @() _ci(Console.Clear()),

        setTitle: @(title) _ci(Console.Title = title),

        progress: {
            create: @(total) {
                var p = {
                    state: {
                        startPos: null,
                        msg: '',
                        progress: null,
                    },
                    
                    barYOffset: 1,
                    msgYOffset: 4,

                    init: @(total){    
                        state.startPos = Console.CursorTop;

                        if (Console.CursorTop >= Console.BufferHeight + msgYOffset + 2) {
                            Console.BufferHeight = Console.CursorTop + msgYOffset + 2;// + 20;
                        }

                        state.progress = new CliProgressBar(total);
                    },

                    writeBar: @{
                        _bp();
                        state.progress.Write();
                    },

                    writeMsg: @{
                        var maxWidth = Console.WindowWidth - 2;

                        if (state.msg.Length > maxWidth) {
                            state.msg = state.msg.Remove(maxWidth - 3) + '...';
                        }

                        Console.SetCursorPosition(
                            Console.WindowWidth / 2 - state.msg.Length / 2 |> Math.Floor,
                            state.startPos + msgYOffset - barYOffset);
                        
                        Console.Write(state.msg);
                        Console.SetCursorPosition(0, state.startPos);
                    },

                    inc: @{
                        _bp();
                        state.progress.IncrementAndWrite();
                    },

                    update: @{
                        if ($args.Count > 0) {
                            lock state {
                                setValue($_);
                                $args.RemoveAt(0);
                                apply(setStatus, $args);
                            }
                        }
                    },

                    setValue: @(value) {
                        state.progress.Value = value.double();
                        writeBar();
                    },

                    setStatus: @{
                        var lastLen = state.msg.Length;                
                        
                        switch ($args.Count) {
                            0: state.msg = '';
                            1: state.msg = $_;
                            default: {
                                var fmt = $_;
                                $args.RemoveAt(0);
                                state.msg = format(fmt, $args);
                            }
                        }

                        if (state.msg.Length < lastLen) {
                            Console.SetCursorPosition(
                                0,
                                state.startPos + msgYOffset - barYOffset);

                            Console.Write(new string(' ', Console.WindowWidth));
                        }

                        writeMsg();
                    },

                    finish: @{
                        Console.SetCursorPosition(0, state.startPos + msgYOffset + 1);
                    }
                };

                p.init(total);
                p.writeBar();
                ret p;
            },
        },
        
        pipeline: {            
            processCore: @(isAsync, func, source) {
                Console.CursorVisible = false;

                try {
                    var curRef = [0.int()] @seq.array(Object);
                    var total = source #!;
                    var result = [];
                    var p = console.progress.create(total.double());
                    
                    var next = @{
                        var cur = Interlocked.Increment.Members[0].Invoke(
                            null,
                            curRef);

                        if (udpateReset.WaitOne(0)) {
                            p.update(
                                cur, 
                                '{0:n0}/{1:n0} ({2:p2})' :: [
                                    cur.int(),
                                    total.int(),
                                    (total != 0 ? (cur / total) : 0).double()
                                ]);
                        }
                    };

                    p.setStatus('Starting task');
                    var udpateReset = new AutoResetEvent(true);
                    // using (var udpateReset = new AutoResetEvent(false)) {
                        async.background(@{
                            while (curRef[0] < total) {
                                async.sleep(10);
                                udpateReset.Set();
                            }
                        });

                        if (!isAsync) {
                            source for {
                                result.add(func($_));
                                next();
                            };
                        } else {
                            result = source @async.select(@{
                                var res = func($_);                                
                                next();
                                ret res;
                            });
                        }

                        next();
                    // }
                    
                    p.finish();
                    
                    ret result;
                } finally {
                    Console.CursorVisible = true;
                }
            },
            process: @(func, source) processCore(false, func, source),
            parallel: @(func, source) processCore(true, func, source),
        },

        getHistory: @(filterSyntaxErrors) this.'$replConsole'
            .GetType().BaseType
            .GetField('_history', BindingFlags.NonPublic | BindingFlags.Instance)
            .GetValue(this.'$replConsole')
            | reverse
            -?<!(@() filterSyntaxErrors defined && filterSyntaxErrors ? 
                $_ | parse != null :
                true)
            ->(@()$_ + 
                ($_
                |>?> parse
                |>?> last
                @() ($_ != null && $_.IsStatement() ? '' : ';'))),

        dumpHistory: @(filterSyntaxErrors)
            filterSyntaxErrors defined ? filterSyntaxErrors : false
            |> getHistory
            -> code,

        color: {
            fg: VT100.Foreground,
            bg: VT100.Background,
            escape: VT100.GetString,
            pair: @(fgColor, bgColor) (fgColor | fg) + (bgColor | bg),
            runs: SyntaxHighlightingFormatter.Highlight,

            // invert = @(c) c->(@(b) (0xff - b).byte()) |> toArray,            
            invert: @(c) c->@+0->(@(b) ~b |> Decimal.GetBits ^! @+0 @&0xff @()$_.byte()) |> toArray,            
            invertText: @(t) {
                _inv = macro(@(n) { t.n = (t.n == null ? [0xff,0xff,0xff] : t.n) | invert });
                _inv(ForegroundRgb);
                _inv(BackgroundRgb);
                ret t
            },
            remove: @(t) t ~: '\\x1b.*?m',
            clearResets: @(t) t.Replace(VT100.Reset, ''),
            strLen: @(s) s | remove @.Length,
            pad: @(s) new string(' ', Math.Max(0, Console.BufferWidth - 1 - (s | console.color.strLen))),
            add: @(v, c) c != null ?
                c->@()$_ != null ?
                    (v > 0 ? Math.Min : Math.Max)(v > 0 ? 0xff : 0x00, $_ + v).byte() :
                    null :
                null,
            lighten: @add(30),
            darken: @add(-30),
            wrapLines: @(maxLineLen, text)
                text
                @console.color.wrapItems(maxLineLen)
                ->@(l)
                    l
                    |> VT100.GetString @> console.color.clearResets
                    |> @+ new string(' ', maxLineLen - (l ->@.Text->@.Length +>@(x,y) x + y)),

            wrapItems: @(maxLineLen, text) {
                var tl = List[ColoredText];
                var lines = new List[tl]();
                var curLen = 0;
                lines.Add(var curLine = new tl());
                
                text | SyntaxHighlightingFormatter.Highlight for (p2) {
                    p2.Text
                        ~:'\r'
                        @()($_.Split('\n')
                            ->@()new ColoredText(
                                p2.ForegroundRgb,
                                p2.BackgroundRgb,
                                $_))
                    @seq.iter(@(p, i) {
                        if (i != 0) {
                            curLen = 0;
                            lines.Add(curLine = new tl());
                        }

                        if ((curLen += p.Text.Length) > maxLineLen) {                
                            while (true) {
                                if (curLen != p.Text.Length) {
                                    lines.Add(curLine = new tl());
                                }
                                
                                if ((curLen = p.Text.Length) > maxLineLen) {                        
                                    new ColoredText(
                                        p.ForegroundRgb,
                                        p.BackgroundRgb,
                                        p.Text.Remove(maxLineLen))
                                    |> curLine.Add;
                                    
                                    p = new ColoredText(
                                        p.ForegroundRgb,
                                        p.BackgroundRgb,
                                        p.Text.Substring(maxLineLen));
                                    
                                    curLen = p.Text.Length;
                                    lines.Add(curLine = new tl());
                                } else {
                                    break;
                                }
                            }
                        }

                        p | curLine.Add;
                    });

                    // if (!split) {
                        
                    // }
                };

                ret lines;
            },

            headerStyle: {
                border: {
                    background: SystemColor.DarkBlue,
                    foreground: SystemColor.AntiqueWhite,
                },

                content: {
                    background: SystemColor.DarkBlue,
                    foreground: null,
                },
            },

            style: {
                tryGetValue: @(isBg, v) v != null ? v | (isBg ? bg : fg) : '',
                
                getValue: @(s)
                    [ s?.background @tryGetValue(true), s?.foreground @tryGetValue(false) ]
                    | string.Concat,
            },

            line: @() ($($args.Count)
                0: console.line(),
                console.line($_.Replace('{R}', VT100.Reset), $args @skip(1))),

            header: @(msg) {        
                var lines = msg @console.color.wrapLines(Console.BufferWidth - 5);
                var hr = new string('═', Console.BufferWidth - 1);
                var headerTop = '╔{0}╗' :: hr.Substring(2);
                var headerBottom = '╚{0}╝' :: hr.Substring(2);
                
                var borderColor = console.color.headerStyle.border | console.color.style.getValue;
                var contentColor = console.color.headerStyle.content | console.color.style.getValue;
                var cl = color.line;

                cl('{0}{1}{R}', borderColor, headerTop);
                lines for (t) cl('{0}║{R}{1} {2}{R}{1} {0}║{R}', borderColor, contentColor, t);
                cl('{0}{1}{R}', borderColor, headerBottom);
            },

            glitch: {
                header: @(msg, headerY) {
                    if (!console.isSafe()) {
                        ret null;
                    }

                    var endY = Console.CursorTop;
                    Console.WriteLine('Press enter to continue...');

                    var sysColors = SystemColor.GetFields()->@.Name;
                    var distinctSysColors = sysColors-&(@()SystemColor.GetField($_).GetValue(null)|hex)->first;
                    var distinctSysColorValues = distinctSysColors->SystemColor.GetField->@()$_.GetValue(null);
                    var colorSets = 
                        [distinctSysColorValues,distinctSysColorValues]
                        | permutations;

                    var b = console.color.headerStyle.border;
                    var c = console.color.headerStyle.content;
                    var msgTmpl2 = msg;
                    var msgTmpl = msgTmpl2.PadRight(Console.BufferWidth - 5, ' ');
                    var msgIndex = 0;
                    msg = msgTmpl;
 
                    _colorLoop = macro(@(ms, block) {                        
                        new AphidFunction(
                            [],
                            [
                                new WhileExpression(
                                    new BooleanExpression(true),
                                    [
                                        new ForEachExpression(
                                            'colorSets'
                                            | ast.id,
                                            block.Body @{
                                                [AphidExpression.IsAssignableFrom(ms.GetType())? ms : new NumberExpression(ms)]
                                                @seq.array(AphidExpression)
                                                |>toList
                                                @ast.call(ast.member('async' | ast.id, 'sleep' | ast.id))
                                                |> $_.Add;
                                                ret $_;
                                            },
                                            null)
                                    ]
                                    @seq.array(AphidExpression)
                                    |>toList)
                            ]
                            @seq.array(AphidExpression)
                            |>toList,
                            this)
                        | async.background;
                    });
                    
                    Console.CursorVisible = false;
                    _colorLoop(50, @{  c.foreground = $_[0]});                    
                    
                    _colorLoop(
                        @{async.rand.Value.Next(0,200)}[0],
                        @{
                            msg = msgTmpl
                                .Remove((var ri = (msgIndex++)%msgTmpl2.Length), 1)
                                .Insert(ri, async.rand.Value.Next(0x20, 0x80).char())
                        });

                    _colorLoop(
                        @{async.rand.Value.Next(0,10)}[0],
                        @{
                            lock Console {
                                Console.SetCursorPosition(
                                    async.rand.Value.Next(0, Console.BufferWidth - 1),
                                    async.rand.Value.Next(0, 3) + headerY);
                                Console.Write(
                                    // (c.foreground | console.color.invert @seq.array(byte) VT100.Foreground) +
                                    // (c.background | console.color.invert @seq.array(byte) VT100.Background) +
                                    (c.foreground | VT100.Foreground) +
                                    (c.background | VT100.Background) +
                                    async.rand.Value.Next(0x20, 0x80).char());
                            }
                        });
                    
                    _colorLoop(10, @{
                        
                        
                        b.foreground = $_[0];
                        lock Console {
                            Console.SetCursorPosition(0, headerY);
                            console.color.header(msg);
                        }
                    });

                    _colorLoop(100, @{ b.background = $_[1]; c.background = $_[1] ; });

                    while (Console.ReadKey(true).Key != ConsoleKey.Enter) {
                    }

                    Console.SetCursorPosition(0, endY);
                    Console.CursorVisible = true;
                    fixColors();
    
                },
            },
        },

        dumpSysColors: @{
            SystemColor
                .GetFields()
                ->@(f)$_
                    .GetValue(null)
                    @(c) format(
                        '{0}{1}{2}{3}{7}{4}{5}{6}{3}',
                        c | VT100.Foreground,
                        c | color.invert | VT100.Background,
                        Console.BufferWidth - 2 |> f.Name.PadRight,
                        VT100.Reset,
                        c | VT100.Background,
                        c | color.invert | VT100.Foreground,                        
                        Console.BufferWidth - 2 |> (f.Name + ' Background').PadRight,
                        Environment.NewLine)
                        |> line;
        },

        stdIn,        
    };

    cls = console.clear;
}();

