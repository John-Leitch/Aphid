//#'debugdeploy';
//this.Keys -> @() new KeyValuePair[string, Object]($_,  this.{$_}.GetType() == AphidObject ? this.{$_} : this.{$_} | ValueHelper.Unwrap)
//this |> Enumerable.ToArray -?(@()$_.Key[0] != '$') ->@() new KeyValuePair[string, Object]($_.Key, $_.Value != null && $_.Value.GetType() == AphidObject ? $_.Value : $_.Value | ValueHelper.Unwrap)
_checkCmdParts = macro(@{
    if (parts == null || ((parts #!) == 0) || parts[0] == null) {
        ret null;
    }
});

_initTrace = macro(@(name) { _initTraceCore(name, var id(trace, name)) });

_initTraceCore = macro(@(name, fullName) {
    fullName = psContext.fullName defined && psContext.fullName ?
        @(fmt) print(
            '{0} Trace: ~Magenta~{1}~R~',
            name,
            $($args.Count)
                0: '[Nothing]',
                1: fmt,
                format(fmt, $args @aq.skip(1))) :
        @() {};
});

var psContext;

var initPSInterop = @{
    var psAsm = load System.Management.Automation;
    using System;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Management.Automation;

    psContext = {
        // tracePS: true,
        // tracePSInterop: true,

        psAsm,
        psCollection: Collection[PSObject],
        engine: PowerShell.Create(),
        
        exec: @(command) {
            engine.AddScript(command);

            try {
                ret engine.Invoke() |> psContext.importPSObject;
            } finally {
                engine.Commands.Clear();
            }
        },

        execSelect: @(command, selector) command |> exec -> selector,
        execWhere: @(command, predicate) command |> exec -? predicate,

        unwrap: @(obj)
            obj != null &&
            obj.GetType() == PSObject ?
                obj.BaseObject :
                obj,

        fastImport: true,

        importPSObject: @(psObj) {
            _initTrace('PSInterop');
            // tracePSInterop('importPSObject checking enumerable');
            
            var t;

            if (psObj == null) {
                tracePSInterop('importPSObject returning null');
                ret null;
            } else if ((t = psObj.GetType()) != PSObject) {
                if (IEnumerable[PSObject].IsAssignableFrom(t) ||
                    IEnumerable[AphidObject].IsAssignableFrom(t)) {
                    tracePSInterop('importPSObject recursing');
                    ret psObj->importPSObject;
                } else {
                    tracePSInterop('importPSObject returning non-PSObject');
                    ret psObj;
                }
            } else if (fastImport) {
                ret psObj.BaseObject defined ? psObj.BaseObject : psObj;
            }

            var o = {
                isPSInterop: true,
                psObject: psObj,
                TypeNames: psObj.TypeNames,
                Properties: psObj.Properties,
                Methods: psObj.Methods,
                Members: psObj.Members,
            };

            _notAccessor = macro(@(n){
                !n.Name.StartsWith('get_') &&
                !n.Name.StartsWith('set_')
            });

            psObj.Properties
                -?(@(p) $(p.Name) 'BaseName', 'VersionInfo': false, _notAccessor(p))
                ->@(p) {
                    try o.{p.Name} = p.Value;
                    catch (e) {
                        tracePSInterop('Error copying {0}: {1}' :: [ p.Name, e.message ]);
                    }
                };

            psObj.Methods
                -?(@(m) _notAccessor(m))
                ->@(m) o.{m.Name} = m.Invoke;

            ret o;
        },

        restorePSObject: @(obj) {
            _initTrace('PSInterop');
            tracePSInterop('Restoring');

            if (obj != null && obj.GetType() == PSObject) {
                tracePSInterop('No action needed');
                ret obj;
            } else if (psContext.isImportedPSObj(obj)) {
                tracePSInterop('Returning psObject property');
                ret obj.psObject;
            } else if (isCollection(obj) &&
                Enumerable.Any(obj) &&
                psContext.isImportedPSObj(obj[0])) {
                tracePSInterop('Recursing');
                ret obj->@.psObject;
            } else {
                tracePSInterop('No action needed 2');
                //print('Is other');
                ret obj;
            }
        },
        
        isImportedPSObj: @(obj)
            obj != null &&
            obj.isPSInterop defined &&
            obj.isPSInterop &&
            obj.psObject defined,
    };

    psContext.isCommandInternal = @(command, isApplication) {
        _initTrace('PS');
        var name = isApplication ? 'application' : 'command';
        command @tracePS('checking for {0}: {1}', name);
        
        var ps = command @format(isApplication ?
            '[bool](Get-Command {0} -CommandType Application -ErrorAction SilentlyContinue)' :
            '[bool](Get-Command {0} -ErrorAction SilentlyContinue)');

        ps @tracePS('Running command to perform check: {0}');
        ps |> psContext.engine.AddScript;
        var r;
        try {
            r = psContext.engine.Invoke();
        } catch {            
            ret false;
        } finally {
            psContext.engine.Commands.Clear();
        }

        r = r.Count > 0 ? r[0].BaseObject : false;
        r @tracePS('Is {0}: {1}', name);

        ret r;
    };

    psContext.isCommand = @(command) psContext.isCommandInternal(command, false);
    psContext.isApplication = @(command) psContext.isCommandInternal(command, true);

    psContext.execPositional = @(parts) {
        _checkCmdParts();
        _initTrace('PS');
        
        var result = {
            parts,
            isItem: false,
            success: true,
            error: null,
        };

        parts[0].GetType() @tracePS('Checking if is command or application: {0} of type {1}', parts[0]);
        
        // if (parts[0] |> psContext.isApplication) {
        if ((parts[0] |> psContext.isApplication) ||
            (parts[0] |> psContext.isCommand)) {
            
            
            tracePS('Preparing application {0}', parts[0]);
            result.isCommand = true;
            // result.isApplication = true;

            var applicationCommand = parts
                ->psContext.restorePSObject
                ->(@() !string.IsNullOrEmpty($_) && $_.ToString().Contains(' ') ?
                    format('"{0}"', $_.Replace('"', '`"')) :
                    $_)
                +> @(x, y) x + ' ' + y;

            tracePS('Executing application command {0}', applicationCommand);

            result.obj =
                applicationCommand
                |> psContext.pipe;
                //|> psContext.importPSObject;

        } else if (parts[0] |> psContext.isCommand) {
            tracePS('Executing command {0}', parts[0]);
            result.isCommand = true;
            result.isApplication = false;
            
            result.obj =
                (parts @aq.skip(1) ->psContext.restorePSObject)
                @psContext.pipe(parts[0])
                |> psContext.importPSObject;

            // parts[0] |> psContext.engine.AddCommand;
            // parts @aq.skip(1) ->psContext.restorePSObject->psContext.engine.AddArgument;
            // tracePS('Invoking PS');
            // result.obj = psContext.engine.Invoke();
            // tracePS('Clearing command');
            // psContext.engine.Commands.Clear();
        } else {
            if ((parts #!) > 1) {
                result.error = 'Unknown command';
                tracePS(result.error);
                //result.error = format('Unknown command');
                result.obj = null;
                result.success = false;

                ret result;
            }
            
            tracePS('Getting PS item {0}', parts[0]);
            result.obj = parts[0] |> psContext.getItem;

            if ((result.obj #!) != 0) {
                result.isItem = true;
            } else {
                result.isItem = false;
                result.obj = null;
                result.error = 'Unknown command';
                result.success = false;
            }
            

            if ((result.obj |> isCollection) &&
                (result.obj #!) == 1) {
                tracePS('Unwrapping PS item');
                result.obj = result.obj[0];
            }
        }

        // tracePS('Done executing command: {0}', result |> serialize);

        ret result;
    };

    psContext.getItem = @(path) {
        _initTrace('PS');
        var r;

        try {
            tracePS('Invoking Get-Item {0}'  :: [ path ]);
            'Get-Item' |> psContext.engine.AddCommand;
            path |> psContext.engine.AddArgument;
            r = psContext.engine.Invoke();
            // tracePS('Get-Item result: {0}' :: [ r |> serialize ]);
        } catch (e) {
            // tracePS('Get-Item failed: {0}' :: [ e.message ]);
            r = null;
        } finally {
            psContext.engine.Commands.Clear();
        }        

        ret r;
    };

    psContext.execNamed = @(command, params) {
        if (command == null) {
            ret null;
        }

        command |> psContext.engine.AddCommand;
        params |> keys -> @(n) psContext.engine.AddParameter(n, params.{n});

        try {
            ret psContext.engine.Invoke();
        } finally {
            psContext.engine.Commands.Clear();
        }

        ret r;
    };

    psContext.outString = @(obj) {
        _initTrace('PS');
        // tracePS('Dumping result via Out-String ({0})' :: [ obj |> serialize ]);
        
        //if (obj != null && obj.GetType() == AphidObject) {
        if (obj != null && isCollection(obj)) {
            obj = obj->aphid.ValueHelper.Unwrap;
            //using System.Collections.Generic;
//
            //obj = obj.Keys->@() new KeyValuePair[string, string](
                //$_,
                //@{
                    //try ret obj.{$_}.ToString();
                    //catch ret '';
                //}());
        }

        ret { InputObject: obj } @psContext.psContext.execNamed('Out-String') |> aq.first;
    };

    psContext.pipe = @(script, pipelineInput) {
        using (var p = psContext.engine.Runspace.CreatePipeline()) {
            var checkedOutput = false;
            var writeAsync = false;
            var handler = @(o, e) {
                try {
                    if (!checkedOutput) {
                        if (o.Count == 0) {
                            ret null;
                        } else {
                            var pso;

                            writeAsync = (pso = o.Peek()) != null &&
                                pso.BaseObject != null &&
                                pso.BaseObject.GetType() == string;

                            checkedOutput = true;
                        }
                    } else if (writeAsync) {
                        o.NonBlockingRead()
                            ->@.BaseObject
                            ->Cli.StyleEscape
                            ->@+ '\r\n'
                            ->shell.out;
                    }
                } catch (e) {
                    e |> serialize |> Cli.StyleEscape |> shell.out;
                }
            };

            p.Output.add_DataReady(handler);
            p.Error.add_DataReady(handler);

            if (pipelineInput defined) {
                p.Input.Write(pipelineInput);
                p.Commands.Add(script);
            } else {
                p.Commands.AddScript(script);
            }
            
            try {
                ret p.Invoke();
            } finally {
                p.Commands.Clear();
            }
            //ret pipelineInput defined ? p.Invoke(pipelineInput) : p.Invoke();
        }
    };

    psContext.pipeDump = @(script, pipelineInput) {
        var result = pipelineInput defined ?
            psContext.pipe(script, pipelineInput) :
            psContext.pipe(script);

        if ((result #!) > 0) {
            result |> shell.dumpObject |> shell.out;
        }
    };

    _mn = macro(@(m){ ((methods = (m-?@(x) x.Name == name)) #!) != 0 });

    _clrMethod = macro(@(obj) {
        if (obj != null &&
            method = (obj.GetType().GetMethod(name, argTypes)) != null) {
            ret method.Invoke(obj, $args @aq.skip(1));
        }
    });

    psContext.gridView = {
        invoke = @(values, enumerate) {
            using (var pipe = psContext.engine.Runspace.CreatePipeline()) {
                pipe.Commands.Add('Out-GridView');
                if (enumerate defined && enumerate) {
                    pipe.Input.Write(values, true);
                } else  {
                    values->pipe.Input.Write;
                }

                pipe.Invoke() 
            }
        }
    };
    
    psContext.toNotes = @(src) src.Keys-?(@()$_.Length > 0 && $_[0]!='$')->@(k) new PSNoteProperty($_, src[$_]);
    
    psContext.toPso = @(src) {
        var o = new PSObject();
        src | toNotes -> o.Properties.Add;
        ret o
    };

    extend PSObject {
        dynamic funcHandler:@(psObj, name) {
            var method;
            var methods;
            var args = $args @aq.skip(1);
            var argTypes = args ->@() $_.GetType();

            _clrMethod(psObj.BaseObject);

            if (_mn(psObj.BaseObject.GetType().GetMethods())) {
                ret methods[0].Invoke($args @aq.skip(1)) |> psContext.importPSObject;
            }

            _clrMethod(psObj.BaseObject.ToString());

            fatal('Could not find PowerShell object method with name "{0}".' :: [ name ]);
        },

        toAphidObject: psContext.importPSObject,
    }
};

testPSInterop = macro(@{
    if (!getCommand().EndsWith('PowerShell.alx')) {
        ret null;
    }

    cls();
    var h = @(c) head('Testing PowerShell Script "{0}"' :: [ c ]);
    
    var psExp = 'dir';
    h(psExp);

    using System.IO;

    psExp
        |> psContext.exec
        -?(@(x) x.GetFiles defined)
        ->@(o) o.GetFiles('*Library*', SearchOption.AllDirectories) |> print;

    print();
    psExp = 'dir | Format-Table | Out-String';
    h(psExp);
    psExp |> psContext.exec ->(@()$_.ToString()) -> print;//.ToString() |> print;
});

initPSInterop();
