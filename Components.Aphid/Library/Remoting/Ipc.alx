var ipc;

@{
    #'Remoting\\RemoteProxy';
    using Components;
    using Components.External;
    using System;
    using System.Diagnostics;
    using System.Linq;
    using System.Runtime.Remoting;
    using System.Runtime.Remoting.Channels;
    using System.Runtime.Remoting.Channels.Ipc;
    using System.Runtime.Remoting.Messaging;
    using System.Security.Permissions;
    using System.Threading;
    load System.Runtime.Remoting;
    load mscorlib;

    _initTrace = macro(@{
        var trace = ipc.trace ? print : @{ };
        var traceInfo = ipc.trace ? printInfo : @{ };
        var traceSuccess = ipc.trace ? printSuccess : @{ };
        var traceQuery = ipc.trace ? printQuery : @{ };
    });

    ipc = {
        trace: true,
        listen: @(uri) {
            _initTrace();
            var u = $args.Count > 0 ? uri : "localhost:9090";
            traceInfo('Starting IPC Channel on {0}', u);
            
            var serverChannel = new IpcChannel(u);
            ChannelServices.RegisterChannel(serverChannel);
            traceSuccess('Channel name: {0}', serverChannel.ChannelName);
            traceSuccess('Channel priority: {0}', serverChannel.ChannelPriority);

            var channelData = serverChannel.ChannelData;
            channelData.ChannelUris->@format('The channel URI is {0}');
            var aphid = this.{'$aphid'};

            RemotingConfiguration.RegisterWellKnownServiceType(
                aphid.GetIpcContextType(),
                "RemoteObject.rem", 
                WellKnownObjectMode.Singleton);

            var urls = serverChannel.GetUrlsForUri("RemoteObject.rem");
            trace(urls);
            aphid.RegisterIpcServer();
        },

        isRegistered: false,
        clientChannel: null,
        aphid: null,
        
        // Todo: add host, port, and obj args
        connect: @() {
            _initTrace();

            if (!isRegistered) {
                traceInfo('Starting IPC client');
                clientChannel = new IpcChannel();
                traceInfo('Registering channel');
                ChannelServices.RegisterChannel(clientChannel);
                traceInfo('Registering remote type');
                aphid = this.{'$aphid'};
            }

            var remoteType = new WellKnownClientTypeEntry(
                aphid.GetIpcContextType(),
                "ipc://localhost:9090/RemoteObject.rem");
        
            RemotingConfiguration.RegisterWellKnownClientType(remoteType);
            remoteType |> trace;

            var messageSink = clientChannel.CreateMessageSink(
                "ipc://localhost:9090/RemoteObject.rem",
                null,
                null);

            messageSink |> trace;
            var ipcContext = aphid.CreateIpcClientContext();

            ret ipcContext;
        },

        proxy: @{
            var proxy = new RemoteProxy();
            var ctx = ipc.connect();
            proxy.Eval = ctx.Eval;

            ret proxy;
        },
    };

    ipc.test = @{
        var argList = Environment.GetCommandLineArgs() |> Enumerable.ToList;
        head('IPC Channel Test');

        if (!argList.Contains('-client')) {
            _initTrace();

            ipc.listen();

            #'Core\\Threading';
            var exe = 'c:\\source\\aphid\\aphid\\bin\\release64\\Aphid64.exe';
            var script = 'C:\\source\\aphid\\Components.Aphid\\Library\\Remoting\\Ipc.alx';

            var args = format(
                '/k {0} {1} -client',
                exe,
                script);
                //getExe(),
                //getCommandLineArgs()[1]);

            traceQuery('Starting client process with args ~Cyan~{0}~R~', args);
            var proc = Process.Start('cmd', args);
            traceInfo('Waiting for process to exit');
            proc.WaitForExit();
            traceSuccess('Process has exited');
            // Console.ReadLine();


        } else {
            try {

                var proxy = ipc.proxy();
                proxy.trace('Trace test');
                // ipc.p = proxy;
                // repl.run();
                //ctx.Eval('trace("Hello world")');
                // Thread.Sleep(1500);
            } catch (e) {
                print(e.message);
                print(e.exception);
                // Console.ReadLine();
            } finally {
                // Console.ReadLine();
                // repl();
            }
            
            // Console.ReadLine();
        }
    };
}();
// #'std';
// ipc.test();