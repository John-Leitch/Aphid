// ##'Components.Aphid.Library.IOLibrary';
using System.IO;
using System.Linq;
using System.Reflection;
// var getFsos = @(f, dir, opt) {
//     var filter = '*';
//     var recurse = false;

//     if (opt defined) {
//         if (opt.filter defined) filter = opt.filter;
//         if (opt.recurse defined) recurse = opt.recurse;
//     }

//     ret f(dir, filter, recurse);
// };

// io.dir.getFiles = @getFsos(io.dir.getFilesInternal);
// io.dir.getDirs = @getFsos(io.dir.getDirsInternal);

@ \ (lhs, rhs) lhs @io.end(rhs);
@ .\ (path) path | io.full;

_d = macro(@(f) { Directory.f });
_f = macro(@(f) { File.f });
_p = macro(@(f) { Path.f });
_c = macro(@{ _p(Combine)(lhs, rhs) });
_h = macro(@(f) { pathHelper.f });
_ob = macro(@(o) { _d(EnumerateFiles)(path, pattern defined ? pattern : '*', SearchOption.o) });
@ .* (path, pattern) _ob(TopDirectoryOnly);
@ :* (path, pattern) _ob(AllDirectories);
_ea = macro(@(n, d, p) { _d(id(Enumerate, n))(d, p, SearchOption.AllDirectories) });
_af = macro(@(d, p) { _ea(Files, d, p) });
_ad = macro(@(d, p) { _ea(Directories, d, p) });

_f2 = macro(@(o) {
    @(path, output) output defined ?
        _f(id(WriteAll, o))(path, output) :
        _f(id(ReadAll, o))(path)
});

var io = {
    // pathHelper: Type.GetType('Components.External.PathHelper'),
    dir: _d(Exists),
    file: _f(Exists),
    not: { dir: _d(Exists) @> @== false, file: _f(Exists) @> @== false },
    no: not,
    missing: not,
    parent: _p(GetDirectoryName),
    up: parent,
    name: _p(GetFileName),
    base: _p(GetFileNameWithoutExtension),
    full: _p(GetFullPath),
    attrs: _f(GetAttributes),
    
    append: @(rhs, lhs) _c(),
    suffix: append,
    tail: append,
    end: append,

    pre: @(lhs, rhs) _c(),
    prefix: pre,
    prepend: pre,
    head: pre,
    start: pre,

    concat: _p(Combine),
    join: concat,

    cd: @(path) path defined ? _d(SetCurrentDirectory)(path) : _d(GetCurrentDirectory)(),

    files: @()
        ($($args.Count)
            0: _d(EnumerateFiles)('.'),
            1: _d(EnumerateFiles)($_),
            2: _d(EnumerateFiles)($_, $args[1]),
            3: _d(EnumerateFiles)($_, $args[1], $args[2]),
            ex.args()),

    dirs: @()
        ($($args.Count)
            0: _d(EnumerateDirectories)('.'),
            1: _d(EnumerateDirectories)($_),
            2: _d(EnumerateDirectories)($_, $args[1]),
            3: _d(EnumerateDirectories)($_, $args[1], $args[2]),
            ex.args()),

    all: {
        files: @() ($($args.Count)
            0: _af('.', '*'),
            1: _af($_, '*'),
            2: _af($_, $args[1]),
            throw new ArgumentException('io.all.files() expects one to three arguments')),
        dirs: @() ($($args.Count)
            0: _ad('.', '*'),
            1: _ad($_, '*'),
            2: _ad($_, $args[1]),
            throw new ArgumentException('io.all.dirs() expects one to three arguments')),
    },

    find: {
        files: @(pattern, path)
            ($($args.Count)
                0: _af('.', '*'),
                1: _af('.', $_),
                2: _af($args[1], $_),
                throw new ArgumentException('io.find.files() expects one to three arguments')),
        dirs: @(pattern, path)
            ($($args.Count)
                0: _ad('.', '*'),
                1: _ad('.', $_),
                2: _ad($args[1], $_),
                throw new ArgumentException('io.find.dirs() expects one to three arguments')),
        file: @(pattern, path)
            ($($args.Count)
                0: _af('.', '*'),
                1: _af('.', $_),
                2: _af($args[1], $_),
                throw new ArgumentException('io.find.files() expects one to three arguments'))
                |> Enumerable.Single,
        dir: @(pattern, path)
            ($($args.Count)
                0: _ad('.', '*'),
                1: _ad('.', $_),
                2: _ad($args[1], $_),
                throw new ArgumentException('io.find.dirs() expects one to three arguments'))
                |> Enumerable.Single,
    },

    first: {
        file: @(pattern, path)
            ($($args.Count)
                0: _af('.', '*'),
                1: _af('.', $_),
                2: _af($args[1], $_),
                throw new ArgumentException('io.find.file() expects zero to two arguments'))
                |> Enumerable.FirstOrDefault,

        dir: @(pattern, path)
            ($($args.Count)
                0: _ad('.', '*'),
                1: _ad('.', $_),
                2: _ad($args[1], $_),
                throw new ArgumentException('io.find.dir() expects zero to two arguments'))
                |> Enumerable.FirstOrDefault,
    },

    app: {
        asm: @(x) 
            ((var a = Assembly.GetEntryAssembly()) != null) ? a :
            ((a = Assembly.GetExecutingAssembly()) != null) ? a :
            ex.arg(x),
        bin: asm @> @.Location,
        dir: bin @> up,
        path: join @> @head(dir()),
        files: @all.files(dir()),
    },

    script: {
        location: @() this.'$script' defined ? (this.'$script') : app.bin(),
        dir: location @> up,
        path: join @> @head(dir()),
        files: dir @> files,
        dirs: dir @> dirs,
        all: { files: dir @> all.files, dirs: dir @> all.dirs },
        find: {
            files: @(pattern) io.find.files(pattern, dir()),
            dirs: @(pattern) dir() @io.find.dirs(pattern),
            file: @(pattern) dir() @io.find.file(pattern),
            dir: @(pattern) dir() @io.find.dir(pattern)
        },
        first: {
            file: @(pattern) dir() @io.first.file(pattern),
            dir: @(pattern) dir() @io.first.dir(pattern)
        },
    },
    
    bytes: _f2(Bytes),
    lines: _f2(Lines),
    text: _f2(Text),
    txt: text,

    out: {
        bytes: _f(WriteAllBytes),
        lines: _f(WriteAllLines),
        text: _f(WriteAllText),
        txt: text,
        append: {
            
            text: _f(AppendAllText),
            txt: text,
            line: @(line, file) text(line + '\r\n', file),
            lines: _f(AppendAllLines), 
        },
    },

    add: out.append,
    mkdir: _d(CreateDirectory),
    del: _f(Delete),
    rd: _d(Delete),
    len: @() (new FileInfo($_)).Length,
    size: len,

    ext: @(pathOrExt, newExt)
        pathOrExt defined ?
            newExt defined ?
                _p(ChangeExtension)(newExt, pathOrExt) :
                _p(GetExtension)(pathOrExt) :
            throw new ArgumentException('Function io.ext() expects one or two arguments'),

    sibling: @(name, path) path | up @end(name),
    tmp: _p(GetTempPath),
    rnd: _p(GetTempFileName),
    copy: _f(Copy),
    cp: copy,
    move: _f(Move),
    mov: move,
    mv: move,

    created: _f(GetCreationTime),
    date: created,

    accessed: _f(GetLastAccessTime),
    last: accessed,

    modified: _f(GetLastWriteTime),
    touched: modified,

    drives: _d(GetLogicalDrives),

    local: @(f) new Uri(f) @.IsFile,
    remote: @(f) !local(f),

    open: {
        create: _f(Create),
        read: _f(OpenRead),
        write: _f(OpenWrite),
        share: @(path) _f(Open)(
            path,
            FileMode.OpenOrCreate,
            FileAccess.ReadWrite,
            FileShare.ReadWrite),
        
        append: _f(AppendText),
    },

    dump: @(paths) {
        #'Data/Trees';
        paths->(@()$_.Split('\\/')) |> stringTree.fromArrays |> Console.WriteLine
    },

    // entry: @() $args.Count == 0 ? _h(GetEntryDirectory)() : _h(GetEntryPath)($args),
    // executing: @() $args.Count == 0 ? _h(GetExecutingDirectory)() : _h(GetExecutingyPath)($args),

    entropy: @(file) {
        var counts = Array.CreateInstance(ulong, 0x100);
        var len;

        using (var reader = new BinaryReader(file | io.open.read)) {
            if ((len = reader.BaseStream.Length) == 0) {
                ret 1.0;
            }

            var buf;
            while ((buf = reader.ReadBytes(0x1000000)).Length != 0) {
                buf-&(@()$_) for counts[$_.Key] += $_#!;
                // buf for counts[$_] += 1;
            }
        }
        
        ret counts-?@!=0->@/ len->(@(x) Math.Log(x) / Math.Log(2) * x)+>(@(x, y) x + y)@* -1;
    },
};

var isDir = io.dir;
var isFile = io.file;
var dirExists = io.dir;
var fileExists = io.file;