var seq;

@{
    using System.Collections.Generic;

    _ie = macro(@(x) { x.GetType().GetInterface(IEnumerable) != null });
    _ia = macro(@(i){ i.IsAssignableFrom(t) });

    seq = {
        count: @(source)
            (var t = source.GetType()).IsArray ? source.Length :
                _ia(ICollection) ? source.Count :
                _ia(IEnumerable) ? source#! :
                source,

        inc: @(source, start) (start defined ? start : 0)..(source | count),
        range: @(source, start) start defined ? start..((source | count) - start) : 0..(source | count),
        from: @(source) source | range | reverse,    
        rep: @(count, source) count | range -> @() source,

        each: @(func, source) {
            source | range for (x) func(source[x], x);
            ret source;
        },
        
        untilTrue: @(predicate) {
            var l = new List[Decimal]();
            var i = 0;        
            while (!predicate(i)) l.Add(i++);
            ret l;
        },

        whileTrue: @(predicate) {
            var l = new List[Decimal]();
            var i = 0;        
            while (predicate(i)) l.Add(i++);
            ret l;
        },

        iter: @(func, source) {
            var i = 0;
            ret source->@(x) func(x, i++);
        },

        whileFalse: untilTrue,
        untilFalse: whileTrue,
        until: untilTrue,
        when: whileTrue,
        whenNot: whileFalse,
        
        init: @(func, source) source | range -> func,

        array: @(type, source) {
            var a = source | count @Array.CreateInstance(type);
            source @iter(@(x, i) a.Set(i, x));

            ret a;
        },
        // fanReduce = @(set) set |> seq.range-< @(i) set |> toList @{ $_.RemoveAt(i); ret $_.Count > 1 ? $_ |> fanReduce : [$_] })<| (1..10) |> dump }()
        
        bind: @() {
            // Todo: support beyond partial application
            var map =
                frame(0)
                .Expression
                .FunctionExpression
                .Call
                .Args
                -.Identifier
                @seq.array(string);

            var source = $args$!;
            var bound = [];

            source for (x) {
                var o = {};
                _r = macro(@{ o.'$remaining' });
                _p = macro(@(v){ o[q.Dequeue()] = v });
                _c = macro(@{ q.Count > 0 });
                _r() = [];
                var q = new Queue[string](map);                
                x for (y) _c() ? _p(y) : _r().add(y);

                while (_c()) {
                    _p(null);
                }

                bound.add(o);
            };

            ret bound;
        },
    }
}();