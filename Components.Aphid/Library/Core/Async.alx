var async;
var when;
var wait;

@{
    using System.Threading.Tasks;
    _p = macro(@(n){ Parallel.n });
    _pf = macro(@{ _p(For) });
    _pe = macro(@{ _p(ForEach) });
    _f = macro(@(s, b) { opts == null ? _pe()(s, b) : _pe()(s, opts, b) });
    _r = macro(@(f, t, b) { opts == null ? _pf()(f, t, b) : _pf()(f, t, opts, b) });

    _select = macro(@(p) {
        @(predicate, source) {
            var result = [];
            _f(
                source,
                @{
                    var x = predicate($_);
                    lock result p;
                });

            ret result
        }
    });

    _thread = macro(@(_i){
        @(action, state) {
            var t = new Thread(action);
            _i;
            
            if (state defined) {
                t.Start(state);
            } else {
                t.Start();
            }

            ret t;
        }
    });
    
    _e = macro(@{});

    async = {
        opts: null,
        degree: @(degrees) opts = new ParallelOptions() @() { $_.MaxDegreeOfParallelism = degrees; ret $_ },
        select: _select(result.add(x)),        
        selectMany: _select(x->result.add),
        forEach: @(body, source) {
            _f(source, body);

            ret source;
        },        
        range: @(from, to, body) { _r(from, to, body) },
        to: @(to, body) { _r(0, to, body) },
        map: select,
        many: selectMany,
        reduce: selectMany,
        each: forEach,
        iter: forEach,
        run: @(action) Task.Factory.StartNew(action),
        task: run,
        action: run,
        long: @(action) Task.Factory.StartNew(action, TaskCreationOptions.LongRunning),
        delay: Task.Delay,
        pool: ThreadPool.QueueUserWorkItem,
        sleep: Thread.Sleep,
        thread: _thread(_e()),
        background: _thread(t.IsBackground = true),
        staThread: _thread(t.SetApartmentState(ApartmentState.STA)),
        then: @(action, task) task.ContinueWith(action),
        fatal: @(task) {
            task
                .GetAwaiter()
                .OnCompleted(@{
                    if (task.IsFaulted)  {
                        throw $((var e = t.Exception).InnerExceptions#!) 1: e.InnerExceptions$!, e;
                    }
                });

            ret task;
        },
    };

    _wo(when, When);
    _wo(wait, Wait);

    _wo = macro(@(v, p) {
        v = { all: _wm(id(p, All)), any: _wm(id(p, Any)) };
    });

    _wm = macro (@(n) {
        // Todo: fix wait -> void issue.
        @(tasks, continuation) continuation defined ?
            Task.n(tasks).ContinueWith(continuation) :
            Task.n(tasks)
    });

    // when = { all: _w(WhenAll), any: _w(WhenAny), };
    // wait = { all: Task.WaitAll, any: Task.WaitAny, };
}();