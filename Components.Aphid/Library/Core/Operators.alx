using System.IO;
using System.Text.RegularExpressions;

// Todo: move ops and other common funcs to core header,
// autoload using INI setting.

@ :: (fmt, args) string.Format(fmt, args);
@ :> (fmt, args) args defined ? fmt :: args : fmt |> print;
@ ?: (string, defaultValue) !String.IsNullOrEmpty(string) ? string : defaultValue;
@ ?| (func, defaultValue) { try ret func(); catch ret defaultValue };
@ ?> (func, defaultValue) @{ try ret func($_); catch ret defaultValue };
@ ?? (value, defaultValue) value != null ? value : defaultValue;
@ <! (func) func ?> false;

_anySource = macro(@{ source != null && Enumerable.Any(source) });

@ +? (source, func) $($args.Count)
    1: (_anySource()),
    (_anySource() ? func(source) : null);

@ ^| (source, defaultValue) { try ret source ^!; catch ret defaultValue };
@ <! (source, func) $args.Count == 2 ? (source -? (<! func)) : source ?> false;

@ |< (source, func) {
    func(source);
    
    ret source;
};

@ -+ (source, delim) source +> @(x, y) x + delim + y;
@ -| (source, predicate) { _queryBody(Enumerable.Single) };
@ -! (source, predicate) { _queryBody(Enumerable.Any @> @== false) };

@ -% (source, action) {
    for(source) action($_);

    ret source;
};

_queryBody = macro(@(filter){
    using System.Linq;
    ret (source -? predicate |> filter);
});

@ ~= (input, pattern) _re(IsMatch);
@ ~~ (input, pattern) _re(Matches) @(m) 0..(m #!)->@()m[$_];
@ ~: (input, replace) $(replace.GetType()) String: _sub(replace, ''), _sub(replace[0], replace[1]);
@ ~? (input, pattern) _rec();
@ ~| (input, pattern) Enumerable.Single(_rec());
@ <- (selector, source) source -> selector;
@ ?- (selector, source) source -? selector;
@ <| (target, arg) target(arg);
@ <@ (f1, f2) f2 @> f1;
@ &\ (file) _in(ReadAllBytes);
@ |\ (file) _in(ReadAllText);
@ \| (text, file) text.ToString() @File.WriteAllText(file.ToString());
@ \& (buffer, file) buffer @File.WriteAllBytes(file.ToString());

@\ (lhs, rhs) {
    var s = frame().Scope;
    var args = s.{'$args'};
    var i = s.argIndex defined ? s.argIndex++ : s.argIndex = 1;

    ret $args.Count < i ? lhs : lhs && rhs;
    
};

_rhs = macro(@{ frame(0).Expression.RightOperand });
@ ?. (lhs, rhs) lhs != null ? lhs.{_rhs().Identifier} : null;

//_poe = macro(@{
    //var a = this.{'$aphid'};
//
    //if (a != null) Console.WriteLine('{0}, {1}', a.OwnerThread, Thread.CurrentThread.ManagedThreadId);
    //if (a.OwnerThread != Thread.CurrentThread.ManagedThreadId) throw new InvalidOperationException('Thread mismatch');
    //var f = new PartialOperatorExpression(getToken('.'), _rhs()) |> this.{'$aphid'}.Interpret;
//});

//_poe = macro(@{
    //var a = aphidLocal.Value;
    //a |> print;
    //var f = new PartialOperatorExpression(getToken('.'), _rhs()) |> a.Interpret;
//});

_poe = macro(@{ var f = new PartialOperatorExpression(getToken('.'), _rhs()) |> this.{'$aphid'}.Interpret });

@ -. (lhs, rhs) {
    _poe();
    
    ret lhs->f
};

@ %. (lhs, rhs) {
    _poe();
    lhs->@{ f($_)() };

    ret lhs;
};

@ !! (condition, fatalMessage) {
    if (condition) {
        printCriticalError(fatalMessage); Environment.Exit(0xbad02)
    }
};

@`(depth, num)
    (var exp = frame(depth).Expression).Type == AphidExpressionType.CallExpression ?
        exp.Args[num].Identifier :
    exp.Type == AphidExpressionType.BinaryOperatorExpression ?
        ($(exp.Operator)
            AphidTokenType.BinaryOrOperator, AphidTokenType.PipelineOperator:
                (num == 0 ? exp.LeftOperand.Identifier : ex.arg(num)),
            AphidTokenType.CustomOperator234: /*getToken('<|')*/              
                (num == 0 ? exp.RightOperand.Identifier : ex.arg(num))) :
        ex.arg(num);

var defaultRegexOptions = RegexOptions.IgnoreCase | RegexOptions.Compiled;
_sub = macro(@(pattern, replacement) { Regex.Replace(input.ToString(), pattern, replacement, defaultRegexOptions) });
_re = macro(@(f) { Regex.f(input.ToString(), pattern.ToString(), defaultRegexOptions) });
_rec = macro(@{ input -? @() $_ ~= pattern });
_in = macro(@(f) { File.f(file.ToString()) });