using Components.Aphid.Interpreter;
using System.Threading;

_aphid = macro(@{ this.{'$aphid'} defined ? this.{'$aphid'} : null });
var aphid = _aphid();
//var aphidLocal = new ThreadLocal[AphidInterpreter](@() _aphid());
var getBlock = @() this.{'$parent'}.{'$block'};

var ex = {
    arg: @(param) {
        var pn = 1`0;
        var st = this.{'$aphid'}.GetStackTrace();
        var fr = st[1];
        var msg = (pn != null ?
            'Invalid argument passed as {0} to {1}' :
            'Invalid argument passed to {1}') ::
            [ pn, fr.Name ];
        
        if (fr.Expression != null) {
            msg += ' in expression ' + fr.Expression;
        }

        if (pn != null && st[0].Scope[pn] defined) {
            msg += ': ' + st[0].Scope[pn];
        }
        
        throw new ArgumentException(msg)
    },
};

// var aphidExeNames = ;

var parseArgsFor = @{
    var la = $args;
    var q = getArgQueue();

    ([
        '',
        '32',
        '64',
        '.debug',
        '32.debug',
        '64.debug',
        '.binarytrace',
        '.binarytrace32',
        '.binarytrace64',
        'ui',
        '-debug'
    ]
    ->@format('aphid{0}')
    -<(@() [ $_, $_ + 'portable' ])
    -<(@() [ $_, $_ + '.exe' ]))
    |> q.matchPath;

    if (this.{'$script'} defined) {
        (['.alx', '.exe', '' ]
            ->@(e) this.{'$script'}
                | Path.GetFileNameWithoutExtension
                @()format('{0}{1}', $_, e).ToLower())
        |> q.matchPath
    }
    
    la | q.matchPath;
    
    ret q.args;
};

var getArgQueue = @{
    var args = new Queue[ArgToken](Environment.CommandLine |> ArgLexer.GetTokenInfo);
    
    var v = @() args.Count > 0 ? args.Peek().Value : null;
    var matchPath = @{
        //args | dump;
        var argPath = (@() v().ToLower() |> Path.GetFileName) ?| null;
        //print (argPath);
        // { args: $args, argPath  }| dump;
        
        if ($args =? @(p) p =? @== argPath) {
            //head('Matched');
            //args | dump;
            args.Dequeue();
            //args | dump;
            //head('End matched');
            
            ret true;
        } else {
            ret false;
        }
    };

    
    ret { args, matchPath };
};

_ev = macro(@(n) { __ev(n, '') });
_evs = macro(@(n) { __ev(n, 's') });
__ev = macro(@(p, s) { __ev2(id(p, EnvironmentVariable, s)) });
__ev2 = macro(@(n){ Environment.n });

var env = {
    expand: _evs(Expand),
    get: _ev(Get),
    set: _ev(Set),
    vars: _evs(Get),
    __test: @{%>
        #'Testing\\AopTest';        
        
        _te = macro(@(n, p) {
            expand group;
            isTrue; @{ ('%{0}%' :: n) | env.expand ~= p };
            isFalse; @{ n | env.expand ~= p };

            get group;
            isTrue;
            @{ n | env.get ~= p };
            @{ 'BadFake' | env.get == null };
            
            isFalse;
            @{ ('BadFake' | env.get) ?? 'BadFake' ~= p };

            vars group;
            isTrue; @{ env.vars() =?@()$_.Key.ToLower() == n.ToLower() };
            isFalse; @{ !(env.vars() =?@()$_.Key.ToLower() == n.ToLower()) };
        });

        _te('SystemDrive', '^[a-zA-Z]:$');
        _te('WinDir', '^[a-zA-Z]:(\\\\[a-zA-Z0-9]+)*$');        
    <%}
};