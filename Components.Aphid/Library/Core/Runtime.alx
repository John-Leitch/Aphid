var runtime;

_trace = macro(@(handlerName) {
    @{
        var state = this.'$aphid' | this.'$internal'.initTrace;
        
        state.aphid.handlerName = @(x) {
            var o = options;

            if ((o.typeFilter != null && x.Expression.Type != o.typeFilter) ||
                (o.predicate != null && !o.predicate(x))) {
                ret null;
            }

            var sb = state.out;
            var hl = state.highlight;                    
            var file = x.Expression.Context.Filename;
            var index = x.Expression.Index;
            sb.Clear();
            sb.Append('[');

            if (o.showFilename)
            {
                if (file != null)
                {
                    sb.Append(file);
                }
                else
                {
                    sb.Append('$No File');
                }
            }

            if (o.calculatePosition && file != null)
            {
                var pos = state.posMemoizer.Call(
                    @(t) state.getPos(state.readScript(t.Item1), t.Item2),
                    new Tuple[string, int](file, index));                        

                if (pos != null) {
                    sb.AppendFormat(', line {0:n0}, column {1:n0}', pos.Item1, pos.Item2);
                } else {
                    sb.AppendFormat(', line {0}, column {0}', 'Error calculating position, unknown');
                }
            }

            if (o.showOffset)
            {
                sb.AppendFormat(', offset {0:n0}', index);
            }

            if (o.syntaxHighlighting)
            {
                sb.AppendFormat(
                    ']\r\n{0}\r\n',
                    hl(x.Expression));
            }
            else
            {
                sb.AppendFormat(
                    ']\r\n{0}\r\n',
                    x.Expression);
            }

            Console.WriteLine(sb);

            if (o.dumpScope && state.hasHashChanged())
            {
                Console.WriteLine(hl(state.serialize(state.scope)));
            }
        }
    }
});

@{
    var lookupArgs = new ThreadLocal[Object.MakeArrayType()](@() 
        [ null, null ]
        @seq.array(Object));

    var get = @(key, def, dict)
        ($(def.GetType())
            RuntimeType, Type: getOrNew,
            getOrCreate)(key, def, dict);

    var getOrNew = @(key, type, dict) getOrCreate(key, @() new type(), dict);

    var getOrCreate = @(key, create, dict) {
        var args = lookupArgs.Value;
        args.Set(0, key);
        
        if (!dict.TryGetValue.Members[0].Invoke(dict, args)) {
            dict.Add(key, var result = create());
            ret result;
        } else {
            ret args[1];
        }
    };

    runtime = {
        '$internal': {
            initTrace: @(aphid) {
                var s = new AphidSerializer(aphid);
                s.IgnoreFunctions = true;
                s.IgnoreSpecialVariables = true;
                s.SplitStrings = true;
                s.StringChunkSize = 90;
                s.MaxElements = -1;                

                ret {
                    aphid,
                    serialize: s.Serialize,
                    out: new StringBuilder(),
                    getPos: TokenHelper.GetIndexPosition,
                    readScript: AphidScript.Read,
                    highlight: SyntaxHighlightingFormatter.Format,
                    scope: aphid.InitialScope,
                    lastScopeHash: null,
                    hasHashChanged: @{
                        if ((var h = scope.GetDeepHashCode()) != lastScopeHash) {
                            lastScopeHash = h;
                            ret true;
                        } else {
                            ret false;
                        }
                    },
                    posMemoizer: new ArgLockingMemoizer[Tuple[string, int], Tuple[int, int]](),
                }
            },            
        },
        trace: {
            options: {
                showFilename: true,
                showOffset: true,
                calculatePosition: true,
                syntaxHighlighting: true,
                dumpScope: true,
                typeFilter: null,
                predicate: null,
            },
            expressions: _trace(OnInterpretExpression),
            statements: _trace(OnInterpretStatement),
        },
        
        map: {
            tables: null,
            create: @() tables = {
                path: new Dictionary[string, AssemblyName](StringComparer.OrdinalIgnoreCase)(),
                fullName: new Dictionary[string, AssemblyName]()(),
                name: new Dictionary[string, Dictionary[Version, AssemblyName]]()(),
            },
            init: @() tables ?? crate(),
            
            asm: @(a){
                var t = init();

                if (!a.IsDynamic) {
                    a |> (t.path @get(t.path)).Add;
                }

                a.FullName |> (t.fullName @get(t.FullName)).Add;
                var name = a.GetName();
                
                name.Name @get(t.FullName) @get(name.Version);

                ret a;
            },

            dir: @(d, pattern) {
                try {
                    ret (pattern != null ? io.files(pattern, d) : io.files(d))->asm;
                } catch (e) {
                    console.error('Failed walking stack: {0}', e.ToString());
                    ret null;
                }
            },
            // 'd:/program files (x86)' @io.first.dir('*visual*') @io.first.dir('Ide') @io.find.files('*.dll') @toDictionary(@(x) x | io.full, @(x) x | ?> AssemblyName.GetAssemblyName)
        },
        

        resolve: {
            trace: false,
            name: @(asm, asmName) {
                var other = asmName defined ? asmName : asm.GetName().Name;
                
                if (trace) {
                    console.info(
                        'Setting assembly {0} as resolution for name {1}',
                        asm, other);
                }

                AppDomain.CurrentDomain.add_AssemblyResolve(@(o, e) {
                    
                    if (trace) {
                        console.query(
                            'Checking if {0} can be resolved to {1}', 
                            e.Name | console.highlight,
                            other | console.highlight);
                    }

                    var an = new AssemblyName(e.Name);

                    if (an.Name == other) {
                        if (trace) {
                            console.success('Assembly resolved');
                        }
                        ret asm;
                    } else {
                        if (trace) {
                            console.error('Assembly resolution failed');
                        }
                    }
                });
            },
        },
    }
}();

