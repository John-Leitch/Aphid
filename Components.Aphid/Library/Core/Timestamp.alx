_tsInit = macro(@{
    if (deltas == null) {
        deltas = [
            [
                0,
                978307200,
                -62135596800
            ],
            [
                1,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                1000000000,
                100000000000,
            ]
        ]
        | permutations;
        // deltas | dumpe;
    }
});

var timestamp = {
    deltas: null,
    getPossibilities: @(stamp) {
        _tsInit();
        var s = stamp.GetType() == string ? stamp | decimal.Parse : stamp;
        
        ret deltas
            ->?>(@(d)({
                projected: (s + (d[0] * d[1])) / d[1],
                valid: -62135596800 <= projected && projected <= 253402300799,
                time: valid ?
                        projected
                        |> DateTimeOffset.FromUnixTimeSeconds
                        @() $_.ToLocalTime() :
                    new DateTime(),
                        // @() d[0] >= 0 ? $_.ToLocalTime() : $_,
                off: d[0],
                mult: d[1],
                conf: DateTime.Now.Ticks - time.Ticks |> Math.Abs,
            }))
            -?(@() $_ != null && $_.valid)
            |> toArray
            -\@.conf;
    },
    
    guess = getPossibilities @> Enumerable.FirstOrDefault @> ?>@.time
};