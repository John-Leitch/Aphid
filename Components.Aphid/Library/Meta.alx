//extend unknown { dynamic priv: @(o, n, v) { if (n.StartsWith('get')) { } else { throw new InvalidCastException() } } }
// Todo: generate API documentation from AST e.g.
//
// // Summary: Walks the abstract syntax tree beginning
// // with the root specified via the node parameter and
// // prints a text representation to the console.
// // node: The node to treat as root of the tree.
// // returns: null.
// dumpAst = @(node) { ... }
//
// * Use comments to generate documentation that links
//   identifiers in descriptions.
// * Infer "returns: null" when not specified.
// * Support single-line comments that are contiguous or
//   broken by whitespace. Also support multi-line comments.
// * Output multiple formats e.g. HTML, XML, Markdown,
//   formats used by intellisense/autocomplete, etc.
// * Support output formats definitions via EBNF-style grammar.
using Components.Aphid;
using Components.Aphid.UI;
using Components.Aphid.Lexer;
using Components.Aphid.Parser;
using Components.Aphid.TypeSystem;
using Components.Aphid.Interpreter;
using System;
using System.Collections.Generic;

// _op = macro(@(op){ @{ op; } });
// _ad = macro(@(op){ @{ code.indent = op * code.tab; } });

/*{
    summary: 'Tokenizes text using the Aphid lexical analyzer.',
    returns: 'An array of AphidTokens.',
    params: { text: 'The text to be passed to the Aphid lexer.' },
    example: @{ 'var x = 10; x *= 2;' |> tokenize |> print; }
}*/
var tokenize;
var getToken;
var parseFile;
var parse;
var parseExp;
var parseFunc;
var evalBlock;
var evalExp;
var evalNode;
var evalAst;
var makeFluent;
var ast;
var call;
var apply;
var kvpsToObj;

/*{
    summary: 'Takes an abstract syntax tree and performs transformations on it.',
    returns: 'A transformed copy of an abstract syntax tree.',
    params: { 
        mutateNode: 'The function to be applied to each node as the tree is walked.',
        rootNode: 'The root at which the transformation begins. Can be a single node or a list of nodes.'
    },
    example: @{
        var f = @() print(foo\bar\test.txt);

        var block = f.Body @mutate(@{
            if ('\\' |> getToken |> expression.isOp) {
                hasChanged = true;
                ret expression
                    .ToString()
                    .Replace('\\', '\\\\')
                    @format('"{0}"')
                    |> ast.str;
            }
        });

        block |> evalAst;
    }
}*/
var mutate;
var mutateFunc;
var transformBlock;
var transformStream;

/*{
    summary: 'Retrieves the frames currently on the call stack, including the current call.',
    returns: 'A collection of AphidFrames containing information about the current call stack.',
    params: {},
    example: @{ frames() |> dump; }
}*/
var frames;



/*{
    summary: 'Retrieves the frame currently on the call stack at the specified index, with the current call. at zero',
    returns: 'An AphidFrame containing information about a single call on the stack.',
    params: { index: 'The index of the frame to be retrieved.' },
    example: @{ frame(1) |> dump; }
}*/
var frame;
var token;
var getLexer;
var dumpAst;
var dumpAstJson;
var convention;
var createVisitor;
var resolveType;
var importRules;
var importMethods;
var loadTokenDetails;
var nodeType;
var resourceComment;

@{
    call = @(name) { var n = $_; $args.RemoveAt(0); ret aphid.CallFunction(n, $args) };
    apply = @(func, args) aphid.CallFunction(func, args);
    
    kvpsToObj = @(kvpsOrSelector, optKvps) {
        var o = {};

        var kvps;
        var selector = null;

        switch ($args.Count) {
            1: kvps = kvpsOrSelector;
            2: {
                kvps = optKvps;
                selector = kvpsOrSelector;
            }
            default: throw new InvalidArgumentException('kvpsToObj expects one or two args');
        }

        if (kvps == null) {
            ret null;
        } else if ((kvps#!) == 0) {
            ret o;
        }

        var p = kvps[0];

        if (p == AphidObject) {
            var k = p.Keys;
            var k = k[0];
            var v = k[1];
            if (selector == null) {
                kvps for (x) o[k] = x[v];
            } else {
                kvps for (x) o[k] = x[v] | selector;
            }
        } else if (p.Key defined && p.Value defined) {
            if (selector == null) {
                kvps for (x) o[x.Key] = x.Value;
            } else {
                kvps for (x) o[x.Key] = x.Value | selector;
            }
        } else {
            throw new ArgumentException('Invalid arg passed to kvpsToObj');
        }

        ret o;
    };

    tokenize = @(text) (new AphidLexer(text)).GetTokens();
    getToken = @(text) tokenize(text)[0].TokenType;
    parseFile = AphidParser.ParseFile;
    parse = @(code) AphidParser.Parse(code);
    parseExp = @(exp) parse(exp)[0];
    evalBlock = @(code) parseFunc(code)();
    evalExp = @(code) parseFunc('ret ' + code)();
    
    mutate = @(mutateNode, rootNode) (new ScriptMutator(mutateNode)).MutateRecursively(rootNode);
    
    mutateFunc = @(mutateBody, func) {
        using Components.Aphid.Interpreter;
        using System.Reflection;
        var r = func.Body @mutate(mutateBody);
        func.Body.Clear();
        r->func.Body.Add;

        ret func;
    };

    parseFunc = @(code) {
        var f = new AphidFunction([], new List[AphidExpression](), this);
        code |> parse -> f.Body.Add;
        
        ret f;
    };

    evalNode = @(node) {
        var templateFunc = @{ };
        (ast.isRet($_) ? $_ : ast.makeRet($_)) |> templateFunc.Body.Add;
        var r = templateFunc();
        templateFunc.Body.Clear();

        ret r;
    };

    evalAst = @(ast) {
        var templateFunc = @{ };
        ast->templateFunc.Body.Add;
        var r = templateFunc();
        templateFunc.Body.Clear();

        ret r;
    };

    makeFluent = @(obj) {
        var n = getIdArg(0);

        obj
        |> keys
        -> (@() obj.{$_})
        -? (@has('Body'))
        -> (@{
            using System.Linq;
            if (($_.Body #!) == 0 ||
                ($_.Body |> Enumerable.Last |> ast.isRet @== false))
                'ret ' + n  |> parseExp |> $_.Body.Add;
        });

        ret obj;
    };

    
    if (!this.'$asm'.IsTypeDefined('VisitorFrame')) {
        class VisitorFrame { node, context };
    }

    transformBlock = @(f) aphid.OnInterpretBlock = f;

    transformStream = @(depth, after, pattern, replace) {
        var block = frame(depth + 1).Scope.{'$block'};
        var afterBlock = false;
        
        block
            -?(@{
                if (!afterBlock) {
                    if (after($_)) {
                        afterBlock = true;
                    }

                    ret false;
                } else {
                    ret afterBlock && pattern($_);
                }
            })
            ->@{
                
                var i = block.IndexOf($_);
                block.Remove($_);
                $_ |> replace @block.Insert(i);
            };
    };

    //_frameLocal = macro(@(f) { new ThreadLocal[AphidInteropMember](@{
        //Console.WriteLine('Thread Local Aphid: {0}, {1}', aphidLocal.Value.OwnerThread, Thread.CurrentThread.ManagedThreadId);
        //ret aphidLocal.Value.f;
    //}) });
//
    //var _frames = _frameLocal(GetStackTrace);
    //var _frame = _frameLocal(GetStackFrame);
//
    //frames = @() _frames.Value(1);
    //frame = @(i) _frame.Value(i + 1);

    frames = @(i) this.{'$aphid'}.GetStackTrace(i defined ? i + 1 : 1);
    frame = @(i) this.{'$aphid'}.GetStackFrame(i defined ? i + 1 : 1);

    nodeType = { };

    @{
        id Identifier;
        unOp UnaryOperator;
        binOp BinaryOperator;
        str String;
        call Call;
    }.Body->@{
        nodeType.{$_.Attributes[0].Identifier} = 
            $_.Identifier
            @String.Format('AphidExpressionType.{0}Expression')
            evalExp
    };

    getLexer = @(stream) {
        var l = {
            index: -1,
            token: null,
            count: stream.Count,
            eos: false,
            stream,

            oneOrNone: @(set, def) {
                for (x in set) {
                    //print('[?] Checking for {0}', x);
                    if (x |> match) {
                        ret $_;
                    }
                }

                ret def;
            },

            match: @(t) {
                if (token == t) {
                    //print('[+] token matched');
                    next();
                    ret true;
                } else {
                    //print('[-] token not matched');
                    ret false;
                }
            },
            
            take: @() {
                var t = token;
                if (!eos) next();

                ret t;
            },

            next: @{
                if (index < count) index++;

                if (index != count) {
                    token = stream[index];
                    //print('[+] Next token: {0}', token);
                } else {
                    token = null;
                    eos = true;
                }

                ret token;
            }
        };

        l.next();

        ret l;
    };

    token = {
        return: AphidTokenType.retKeyword
    };

    

    ast = {
        /*{
            summary: 'Gets the operator for the specified abstract syntax tree node.',
            returns: 'The operator of the node.',
            example: @{
                // Todo
            }
        }*/
        op: @() $_.Operator,
        hasOp: @(op, node) @has('Operator') && isOp(op),
        isOp: @(op, node) node.Operator == op,
        isRet: @() $_.Type == nodeType.unOp && ast.isOp(token.return, $_),
        lhs: @(node) node.LeftOperand,
        rhs: @(node) node.RightOperand,
        attr: @(node) node.Attributes[0],

        nodeIs: @(type, node) node.Type == type,
        isId: @(node) node @ast.nodeIs(
            AphidExpressionType.IdentifierExpression),
        
        attrs: @(node) {
            if (!(node |> ast.isId))
            {
                print('ast.attrs expects id node');
                
                ret null;
            }

            ret node.Attributes->@.Identifier;
        },

        depth: 0,
        indent: @() ' ' * ast.depth * 2,

        walk: @(visit, node, context) {
            _push = macro(@(_c, _n){
                if (_n defined && _n != null) {
                    var f = new VisitorFrame();
                    f.node = _n;
                    f.context = f;
                    _c.stack.Push(f);
                }
            });

            var c = context defined ? context : { stack: new Stack[VisitorFrame]()};
            c.isRoot = ast.depth == 0;
            c.isBlock = node.GetType() |> IEnumerable[AphidExpression].IsAssignableFrom;
            c.hasChildren = node['GetChildren'] defined;
            c.isHandled = false;
            _push(c, node);        
            visit(node, c);
            c.stack.Pop();

            if (c.isHandled) ret null;

            _next = macro(@(_curNode) {
                if (_curNode != null) {
                    _push(c, _curNode);
                    ast.walk(visit, _curNode, c);
                    c.stack.Pop();
                }
            });
            
            if (c.isBlock) {
                ast.depth++;
                _push(c, node);

                for (n in node) {
                    _next(n);
                }

                c.stack.Pop();
                ast.depth--;
            } else if (c.hasChildren) {  
                var ch = node.GetChildren();
                _next(ch);
            }
        },

        walkNodes: @(visit, node) {
            node @ast.walk(@(node, context) {
                if (!context.isRoot && !context.isBlock) {
                    visit(node, context);
                }
            });
        },

        where: @(predicate, node) {
            var matches = [];
            node @walk(@(innerNode, context) {
                if (predicate(innerNode, context)) {
                    print('Match: {0}, {1}', innerNode.Type, innerNode.ToString());
                    matches.add(innerNode);
                }
            });

            ret matches;
        },

        whereNode: @(predicate, node)
            node @where(@(innerNode, context)
                innerNode != null &&
                !context.isRoot &&
                !context.isBlock &&
                predicate(innerNode, context)),

        id: @(name, attrs) $args.Count == 2 ?
            (new IdentifierExpression(name, attrs)) :
            (new IdentifierExpression(name, new List[IdentifierExpression]())),

        unOp: @(operator, operand, postfix) new UnaryOperatorExpression(operator, operand, false),
        preUnOp: @(operator, operand) unOp(operator, operand, false),
        binOp: @(lhs, operator, rhs) new BinaryOperatorExpression(lhs, operator, rhs),
        member: @(lhs, rhs) binOp(lhs, getToken('.'), rhs),
        pair: @(lhs, rhs) binOp(lhs, getToken(':'), rhs),
        call: @(target, args) new CallExpression(target, args),
        text: @(text) new TextExpression(text),
        
        str: @(value) new StringExpression(value
            .ToString()
            .Replace('\\', '\\\\')
            .Replace('"', '\\"')
            @format('"{0}"')),

        makeRet: @(operand) preUnOp(token.return, operand),
        return: makeRet,
        
        block: @() new List[AphidExpression](),

        first: @(predicate, rootNode) {
            var match = null;
            rootNode @ast.walk(@(node, context){
                if (match != null) {
                    context.isHandled = true;
                    ret null;
                } else if (predicate(node, context)) {
                    match = node;
                    context.isHandled = true;
                    ret null;
                }
            });

            ret match;
        },

        firstNode: @(predicate, rootNode)
            rootNode @ast.first(@(n, c)
                !c.isBlock && !c.isRoot && predicate(n, c)),
            
        flatten: @(block) {
            var nodes = new List[AphidExpression](block);
            var tmp = block;

            while (((tmp = tmp-?(@()$_['GetChildren'] defined)-<@() $_.GetChildren()) #!) != 0) {
                tmp->nodes.Add;
            }

            ret nodes;
        },

        findStmt: @(node, block) {
            block for (s) {
                if ((var match = s @ast.firstNode(@(x, ctx) x == node)) != null) {
                    ret s;
                }
            };

            ret null;
        },
    };

    dumpAst = @(node) {
        node @ast.walk(@(node, context) {
            if (context.isRoot) {
                print('Root');
            } else if (!context.isBlock) {
                (node |> getProps) -> (@.Name) +> (@+ ', ' + $args[1])
                @print('{0}{1} {{ {2} }}', ast.indent(), node.Type);
                // node |> toJson |> print;
            }
        });
    };

    dumpAstJson = @(node){
        #'Data\\Serialization';
        node @ast.walk(@(node, context) {
            if (context != null &&
                !context.isBlock &&
                !context.isRoot &&
                node != null) {
                if (node @has('Code')) {
                    node.Code = null;
                }

                if (node @has('Index')) {
                    node.Index = -1;
                }
            }
        });

        node |> toJson |> print;
        ret null;
    };    

    convention = {
        pascalCase: @(str) str != null && str.Length > 0 ?
            str[0].ToUpper() + str.Substring(1) :
            str,

        camelCase: @(str) str != null && str.Length > 0 ?
            str[0].ToLower() + str.Substring(1) :
            str,

        shortExpName: @(str) str
            .Replace('Collection', 's')
            .Replace('Argument', 'Arg')
            .Replace('Attribute', 'Attr')
            .Replace('Parameter', 'Param')
            .Replace('Reference', '')
            .Replace('This', 'ThisExp')
            .Replace('NamespaceImport', 'Import')
            .Replace('Declaration', 'Decl')
            .Replace('Constructor', 'Ctor')
            .Replace('Variable', 'Var')
            .Replace('Expression', 'Exp')
            .Replace('Statement', 'Stmt')
            .Replace('Operator', 'Op')
            .Replace('Binary', 'Bin')
            .Replace('Unary', 'Un')
            .Replace('ExpExp', 'Exp')
            |> camelCase,

        getMap: @(getTypes, getName){
            var map = getTypes()
                ->@()({ type: $_, name: $_ | getName | convention.shortExpName });

            if (map -& @.name =? @() ($_ #!) > 1) {
                throw 'Aphid map collision detected';
            }

            ret map;
        },

        getExpMap: @getMap(
            @() AphidExpression.Assembly.GetTypes()-?AphidExpression.IsAssignableFrom,
            @.Name),

        getTokenMap: @getMap(@() AphidTokenType.values(), @()$_.ToString()),
    };

    createVisitor = @{
        #'Meta\\Code\\Syntax\\Visitor.g';

        ret visitor;
    };

    var importsLock = null;
    
    var getImportsLock = @()
        (var a = this.'$aphid')
            .GetType()
            .GetField(
                '_importsLock',
                BindingFlags.NonPublic | BindingFlags.Instance)
            .GetValue(a);

    resolveType = @(type)
        this.{'$aphid'}.InteropTypeResolver.ResolveType(
            this.{'$imports'},
            importsLock != null ? importsLock : (importsLock = getImportsLock()),
            [ type ],
            true,
            true);

    importRules = {
        camelCase: true,
        createScope: true,
        strict: true,
    };

    var importMethodsScope = this.'$parent';

    importMethods = @(sourceType)
        copyMethods(
            sourceType,
            importRules.camelCase ? language.camelCase : @() $_,
            importRules.createScope ? {} : importMethodsScope);

    var copyMethods = @(sourceType, prep, scope) {
        sourceType
            .GetMethods()
            ->@.Name
            !?
            ->@{
                scope[$_ |> prep] = evalExp('{0}.{1}' :: [ sourceType.Name, $_ ])
            };
        
        ret scope;
    };

    //var getNames = @(sourceType)

    loadTokenDetails = @{
        var getNumber = @() $_;
        var getString = @() $_;
        #'Meta/Code/Aphid/Aphid.Tokens';
        ret tokens;
    };

    resourceComment = {
        extract: @(name, text) {
            var start = '/*$' + name;
            var end = start.ToCharArray();
            end | Array.Reverse;

            ret text.Split([start, new string(end)], StringSplitOptions.None)[1];
        },

        extractBinary: @(name, text) text @extract(name) |> Convert.FromBase64String,
    };
}(); 

extend AphidFrame {
    exp: @(x) x.Expression,
}

extend AphidParser {
    dynamic MatchHandler: @(parser, name) {
        var prefix;
        var match = 'Match';
        var peek = 'Peek';
        var isPeek = false;

        if (name.StartsWith(match)) {
            prefix = match;
        } else if (name.StartsWith(peek)) {
            isPeek = true;
            prefix = peek;
        } else {
            fatal('Invalid AphidParser dynamic extension call');
        }

        var exp = 'AphidTokenType.' + name.Substring(prefix.Length) |> evalExp |> parser.Match;

        if (isPeek) {
            parser.PreviousToken();
        }

        ret exp;
    }
}

_is = macro(@(_type) { _is2(id(_type, Expression)) });
_is2 = macro(@(_typeFull) { x.Type == AphidExpressionType._typeFull });

extend AphidExpression {
    is: @(x, type) x.Type == evalExp('AphidExpressionType.' + getIdArg(0) + 'Expression'),
    isScript: @(x) _is(LoadScript),
    isCall: @(x) _is(Call),
    isId: @(x) _is(Identifier),
    isFunc: @(x) _is(Function),
    isUnOp: @(x) _is(UnaryOperator),
    isBinOp: @(x) _is(BinaryOperator),
    isObj: @(x) _is(Object),
    isExt: @(exp, type) exp.is(Extend) && (exp.extType() | resolveType) == type,
    isNumber: @(x) _is(Number),
    isString: @(x) _is(String),
    isText: @(x) _is(Text),
    isUsing: @(exp) exp.isOp(getToken('using')),

    isOp: @(x, op)
        (x.isUnOp() || x.isBinOp()) &&
        $args.Count > 2 ? $args @skip(1) =? x.isOp : x.op() == (op.GetType() == string ? op | getToken : op),
        // (var t = op.GetType()) != string && t.GetInterface(IEnumerable) ?
        //     op=? x.isOp :
        //     x.op() == (t == string ? op | getToken : op),

    isParent: @(x) x.GetType().GetMethod('GetChildren') != null,
    anyChild: @(x, predicate)
        x.isParent() &&
        (!(predicate defined) || (x.GetChildren() @aq.any(predicate))),
    
    oneAttr: @(x, a) (x.attrs() #!) == 1 && x.attr(0).id() == getIdArg(0),
    firstAttr: @(x, a) x.attrs() != null && (x.attrs() #!) >= 1 && x.attr(0).id() == getIdArg(0),
    noAttrs: @(x) (x.attrs() #!) == 0,
    
    exp: @(x) x.Expression,
    id: @(x) x.Identifier,
    lhs: @(x) x.LeftOperand,
    rhs: @(x) x.RightOperand,
    func: @(x) x.FunctionExpression,
    args: @(x) x.Args,
    op: @(x) x.Operator,
    
    str: @(x) x.isString() ?
        x.Value | StringParser.Parse :
        throw new ArgumentException('Not string expression'),

    num: @(x) x.isNumber() ?
        x.Value :
        throw new ArgumentException('Not number expression'),

    obj: @(x) x.Object,
    pairs: @(x) x.Pairs,
    extType: @(x) exp.is(Extend) ? x.ExtendType.id() : null,

    attr: @(x, i) (x.attrs() #!) >= 1 + i ? x.attrs()[i] : null,
    attrs: @(x) x.isId() ? x.Attributes : null,
    attrIds: @(x) x.attrs()->@(y)y.id(),
    body: @(x, i) !_is(Function) || (x.Body #!) <= i ? x : x.Body[i],    
    hasHeader: @(x, h) getArg(0).matchId(x.body(0)),

    matchId: @(x, y)
        y != null &&
        x.isId() &&
        y.isId() &&
        x.id() == y.id() &&
        Enumerable.SequenceEqual(x.attrIds(), y.attrIds()),

    member: @(lhs, rhs) ast.member(lhs, rhs).WithPositionFrom(lhs),
    property: @(lhs, name) lhs
        .member(ast.id(name).WithPositionFrom(lhs))
        .WithPositionFrom(lhs),
    call: @(target, args) ast.call(target, args).WithPositionFrom(target),    
}

extend AphidFunction { map: @(f, selector) f.Body->selector }