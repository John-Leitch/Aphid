#'std';
#'base';
var args = getScriptArgs();
var argIndex = 0;
var inline = false;

if (args[0].Value.ToLower() == "nowindow") {
    inline = true;
    argIndex++;
}

var degrees = args[argIndex].Value | parseExp | aphid.Interpret;
var body = args | count > 1 ? args[argIndex + 1] @getCmdTail(0) : '';
var queue = new Queue[string]();
var queuePopulated = false;
var queuePopulatedSync = new Object();

var threads = 0..degrees
    ->(@() async.thread(@{
        while (true) {
            var cmd;
            
            lock queue {
                if (queue.Count != 0) {
                    cmd = queue.Dequeue();
                }
            }

            if (cmd == null) {
                var shouldSleep;  
                lock queuePopulatedSync shouldSleep = !queuePopulated;

                if (shouldSleep) {
                    async.sleep(10);
                    continue;
                } else {
                    break;
                }
            }

            var si = new ProcessStartInfo('cmd.exe', '/S /C "{0}"' :: (cmd ~: ['["^]', '^$0']));
            if (!inline) {
                si.UseShellExecute = true;
            } else {
                si.UseShellExecute = false;
                si.CreateNoWindow = false;
            }
            // 
            // si.RedirectStandardInput = true;
            var p = Process.Start(si);
            p.WaitForExit();
        }
    }))
    |> toArray;

console.stdIn.lines(@{
    var b = body != '' ? body :: $_ : $_;
    lock queue queue.Enqueue(b);
});

lock queuePopulatedSync queuePopulated = true;
threads for $_.Join();