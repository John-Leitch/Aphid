#'std';
#'base';
var args = getScriptArgs();
var degrees = args[0].Value | parseExp | aphid.Interpret;
var body = args | count > 1 ? args[1] @getCmdTail(0) : '';
var queue = new Queue[string]();
var queuePopulated = false;

var threads = 0..degrees
    ->(@() async.thread(@{
        while (true) {
            var cmd;
            
            lock queue {
                if (queue.Count != 0) {
                    cmd = queue.Dequeue();
                } else if (!queuePopulated) {
                    async.sleep(10);
                    continue;
                } else {
                    break;
                }
            }

            var si = new ProcessStartInfo('cmd.exe', '/S /C "{0}"' :: (cmd ~: ['["^]', '^$0']));
            si.UseShellExecute = true;
            // si.CreateNoWindow = false;
            // si.RedirectStandardInput = true;
            var p = Process.Start(si);
            p.WaitForExit();
        }
    }))
    |> toArray;

console.stdIn.lines(@() queue.Enqueue(body != '' ? body :: $_ : $_));
queuePopulated = true;
threads for $_.Join();