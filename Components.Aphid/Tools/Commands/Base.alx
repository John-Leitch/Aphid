using Components;
var tokenizeCmd = @() Environment.CommandLine | ArgLexer.GetTokenInfo;
var skipAphid = @(tokens) tokens @skip(getRootFile(tokens).Contains('aphid') ? 2 : 1);
var getRootFile = @(tokens) tokens ^! getTokenFile;
var getTokenFile = @(token) io.name(token.Value).ToLower();
var getScriptArgsCore = tokenizeCmd @> skipAphid;
var cachedScriptArgs = null;
var getScriptArgs = @() cachedScriptArgs ?? (cachedScriptArgs = getScriptArgsCore());
var getCmdTail = @(off, token) token.Offset + off |> Environment.CommandLine.Substring;
var getBody = @() getScriptArgs() ^! @getCmdTail(0);
var getNamedBody = @(name) getScriptArgs() >^(@(x) x.Value == name) @getCmdTail(2);
var getNamedHead = @(name) getScriptArgs() @takeWhile(@(x) x.Value != name);
var argTokenComparer = new SelectorComparer[ArgToken,int](@.Offset);

var getRemainingHead = @(name, remaining)
    name
    | getNamedHead
    @() Enumerable.Intersect($_, remaining, argTokenComparer);

var getImplicitBody = @{
    var bodyStr = getBody();
    var bodyTokens = bodyStr | tokenize;

    if (bodyTokens.Count > 0 &&
        ((var ts = bodyTokens[0].TokenType.ToString()) ~= 'Operator') &&
        !(ts ~= 'Function|Pipe')) {
        bodyStr = bodyStr @format('@() ($_\r\n{0}\r\n)');
    }

    ret bodyStr;
};