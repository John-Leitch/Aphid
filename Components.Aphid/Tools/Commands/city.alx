#'std';
#'base';
#'geo/cityInfo';
useJsonLikeSerializer();
var t = tokenizeCmd();
// t | skipAphid | dumpe;
getScriptArgs();
var country = getBody();

var resolveGpsCoords = @{
    var parts = $_.Trim().Split(' :,');

    if (parts.Length != 2) {
        console.error('Error parsing {0}', $_);

        ret null;
    }

    var lat;
    var lng;

    try {
        lat = parts[0] | double.Parse;
        lng = parts[1] | double.Parse;
    } catch (e) {
        console.error('Error parsing {0}: {1}', $_, e.message);

        ret null;
    }

    var res = cityInfo.closestCore(lat, lng, 'US');

    {
        city: res.details.Name,
        state: res.details.State,
        country: res.details.Country,
        lat: res.details.Latitude,
        lng: res.details.Longitude,
        distance: res.distance
    }
    |> serialize
    @() $_ ~: '[\r\n]'
    |> console.code;    
};

if (stdIn.any) {
    stdIn.lines(resolveGpsCoords);
} else {
    cachedScriptArgs->@.Value |> concat |> resolveGpsCoords;
}

ret null;

0..10->@*0.1->@{
var res = cityInfo.closest(42.6345101 + $_,-83.9214887);

{
    city: res.details.Name,
    state: res.details.State,
    country: res.details.Country,
    lat: res.details.Latitude,
    lng: res.details.Longitude,
    distance: res.distance
}
|> serialize
|> console.code;


}