#'Std';
#'Meta/Code/Compiler';
preprocessor.inlineScripts = true;
var argTokens = Environment.CommandLine | ArgLexer.GetTokenInfo;
var initExps = new List[AphidExpression]();

var tmpl = !(useLoop defined) || useLoop ?
    '
        using (var stream = Console.OpenStandardOutput()) {{
            var line;
            var number = -1;
            while ((line = Console.In.ReadLine()) != null) {{
                number++;
                {0}
                //Console.Out.Flush();
            }}
        }}
    ' :
    '
        using (var stream = Console.OpenStandardOutput()) {{
            var line;
            var number = -1;
            while ((line = Console.In.ReadLine()) != null) {{
                number++;                
            }}
            {0}
            //Console.Out.Flush();
        }}
    ';

///ast.token.Keys~?'op'->ast.token.get_Item-?(@() !($_ ~='Function|Pipe'))->@format('AphidTokenType.{0}') @join(', ') printn
var bodyStr =
    argTokens
    @skip(io.name(argTokens[0].Value).ToLower().Contains('aphid') ? 2 : 1)
    ^!
    @.Offset
    |> Environment.CommandLine.Substring;

var bodyTokens = bodyStr | tokenize;

if (bodyTokens.Count > 0 &&
    ((var ts = bodyTokens[0].TokenType.ToString()) ~= 'Operator') &&
    !(ts ~= 'Function|Pipe')) {
    bodyStr = bodyStr @format('@() ($_\r\n{0}\r\n)');
}

var body =
    bodyStr
    |> (prepareBody defined ? prepareBody : @() $_)
    @format(tmpl)
    |> parse
    |> preprocessor.transform
    @mutate(@{
        if (ast.is.binOp(var n = expression) &&
            n.Operator == ast.token.assignmentOp &&
            ast.is.identifier(n.LeftOperand) &&
            (ast.attrs(n.LeftOperand) =?@=='init')) {
            n | initExps.Add;
            n.LeftOperand.Attributes.RemoveAt(0);
            hasChanged = true;
            ret new List[AphidExpression]();
        }
    });

body | last @() $_.Body.InsertRange(0, initExps);

// runtime.trace.options.dumpScope = false;
// runtime.trace.expressions();
// body->clrSerializer.dump;
// ret null;
body -> aphid.InitialScope.'$block'.Add;
