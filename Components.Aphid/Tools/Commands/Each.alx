#'Std';
#'Meta/Code/Compiler';
preprocessor.inlineScripts = true;
var argTokens = Environment.CommandLine | ArgLexer.GetTokenInfo;
// st.attrs =?@=='init';

var testBody = "
if (line.Length ^> 6 ^&^& line[4] == ' ' ^&^& line[5] == ' ') { ^
var si = 6; ^
var end = line.IndexOf('  ', si); ^
var count = (end - si + 1) / 3; ^
init var arr = Array.CreateInstance(byte, parts.Length); ^
for (var i = 0; i ^< parts.Length; i++) arr.Set(i, Convert.ToByte(parts[i], 0x10)); ^
stream.Write(arr, 0, arr.Length);^
} ^
"~: '\\^';

var initExps = new List[AphidExpression]();

var tmpl = !(useLoop defined) || useLoop ?
    '
        using (var stream = Console.OpenStandardOutput()) {{
            var line;
            var number = -1;
            while ((line = Console.In.ReadLine()) != null) {{
                number++;
                {0}            
            }}
        }}
    ' :
    '
        using (var stream = Console.OpenStandardOutput()) {{
            var line;
            var number = -1;
            while ((line = Console.In.ReadLine()) != null) {{
                number++;                
            }}
            {0}
        }}
    ';

var body =
    argTokens
    @skip(io.name(argTokens[0].Value).ToLower().Contains('aphid') ? 2 : 1)
    ^!
    @.Offset
    |> Environment.CommandLine.Substring
    |> (prepareBody defined ? prepareBody : @() $_)
    // testBody
    @format(tmpl)
    |> parse
    |> preprocessor.transform
    @mutate(@{
        if (ast.is.binOp(var n = expression) &&
            n.Operator == ast.token.assignmentOp &&
            ast.is.identifier(n.LeftOperand) &&
            (ast.attrs(n.LeftOperand) =?@=='init')) {
            n | initExps.Add;
            n.LeftOperand.Attributes.RemoveAt(0);
            hasChanged = true;
            ret new List[AphidExpression]();
        }
    });

body | last @() $_.Body.InsertRange(0, initExps);

// runtime.trace.options.dumpScope = false;
// runtime.trace.expressions();
// body->clrSerializer.dump;
// ret null;
body -> aphid.InitialScope.'$block'.Add;
