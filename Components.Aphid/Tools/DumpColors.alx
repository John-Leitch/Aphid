#'Std';

console.importArgs({
    int step: '-s',
    bool includeBg: '-bg',
    bool legacyColors: '-legacy',
});

var colorDump = {
    printVT100: @{
        if (step == null) step = 0x10;
        var values = 0..((0x100+step)/step)->@*step->@Math.Min(0xff)->(@()$_.byte()) |> toArray;
        var colors = 0..3->(@()values) |> permutations;        
        var cols = Console.BufferWidth / ((3 * 2 * (includeBg ? 2 : 1)) + (includeBg ? 2 : 1)) |> Math.Floor;
        var i = 0;
        cls();

        colors for (c) {
            var b = c->@+(0x100/2)->@()($_ & 0xff).byte();

            // var visibility =  [c,b]
            //     ->(@(x)(x +> @(x,y) @{dump({x,y,z:Math.Abs(x-y)&0xff,z2:y-x}); ret x}()+y) /(-2 + (x#!)))
            //     @() $_[1]-$_[0] | Math.Abs;
            
            Console.Write(
                includeBg ? '{4}{0}{1} {2}{3}' : '{4}{0}{1}{3}',
                console.color.pair(b, c),
                c | hex,
                b | hex,
                VT100.Reset,
                i == 0 ? '' : ' '); 
            
            if (++i == cols) {
                i = 0;
                Console.WriteLine();
            }
        };

        Console.WriteLine();
    },
    printLegacy: @()
        ConsoleColor.values()\!
        @(colors) '{{1,-{0}}} {{0,-{0}}} ~{{1}}~~|{{0}}~'
            :: [ colors->str->@.Length \!$! ]
            @(fmt) 0..2 ->(@()colors) |> permutations ->(@(c) fmt :: c)
                ->@+ (0..Cli.BufferWidth - ($_ |> Cli.EraseStyles #!) - 1
                    ->@&0b11 ->@+0x41 -> chr |> concat @+ '~R~')
            @join('\r\n')
            print,
};

colorDump['print{0}' :: legacyColors ? 'Legacy' : 'VT100']();