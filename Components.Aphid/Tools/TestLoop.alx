#'Std';

using Components.Aphid.UI;
using System;
using System.IO;
using System.Reflection;
using System.Diagnostics;
//AphidCli.ShowClrStack = true;
//openRepl = true;
aq.empty = @(l) l.Count == 0;
var args = Environment.GetCommandLineArgs() @aq.skip(2);

if (args |> aq.empty) {
    print('Aphid Test.alx [script] [watch directory] {args}');
    Environment.Exit(1);
} else if (args.Count < 2) {
    print('Invalid args');
    Environment.Exit(2);
}

var testArgs = args @aq.skip(2) ->(@() $_.Contains(' ') ? format('"{0}"', $_) : $_) @join(' ');
var w = new FileSystemWatcher();
_n = macro(@(f) { NotifyFilters.f });
w.NotifyFilter = _n(LastWrite);
w.Filter = "*.alx";
w.Path = args[1];
w.EnableRaisingEvents = true;
print('Waiting for change');
var exe = Assembly.GetEntryAssembly().Location;

while (true) {    
    var si = new ProcessStartInfo(
        exe,
        args[0] + (testArgs != '' ? ' ' + testArgs : ''));

    si.UseShellExecute = false;
    var p = Process.Start(si);

    async.background(@{        
        p.WaitForExit();
        print('Process has exited with code ~Cyan~{0}~R~', p.ExitCode);
    });

    w.WaitForChanged(WatcherChangeTypes.All).Name
    |> Cli.StyleEscape
    @print("'{0}' changed");
 
    try {
        if (!p.HasExited) {
            console.info('Killing process');
            p.Kill(); 
            console.success('Process killed');
        }
    } catch (e) {
        print(e.message);
    }

    p.WaitForExit();
} 

print('Done');