this @mix(console);

// AphidConfig.Current.ShowErrorScope = false;
// AphidConfig.Current.StackTraceParams = false;
AphidConfig.Current.ExceptionHandlingClrStack = true;


var lazyRegex = new Lazy[AphidObject](@()
    compileAsm ? buildRegexAsm(pattern, reOptions) :
    compileLLex ? buildLLexAsm(pattern) :
    new Regex(pattern, reOptions));

var getAsmDir = @()
    (this.'$script' defined ? this.'$script' | io.up : env.get('temp'))
    @io.end('LycomorphaCompiled');

var getAsmName = @(pattern)
    pattern
    | Encoding.ASCII.GetBytes
    | md5.hex
    @format('LycomorphaRegexAssembly_{0}')
    @io.prefix(getAsmDir());    

var buildRegexAsm = @(pattern, reOptions) {
    var asm = getAsmName();
    var asm2 = asm + '.dll';

    if (verbosity > 2) {
        query('Checking for regex assembly ~Cyan~{0}~R~', asm2);
    }

    if (asm2 | io.file) {
        if (verbosity > 2) {
            success('Found regex assembly ~Cyan~{0}~R~', asm2);
        }

        loadFile(asm2);
    } else {
        var d = asm | io.up;

        if (d | io.not.dir) {
            io.mkdir(d);
        }
    
        var wd = io.cd();
        io.cd(d);
        var rci = new RegexCompilationInfo(pattern, reOptions, 'LycomorphaRegex', 'Lycomorpha', true);
        Regex.CompileToAssembly([rci], new AssemblyName(asm | io.name));
        io.cd(wd);
    }
    
    using Lycomorpha;

    ret new LycomorphaRegex();
};

var buildLLexAsm = @(pattern){
    #'meta/code/compiler';
    using LLex;
    var tmpl = '
LLex.LLexSearch

LLexSearch 

{0}

%%
    return LLexSearchTokenType.Ignore;
%%
';

    var tmpFile = io.rnd();
    var kws = pattern.Split('|');

    if (reOptions & RegexOptions.IgnoreCase == RegexOptions.IgnoreCase) {
        kws = kws-< @()$_.ToLower().ToCharArray()->(@()[$_.ToString(), $_.ToString().ToUpper()]) |> permutations ->concat!?;
    }

    kws->(@+ ' Match') @join('\r\n') @format(tmpl) @io.txt(tmpFile);
    var llFile = LLexFile.Interpret(tmpFile).Replace('LLexSearchTokenType.Unknown', 'LLexSearchTokenType.Ignore');
    io.del(tmpFile);
    csharp.roslyn.enable();
    csharp.optimize();

    ret {
        res: llFile | csharp.compileAsm,
        lt: res.CompiledAssembly.GetTypes() | last,
        Matches: @(text) {
            var lexer = new lt();
            lexer.Text = text;
            ret lexer.GetTokens()->@(m) ({ Index: m.Index, Length: m.Lexeme.Length, Value: m.Lexeme, Groups: [ this ]  });
        }
    };
};
// if (compileLLex) buildLLexAsm(pattern) |> dumpe;
var searchFile = @(file) {    
    if (verbosity >= 3) {
        lock Console.Out info('Searching {0}', file | styleEscape);
    }

    var textEncoding = Encoding.GetEncoding('iso-8859-1');

    var text;

    try {
        file = file | io.full;
        text = File.ReadAllText(file, textEncoding);
        // text = io.txt(file);

        // {len: text.Length, rawLen: io.len(file), delta: rawLen - len } | dumpe;
    } catch (e) {
        lock Console.Out fail('Could not read {0}: {1}', file, e.message | styleEscape);
        ret null;
    }

    var updated;

    using (var r = new BinaryReader(io.open.read(file))) {
        updated = searchFileText(file, r, text);
    }

    if (write && updated != null) {
        if (verbosity >= 2) {
            lock Console.Out printInfo('Writing updated text');
        }
        
        updated @io.txt(file);
    }
};

var getMatchValue = @() bareGroup == null ? $_.Value : $_.Groups[bareGroup].Value;
var theme;
var excerptColor;
var highlightColor;

var initTheme = @{
    theme = {
        excerpt: { fg: SystemColor.Cornsilk | color.darken, bg: SystemColor.DarkSlateGray | color.darken },
        highlight: { fg: SystemColor.Highlight, bg: SystemColor.Highlight | color.invert },
    };

    if (treatAsCode) {
        theme.excerpt.bg = [0x10.byte(),0x10.byte(),0x10.byte()];
        theme.excerpt.bg = '0040a0' | unhex;
    }

    excerptColor = color.pair(theme.excerpt.fg, theme.excerpt.bg);
    highlightColor = color.pair(theme.highlight.fg, theme.highlight.bg);
};

// theme.darken.Keys
// -?theme.darken.get_Item
// for (t) [ 'fg', 'bg' ] for theme[t][$_] = theme[t][$_] | color.darken;

var searchFileText = @(file, reader, text) {
    if (theme == null) {
        initTheme();
    }

    var matches = lazyRegex.Value.Matches(text);
    var c = matches#!;

    if (c == 0) {
        ret null;
    }
    
    lock Console.Out handleMatches(file, reader, text, matches, c);
};

var handleMatches = @(file, reader, text, matches, c) {
    if (bareMode) {
        if (!useEvaluator) {
            _walkMatches = macro(@(f) { matches for $_ | getMatchValue | f });
            if (verbosity >= 1) {
                if (hashValues) {
                    _walkMatches(hash);
                } else {
                    _walkMatches(console.line);
                }                
            } else if (hashValues) {
                _walkMatches(context.hashed.Add);                
            }
        } else {
            matches for (m) {
                var value = m | getMatchValue;
                var f = new AphidFunction(execEvaluator.Args, execEvaluator.Body, this);
                f();
            }
        }
        
        ret null;
    }

    if (verbosity >= 2) {
        '{0} {1} in {2}' :: [ c, 'Match' |> c != 1 ? language.pluralize : @(x)x, file | styleEscape ]
        |> color.header;
        console.line();
    }

    var matchNum = 0;
    var replacements = new List[AphidObject]();
    var updatedOffset = 0;
    var displayText = null;

    matches for (m) {        
        var i2 = 0;
        matchNum++;

        if (verbosity >= 1) {
            m.Groups for (g) {
                if (i2 > 0) {                
                    if (disableCaptures || verbosity < 2) {
                        continue;
                    } else if ($_.Length == 0) {
                        '{0}Capture Group {1}: empty' :: [ groupIndent, i2++ ]
                        |> code;

                        if (i2 == (m.Groups#!)) {
                            console.line();
                        }
                        continue;
                    }
                }

                if (displayText == null && excerptLines > -1) {
                    displayText = toPrintable(text, true);
                    
                    if (treatAsCode) {
                        // displayText = displayText | console.highlight;
                    }
                }

                printMatchGroup(displayText, g, i2, matchNum);
            };
        }

        if (previewReplacements) {
            var replacement;
            if (useEvaluator) {
                var f = new AphidFunction(execEvaluator.Args, execEvaluator.Body, this);
                replacement = lazyRegex.Value.Replace($_.Groups[0].Value,  f);
            } else if (out != null) {
                replacement = lazyRegex.Value.Replace($_.Groups[0].Value,  out);
            }

            if (useEvaluator || out != null) {
                replacements.Add({ offset: updatedOffset + $_.Index, len: replacement.Length });
                updatedOffset += replacement.Length - $_.Length;
            }

            if ((out != null || useEvaluator) && verbosity >= 2) {
                console.line('{0}{1}\r\n{0}{2}\r\n',
                    groupIndent,
                    'Replacement {0}:' :: matchNum |> highlight,
                    replacement);
            }
        }
    };

    if ((matches#!) > 0 && (dumpOut || write) && (useEvaluator || out != null)) {
        var updated;
        
        if (useEvaluator) {
            var f = new AphidFunction(['m'], execEvaluator.Body, this);
            updated = lazyRegex.Value.Replace(text, f);
        } else if (out != null) {
            updated = lazyRegex.Value.Replace(text, out);
        }

        if (dumpOut) {
            var tmp = updated;

            replacements | reverse for {
                tmp = tmp
                    .Insert($_.offset + $_.len, excerptColor)
                    .Insert($_.offset, highlightColor);
            };

            tmp.Split(['\r\n'],  StringSplitOptions.None) for console.line(
                '{0}{1}{0}{2}{3}',
                excerptColor,
                $_ | toPrintable,
                color.pad($_),                            
                VT100.Reset);

            console.line();
        }        

        ret updated;
    }
};

var printMatchGroup = @(displayText, g, i2, matchNum) {
    var pos = TokenHelper.GetIndexPosition(displayText, g.Index);
    _pi = macro(@(n) { (pos != null ? pos.n + 1 : 'Error calculating position') });
    var newLen;

    console.line('{0}\r\n{1}', 
        ($(i2) 0: 'Match {0}', '{1}Capture Group {2}') +
        ': Line {3:n0}, Column {4:n0}, Index {5:n0}, Length {6:n0}' :: [
            matchNum,
            groupIndent,
            i2,
            _pi(Item1),
            _pi(Item2),
            g.Index,
            g.Length
        ]
        |> highlight                
        |> (@()format(
            i2 == 0  ? '{0}{1}{0}{2}{3}' : '{1}',
            SystemColor.DarkBlue | VT100.Background,
            $_,
            new string(' ', Math.Max(0, Console.BufferWidth - 1 - ($_ | color.strLen))),
            VT100.Reset)),
        i2++ == 0 && excerptLines > -1 ?
            (fastExcerptSize == null ?
                TokenHelper
                    .GetCodeExcerpt(
                        treatAsCode ?
                            [
                                (g.Index
                                |> displayText.Remove
                                |> console.highlight),
                                highlightColor,
                                displayText.Substring(g.Index, g.Length),
                                excerptColor,
                                (g.Index + g.Length
                                |> displayText.Substring
                                |> console.highlight)
                            ]
                            |> concat
                            : displayText.Insert(g.Index + g.Length, excerptColor).Insert(g.Index, highlightColor),
                        g.Index + highlightColor.Length,
                        excerptLines) :
                displayText
                    .Substring(
                        var actualOffset = Math.Max(0, g.Index - fastExcerptSize / 2),
                        Math.Min(displayText.Length - actualOffset, g.Length + fastExcerptSize))
                    .Insert(g.Index - actualOffset + g.Length, excerptColor)
                    .Insert(g.Index - actualOffset, highlightColor))
                .TrimEnd()
                .Split(['\r\n', '\n'],  StringSplitOptions.None)
                ->(@(l) '{0}{1}{0}{2}{3}' :: [
                    excerptColor,
                    l,
                    color.pad(l),
                    VT100.Reset
                ])
                @join('\r\n')
                @+ '\r\n' :
            '{0}{1}{2}\r\n' :: [ groupIndent, toPrintable(g.Value, true) | highlight, VT100.Reset ]);
};