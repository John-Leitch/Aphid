#'meta/code/tokenMinimizer';

var context = {hashed: new HashSet[string](), list: []};

if (line == console.line) {
    delete line;
} else {
    console.error('Error creating line function');
    exit(0xbad00007);
}

var line = @{
    // repl.run();
    // var curFrame = frame();
    // repl.run();
    var ge = TokenHelper.GetCodeExcerpt;
    // line | dumpe;
    var s = frame(1).Scope;

    ret ge(s.text, s.m.Index, 0) ~: "^^\\(\\d+\\)\\s" ~: "\r?\n?$";
};

var println = @()
    line()
    |> $($args.Count)
        0: console.line,
        1: @console.line($_),
        throw new ArgumentException('Not supported yet');

var hash = @{
    if ($_ | context.hashed.Add) {
        console.line($_);

        ret true;
    } else {
        ret false;
    }
};

var list = context.list.Add;

var dexp = @{
    var s = frame(1).Scope;
    console.color.header('{0}, offset {1}' :: [ s.file, s.m.Index]);
    _exp();
};

var exp = @{
    var s = frame(1).Scope;
    _exp()
};

var parseMemoizer = memoize(string, List[AphidExpression], parse);
var findExp = new ExpressionFinder() @.Find;

var findParentNode = @(m, b)
    findExp(b, @(x) x.Index <= m.Index && (m.Index + m.Length) < x.Index + x.Length, false)
    -\@.Length
    @() $($_#!)
        0: b,
        1: $_ | first,
        $_ @skip(1) first;

var findParentNode2 = @(m, b)
    b
    @ast.whereNode(@(x, c)
        x != null &&
        m.Index >= x.Index &&
        m.Index < x.Index + x.Length)
    -\@.Length
    @() $($_#!)
        0: b,
        1: $_ | first,
        $_ @skip(1) first;

_expCore = macro(@{
    s.text | ?>parseMemoizer.Call
    @() $_ == null ? s.m : $_ @findParentNode(s.m);
});

_exp = macro(@{
    _expCore()
    // @()$_.ToString()~:["(\r\n|\n|\r)(\\s{4}|\t)", "$1"]
    |> console.code
});

var mexp = @{
    var s = frame(0).Scope;    
    _expCore() <? minTokens |> console.code;    
};

using Components.Json;

var fexp = @{
    var s = frame(0).Scope;
    _expCore() <? (new JsonFormatter() @.Format) |> console.code
};

var back = @(pattern, f) {
    var s = frame($args.Count == 1 ? 0 : f).Scope;
    var i = s.m.Index;
    while (s.text[i = i - 1] ~= pattern) { }
    
    ret s.text.Substring(i + 1, s.m.Index - i + s.m.Length - 1);
};

var pback = @() back('[\x0a\x0d\x20-\x7f]', 1);

var fwd = @(pattern, f, skip) {
    var s = frame($args.Count == 1 ? 0 : f).Scope;
    var off = $args.Count == 3 ? skip : 0;
    var i = s.m.Index + off;
    while (s.text[i = i + 1] ~= pattern) { }
    
    ret s.text.Substring(s.m.Index + off, i - s.m.Index - off);
};

var pfwd = @() fwd('[\x0a\x0d\x20-\x7f]', 1);

var scan = @(pattern, f) {
    var f2 = $args.Count == 1 ? 1 : f + 1;
    ret back(pattern, f2) + fwd(pattern, f2, 2);
};

var pscan = @() scan('[\x0a\x0d\x20-\x7f]', 1);