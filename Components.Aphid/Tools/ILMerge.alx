using Components.External.ConsolePlus;
using System.Diagnostics;
using System.Linq;
using System.IO;
using System.Reflection;

#'IO';
#'Meta';
#'Core/Operators';
#'Cli/Print';
#'Cli/Console';
#'System/Nuget';
#'System/Cryptography';

fatal = @{
    $_ | printError;
    Environment.Exit(0xbad81);
};

head('Aphid Merge Tool');
var exe = Assembly.GetEntryAssembly().Location | io.full;

if (exe | io.name ~= 'Portable') {
    printInfo('Executing assemblies already merged, exiting');
    exit(0);
}

nuget.init();

_facade = macro(@(f) {
    'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\Facades\\' + f
});

var args = new List[string](getCommandLineArgs());
var isUnattended = args.Contains('-unattended');
isUnattended = true;
var asms = [] !?;

var flags = '/ndebug /zeroPeKind';

var paths = [
        Assembly.GetEntryAssembly().Location | Path.GetDirectoryName,
        'c:/tools/ilmerge',
    ]
    -?isDir;

var getILMerge = @() paths
    -<(@() Directory.EnumerateFiles($_, 'ilmerge.exe', SearchOption.AllDirectories))
    |> Enumerable.FirstOrDefault;
    
var ilmergeExe = getILMerge();

if (ilmergeExe == null) {
    print('Loading NuGet.Core');
    using NuGet;
    
    if (PackageRepositoryFactory == null) {
        fatal('Failed loading Nuget.Core');
    }

    print('Connecting to repository');
    var repo = PackageRepositoryFactory.Default.CreateRepository("https://packages.nuget.org/api/v2");
    var packageManager = new PackageManager(repo, '.\\');

    print('Installing package ILMerge');
    packageManager.InstallPackage('ILMerge');
    ilmergeExe = getILMerge();

    if (ilmergeExe == null) {
        fatal('Could not find ilmerge.exe');
    }

    printSuccess('ILMerge installed');
} else {
    printInfo('ILMerge already installed');
}

var outExe = exe |> io.base @+ 'Portable.exe' @io.prefix(exe | io.up);

var aphidDll = AppDomain.CurrentDomain
    .GetAssemblies()
    ~|'Components\\.Aphid'
    @.Location;

var logFile = exe | io.up @io.end('log.txt');
printInfo('Creating log {0}', logFile);
File.WriteAllText(logFile, '');

if (outExe | io.file) {
    printInfo('Deleting old binary {0}', outExe);
    io.del(outExe);
}

var procArgs =
    '/target:{0} ' +
    '/log:{1} ' +
    '/targetplatform:v4.5,' +
    '"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.7.2" ' +
    '/out:{2} {3} {4}':: [
        Path.GetExtension(outExe).Substring(1),
        logFile,
        outExe,
        exe,
        aphidDll,
    ];
    
procArgs @print('Starting ilmerge.exe with args ~Magenta~{0}~R~');


var si = new ProcessStartInfo(ilmergeExe, procArgs);   
si.UseShellExecute = false;
var p = Process.Start(si);
printQuery('Waiting for ilmerge to finish');
p.WaitForExit();
printSuccess('ilmerge done running');

var failure = 
    logFile
    | io.text
    @()
        $_.Contains('was not merged in correctly. It is still listed as an external reference in the target assembly') ||
        $_.Contains('Duplicate assembly name ') ||
        $_.Contains('ILMerge.Merge: ERROR');

if (failure) {
    print('~Red~Failed merging dll~R~');
    logFile | io.text | Console.WriteLine;
    Environment.Exit(1);
}

//Process.Start('ildasm', 'AphidPortable.exe');
if (!isUnattended) {
    Process.Start(logFile);
}

new FileInfo(outExe) @.Length @print('Asm size: ~Cyan~{0:n0}~R~');

if (!isUnattended) {
    Process.Start(outExe);
}
