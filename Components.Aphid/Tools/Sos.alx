{
    title: 'SOS Launcher',
    version: '1.0.0.0',
    company: 'AutoSec Tools LLC',
    copyright: 'Â© AutoSec Tools LLC 2019',
    showConsole: true,
    args: {
        string path: '-path',
        string filter: '-filter',
        bool watch: '-watch',
        bool hide: '-hide',
    },
};

#'Std';
#'Sos.Actions';

head('SOS Dump Analyzer');
print();
var cdbPath = 'c:\\debuggers\\cdb.exe';

if (cdbPath | io.file == false) {
    printError('Could not find CDB at ~Yellow~{0}~R~', cdbPath);
    exit(0xbad01);
} else if (args.path | String.IsNullOrEmpty) {
    print('Sos { -path [dump path] -filter [search pattern] -watch }');
    exit(1);
} else if (args.path | io.dir == false) {
    printError('Could not find path ~Yellow~{0}~R~', args.path);
    exit(0xbad02);
}

if (args.filter | String.IsNullOrEmpty) {
    args.filter = '*.dmp';
    printInfo('Using default filter ~Magenta~{0}~R~', args.filter);
}

if (args.watch) {
    if (args.hide) {
        console.hide();
    }

    var activeCount = 0;
    var activeSync = new Object();
    var fsw = new FileSystemWatcher(args.path, args.filter);
    fsw.NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.CreationTime;
    fsw.IncludeSubdirectories = true;
    fsw.add_Created(@(o, e) {
        async.background(@{
            lock (activeSync) {
                if (args.hide && activeCount == 0) {
                    console.show();
                }

                activeCount++;
            }

            try {
                printInfo('Crash dump detected: ~Yellow~{0}~R~', e.FullPath);

                

                while (true) {
                    try using (io.open.read(e.FullPath)) { }
                    catch (e) {
                        printError('Dump locked, sleeping');
                        async.sleep(1000);
                        continue;
                    }

                    break;
                }

                e.FullPath | analyzeDump;
            } finally {
                lock (activeSync) {
                    activeCount--;

                    if (args.hide && activeCount == 0) {
                        console.hide();
                    }
                }
            }
        });
    });

    fsw.EnableRaisingEvents = true;
    printQuery('Waiting');
    Thread.Sleep(-1);
} else {
    args.path @io.find.files(args.filter)->analyzeDump;
    printSuccess('Done');
}



