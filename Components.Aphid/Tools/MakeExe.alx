{
    title: 'MakeExe',
    version: '1.0.0.0',
    company: 'AutoSec Tools LLC',
    copyright: '© AutoSec Tools LLC 2018',
    showConsole: true,
};

#'Std';
#'Meta\\Code\\Compiler';
#'Meta\\Code\\Generation\\IL';
#'System\\Nuget';
using Components.Aphid.Interpreter;
using System.IO;
using System.Diagnostics;
using System.Reflection;
using System.Reflection.Emit;
head('MakeExe');

var args = console.bindArgs({
    bool noMerge: '-noMerge',
    bool medusa: '-medusa',
    bool dumpCode:'-dumpCode',
});

var usage = 'MakeExe {-noMerge} {-medusa} {-dumpCode} [script name] {exe name} {merge assemblies/search paths...}';

if (!args.anyRemaining) {
    print(usage);
    exit(1);
}

var script = args.remaining[0] | io.full;
var scriptDir = script | io.up;

var asmName = args.remaining.Count >= 2 ?
    args.remaining[1] :
    args.remaining[0] @io.ext('exe');

var extraRefs = args.remaining.Count > 2 ? args.remaining @skip(2) : [];

if (args.noMerge && (extraRefs | any)) {
    printCriticalError(
        'Merge assemblies and/or search paths cannot be used ' +
        'when -noMerge is enabled.');
    exit(0x2);
}

printInfo('Parsing script');

if (!(script | io.file)) {
    printCriticalError('Could not find script ~Yellow~{0}~R~', script);
    exit(0x3);
}

var properties = {
    name: asmName | Path.GetFileName,
    path: asmName,
    title: asmName | Path.GetFileNameWithoutExtension,
    version: '1.0.0.0',
    showConsole: true,
};

var scriptAst = script | AphidParser.ParseFile;

if (scriptAst.Count >= 0 && scriptAst[0].GetType() == ObjectExpression) {
    var p = scriptAst[0] |> evalNode;
    p |> keys -> @() properties.{$_} = p.{$_};
}


var outFile = properties.path | io.full;
var getOutFile = @Path.ChangeExtension(outFile);

([ getOutFile('pdb'), outFile ]-?io.file)
    -%@printInfo('Deleting ~Cyan~{0}~R~')
    ->io.del;

if (!args.medusa) {
    printInfo('Starting preprocessing');
    preprocessor.inlineScripts = true;
    var srcAst = scriptAst | preprocessor.transform;

    printSuccess('Preprocessing complete');
    printInfo('Projecting into bytecode', byteCodeFile);
    var byteCode = srcAst | AphidByteCode.Encode;
    printSuccess('Projected into ~Cyan~{0:n0}~R~ byte stream', byteCode.Length);

    if (args.dumpCode) {
        subhead('Code Dump Begin');

        var code = byteCode
            | AphidByteCode.Decode
            // ->(@()$_.ToString() + (($_.IsStatement() || $_.isUsing()) ? '' : ';\r\n'))
            ->(@()$_.ToString() + ($_.IsStatement() ? '' : ';\r\n'))

            // ->(@()$_.ToString() +
            //     (($_.IsStatement() ||
            //     ($_.Operator defined && $_.Operator == AphidTokenType.retKeyword)) ?
            //         '' :
            //         ';\r\n'))
            @join('\r\n');

        code |> SyntaxHighlightingFormatter.Format @print('{0}');

        subhead('Code Dump End');
        print();    
        var codeDumpFile = 'exe.dump.alx' | getOutFile;
        code @io.txt(codeDumpFile);
        codeDumpFile @printSuccess('Dumped embedded code to ~Green~{0}~R~');
    }

    properties.streams = { ByteCode: new MemoryStream(byteCode) };
    printInfo('Assembly attributes:');
    properties |> keys -> @() print('    [{0}] ~White~{1}~R~', $_, properties.{$_});
    print();

    printInfo('Creating module from ~Cyan~{0}~R~', script);

    var addAttrs = @(asm) {
        if (!(properties.mergeAttrs defined)) {
            ret null;
        }

        subhead('Attribute Merging');

        properties.mergeAttrs->@(attrMerge) {
            var srcAsm = load attrMerge.asm;

            if (srcAsm == null) {
                printError(
                    'Failed copying attributes, could not load source assembly ~Yellow~{0}~R~',
                    attrMerge.asm);
                ret null;
            }

            printQuery('Loaded ~Cyan~{0}~R~', srcAsm);
            
            if (attrMerge.patterns defined && (attrMerge.patterns #!) > 0) {
                print(
                    '    {0} using namespace patterns:\r\n{1}',
                    srcAsm,
                    attrMerge.patterns->@format('    {0}')@join('\r\\n'));
            }
            
            var clonedAttrs = attrMerge.patterns-<@(p) srcAsm @asmAttrs.clone(p);

            if (clonedAttrs | any) {
                clonedAttrs #! @printSuccess('Cloned ~Cyan~{0}~R~ assembly attributes');
                clonedAttrs->asm.SetCustomAttribute;
            } else {
                printError('Failed to match any assembly attributes');
            }
        }
    };


    importOpcodes();
    @(il, asmObj){
        asmObj.asm | addAttrs;
        var e = $_.Emit;
        $_.DeclareLocal(AphidInterpreter);
        e(Newobj, AphidInterpreter.GetConstructor([]));
        e(Stloc_0);

        e(Ldloc_0);
        e(Ldstr, script);
        e(Call, AphidInterpreter.GetMethod('SetScriptFilename', [ string ]));    

        e(Ldloc_0);
        e(Ldstr, 'ByteCode');
        e(Call, AphidByteCode.GetMethod('DecodeResource'));
        
        e(Call, AphidInterpreter.GetMethod('Interpret', [ List[AphidExpression] ]));
        e(Ret);
    }
    @createProgram(properties);

} else {
    printInfo('Projecting into C#', byteCodeFile);
    try {
        var pkgDir = io.app.path('packages');
        if (pkgDir | io.not.dir) {
            pkgDir | io.mkdir;
        }

        csharp.optimize();

        if (!properties.showConsole) {
            csharp.params.CompilerOptions += ' -target:winexe ';
        }

        var icon = 'a.ico';            
        var iconPath = this.'$script' @io.sibling(icon) |> io.full;
        printInfo('Extracted embedded Aphid icon to ~Cyan~{0}~R~', iconPath);
        
        aphid.CurrentExpression.Context.Code 
        @resourceComment.extractBinary(icon)
        @io.bytes(iconPath);

        csharp.params.CompilerOptions += ' -debug- ';
        csharp.params.CompilerOptions += ' -parallel+ ';
        
        csharp.params.CompilerOptions += ' -platform:{0} ' ::
            $(Assembly.GetEntryAssembly().GetName().ProcessorArchitecture)
                ProcessorArchitecture.X86: 'x86',
                ProcessorArchitecture.Amd64: 'x64',
                ProcessorArchitecture.MSIL: 'anycpu',
                throw new InvalidOperationException('Unknown process architecture');

        csharp.params.CompilerOptions += ' -langversion:preview ';
        csharp.params.CompilerOptions += ' -win32icon:"{0}" ' :: iconPath;
        
        aphidCompiler.buildExe(script, outFile);
    } catch (e) {
        printError('Compilation failed');
        e.message | print;
        e.exception | print;
        exit(0xbad5235);
    }
}


new FileInfo(outFile)
@.Length
@printSuccess('Created executable ~Green~{0}~R~ (~Cyan~{1:n0}~R~ bytes)', outFile);

if (!args.noMerge) {
    var ilMergeBin;
    
    0..2 for {
        ilMergeBin = io.app.path('packages') @io.first.file('ilmerge.exe');

        if (ilMergeBin == null) {
            if ($_ == 0) {
                installPackage('ilmerge');
            } else {
                printError('Could not find ilmerge.exe');
                exit(0xbad81);
            }            
        } else {
            break;
        }
    };

    var asm = load ilMergeBin;

    if (asm != null) {
        printSuccess('Loaded ~Cyan~{0}~R~:\r\n    {1}', asm, asm.Location);
    } else {
        printCriticalError('Could not load ~Yellow~{0}~R~', ilMergeBin);
        exit(0xbad02);
    }

    using ILMerging;

    var il = new ILMerge();
    il.Log = true;
    il.LogFile = properties.path + '.ilmerge.txt';

    if (il.LogFile | io.file) {
        il.LogFile | io.del;
    }

    var searchDirs = new List[string]();
    var refPath = 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.8';

    [
        // 'C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319',
        // 'C:\\windows\\Microsoft.NET\\Framework64\\v4.0.30319',
        refPath,
    ]->searchDirs.Add;

    extraRefs-?io.dir->searchDirs.Add;

    if (searchDirs | any) {
        searchDirs | toArray | il.SetSearchDirectories;
    }

    il.SetTargetPlatform('v4', refPath);
    var extraAsms = new List[string]();
    extraRefs-?(@()!searchDirs.Contains($_))->extraAsms.Add;

    var inputAsms = 
        combine([
            properties.path, AphidObject.Assembly.Location ],
            extraAsms | toArray)
        | toArray;

    [
        [ 'Merging assemblies', inputAsms ],
        [ 'Setting search directories' , searchDirs ]
    ]
    ->@(p) p[1] @join('\r\n    ') @printInfo('{0}:\r\n    {1}', p[0]);
    inputAsms | il.SetInputAssemblies;
    il.OutputFile = outFile;
    printInfo('Merging into final binary ~Cyan~{0}~R~', il.OutputFile);
    il.Merge();
}

printSuccess('Done');


    /*$a.ico
    
    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

    oci.a$*/