//#'DebugDeploy';
#'Std';
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

head('Binary Trace Parser');

// Console.Clear();

////////////////////////////////////////////////////////////////
// uint32 | Id
//  uint8 | Enter/Eeave = 1/0
//    var | Name
// 
// _framePerformanceBinaryWriter.Write(id);
// _framePerformanceBinaryWriter.Write(true);
// _framePerformanceBinaryWriter.Write(frame.Name);


// _framePerformanceBinaryWriter.Write(id);
// _framePerformanceBinaryWriter.Write(false);
// _framePerformanceBinaryWriter.Write(tup.Item1);
// _framePerformanceBinaryWriter.Write(tup.Item2.ElapsedTicks);
// _framePerformanceBinaryWriter.Write(tup.Item2.ElapsedMilliseconds);

class of long FrameProfile {
    int ThreadId,
    string Name,
    Hits,
    Ticks,
    TicksExclusive,
    FrameProfile list ChildFrames,
};

var dumpFrameJson = @{
    #'Data\\Serialization';
    $_ |> toJson |> Cli.StyleEscape |> print;
};

var dumpFrame = @{
    #'Data\\Serialization';
    $_ |> toJson |> Cli.StyleEscape |> print;
};

var cliArgs = getCommandLineArgs();

cliArgs.Length == 2 !! 'aphid ParseBinaryPerformanceTrace [file]';
!File.Exists(var trace = cliArgs[2] | Path.GetFullPath) !! ('Could not find trace ~Yellow~{0}~R~' :: trace);

var threadFiles = Directory.GetFiles(
    Path.GetDirectoryName(trace),
    Path.GetFileName(trace) + "*.thread");


if (threadFiles.Length != 0) {
    printInfo("Thread files found:");
    threadFiles @print('  {0}');
}

//var trace = 'C:\\source\\Aphid\\Aphid\\bin\\Debug\\AphidFramePerformance.ea27e90b-43c3-4f26-aa7b-7bc3781508d0.dat';
var nameReader = new BinaryReader(trace + '.names' |> File.OpenRead);
var names = new List[string]();

while (nameReader.BaseStream.Position < nameReader.BaseStream.Length) {
    nameReader.ReadString() |> names.Add;
}

var reader = new BinaryReader(trace |> File.OpenRead);
var profileHeader = reader.ReadString();
print(profileHeader.TrimEnd('\r\n'));
print();
// var header = r.ReadString();

// reader.dir();
// reader.BaseStream.dir();

var threadStacks = {};
var root = new List[FrameProfile]();
var parsed = 0;
var frameList = new List[FrameProfile]();
var frameTotals = {};
var frameTotalsList = new List[FrameProfile]();

using System.Threading;

var t = new Thread(@{
    var lastPct = 0;
    print();
    while (true) {
        Thread.Sleep(500);

        try {
            var pos = reader.BaseStream.Position;
            var len = reader.BaseStream.Length;
            var remaining = len - pos;
            var pct = Math.Round(pos / len * 100, 2);
            Console.CursorTop = Console.CursorTop - 1;
            printInfo(
                ('{0:n0}/{1:n0} {2}% (+{3}%)' :: [ pos, len, pct, pct - lastPct ])
                    .PadRight(Cli.BufferWidth - 4)
            );
            lastPct = pct;

            if (pos == len) {
                printSuccess('Done parsing trace\r\n');
                break;
            }
        } catch (e) {
            break;
        }
    }
});

t.IsBackground = true;
t.Start();

var s = reader.BaseStream;
var f = FrameProfile;
var len = s.Length;
var stackType = Stack[FrameProfile];
var listType = List[FrameProfile];
var readBool = reader.ReadBoolean;
var readInt32 = reader.ReadInt32;
var readInt64 = reader.ReadInt64;
var addFrame = frameList.Add;
var addRoot = root.Add;
// var lastThread = -1;
var stack = new stackType();
var push;
var pop;
var peek;
push = stack.Push;
pop = stack.Pop;
peek = stack.Peek;

var addTotals = frameTotalsList.Add;
//s.dir();exit(0);
while (s.Position < len) {    
    //var id = readInt32();    

    var enter = readBool();    

    if (enter) {
        var name = names[readInt32()];
        var frame = new f();
        frame.ThreadId = 1;
        frame.Name = '^' + name;
        frame.ChildFrames = new listType();
        
        if (stack.Count > 0) {
            peek().ChildFrames.Add(frame);
        } else {
            lock root addRoot(frame);
        }

        push(frame);
        lock frameList addFrame(frame);
        // frame.Name |> Cli.StyleEscape |> print;
    } else {
        var curFrame = pop();
        curFrame.Ticks = readInt64();
        var arr = curFrame.ChildFrames;

        if (arr.Count == 0) {
            curFrame.TicksExclusive = curFrame.Ticks;            
        } else {
            _exclusive = macro(@(n) { curFrame.n - (arr->@.n+>@(x, y) x + y) });
            curFrame.TicksExclusive = _exclusive(Ticks);            
        }

        lock frameTotals {
            if (frameTotals.{curFrame.Name} defined) {
                var t = frameTotals.{curFrame.Name};
                t.Hits = t.Hits + 1;
                t.Ticks += curFrame.Ticks;
                t.TicksExclusive += curFrame.TicksExclusive;
            } else {
                var t = new f();
                t.Hits = 1;
                t.Name = curFrame.Name;
                t.Ticks = curFrame.Ticks;
                t.TicksExclusive = curFrame.TicksExclusive;            
                frameTotals.{curFrame.Name} = t;
                addTotals(t);
            }
        }
    }
}

 t.Join();
 reader.Dispose();

#'system/nuget';
#'data/msgpack';

var bytes = frameTotalsList | msgpack.pack;
bytes @File.WriteAllBytes(trace + '.totals');
frameTotalsList = bytes @msgpack.unpack(List[FrameProfile]);

bytes = root | msgpack.pack;
bytes @File.WriteAllBytes(trace + '.reconstructed');
root = bytes @msgpack.unpack(List[FrameProfile]);

var printFrame = @(frame, indent, printFunc)
    (printFunc defined ? printFunc : Console.WriteLine)(
        (indent defined ? indent : '') +
        ($_.Hits != 0 ? 
            '{0}, Ticks: {1:n0} ({2:n0}), Exclusive: {3:n0} ({4:n0}), Hits: {5:n0}{6}' :
            '{0}, Ticks: {1:n0}, Exclusive: {3:n0}{6}'),
        $_.Name.Substring(1).Replace('\r', '').Replace('\n', '\\n'),
        $_.Ticks,
        $_.Hits != 0 ? ($_.Ticks / $_.Hits).float() : 0,
        $_.TicksExclusive,
        $_.Hits != 0 ? ($_.TicksExclusive / $_.Hits).float() : 0,
        $_.Hits,
        printFunc defined ? '\r\n' : '');

var dumpTopTicks = @(count)
    [
        [ 'inclusive ticks', @.Ticks ],
        [ 'exclusive ticks', @.TicksExclusive ],
        [ 'avg inclusive ticks', @(x) x.Ticks / x.Hits ],
        [ 'avg exclusive ticks', @(x) x.TicksExclusive / x.Hits ]
    ]->@{
        subhead('Top {0:n0} slowest by ' + $_[0] :: count.long());

        var ordered = frameTotalsList-/$_[1];
        Enumerable.Take(ordered, count)->printFrame;

        print();
    };

dumpTopTicks(250);

var sb = new StringBuilder();
var dumpTree = @(root, indent) {
    var i = indent defined ? indent : '';
    root->@{
        printFrame($_, i, sb.AppendFormat);
        dumpTree($_.ChildFrames, i + '  ');
    };

    ret sb;
};

subhead('Frame Tree (Thread 0x{0:x8})' :: [ root[0].ThreadId ]);
var tree = root |> dumpTree;
tree @File.WriteAllText(trace + '.tree');
tree |> Console.WriteLine;

printSuccess('Done');