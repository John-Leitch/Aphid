#'std';
#'system/cryptography';
#'re.search';
#'re.evaluators';

runtime.log();
// #'re.db';

{
    string path: '-p',
    string filter: '-f',
    string excludePattern: '-x',
    bool replace: '-r',
    bool useEvaluator: '-e',
    bool dumpOut: '-d',
    bool recurse: '-s',
    string out: '-o',
    bool write: '-w',
    int indentSize: '-i',
    int excerptLines: '-l',
    int threads: '-t',
    bool uniqueFiles: '-1',
    int verbosity: '-v',
    bool disableCaptures: '-c-',
    bool bareMode: '-b',
    int bareGroup: '-g',
    bool hashValues: '-hs',
    bool treatAsCode: '-c',
    bool compileAsm: '-asm',
    bool compileLLex: '-llex',
    bool previewReplacements: '-pr',
    int fastExcerptSize: '-fe',
    string profile: '-profile',
    int maxSize: '-max',
    string decoderNames: '-decoders',
}
| importArgs;

_da = macro(@(n, v) { if (n == null) { n = v } });
_da(filter, '*');
_da(excludePattern, null);
_da(path, io.cd());
_da(indentSize, 2);
_da(excerptLines, 3);
_da(verbosity, 2);
_da(dumpOut, false);
_da(hashValues, false);
_da(profile, 'Default');
_da(threads, Environment.ProcessorCount / 2 @Math.Min(1));
_da(decoderNames, 'iso-8859-1');

if (out != null) {
    out = out @format('"{0}"') StringParser.Parse;
}

if (bareGroup != null) {
    bareMode = true;
}

if (hashValues && !bareMode) {
    console.error('-hs only supported in bare mode.');
    exit(0xbad52);
}

var toPrintable = @(text, ignoreLines) $_  ~: [
    ignoreLines defined && ignoreLines ?
        '[\\x00-\\x09\\x0b-\\x0c\\x0e-\\x1f\\x7f-\xff]' :
        '[\\x00-\\x1f\\x7f-\xff]',
    '.'
];

async.degree(threads);
var groupIndent = ' ' * indentSize;
var reOptions = RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.Multiline;

if (!anyRemaining) {
    SystemColor.DodgerBlue.CopyTo(SystemColor.CadetBlue, 0);
    var hdr = 'Lycomorpha {0}' :: AphidExpression.Assembly.GetName().Version;
    var y;

    if (Environment.UserInteractive) {
        cls();
        y = Console.CursorTop;
    }

    color.header(hdr);
    print(
        aphid.InitialScope.'$block'
        >$ast.is.text
        |> highlight
        @()$_
            .Split('\n')
            ->(@()$_.Trim().Contains('$R$')?
                $_~:'\\$R\\$'|>color.remove:
                $_)
            @join('\n'));

    if (Environment.UserInteractive) {
        color.glitch.header(hdr, y);
    }

    exit(1);
}

var startTime = DateTime.Now;

if (verbosity >= 2) {
    console.info('Initializing');
}

var decoders;

try {
    decoders = decoderNames.Split(',;')->(@()$_.Trim())->Encoding.GetEncoding |> toArray;
} catch (e) {
    console.error('Error getting decoder: {0}', e.message);
    exit(0xbad88);
}

if ((replace || write || previewReplacements || out != null) && (decoders#!) != 1) {
    console.error('Cannot perform text replacement when more than one decoder is specified');
    exit(0xbad8a);
}

var execEvaluator = useEvaluator ?
    Environment.CommandLine
        | ArgLexer.GetTokenInfo
        >^(@(x) x.Value == '-e')
        @.Offset
        @+2
        |> Environment.CommandLine.Substring
        |> parseFunc :
    @{};

var pattern = remaining[0];

this.'$script' @io.sibling('lycomorphaprofiles') aphid.Loader.SearchPaths.Add;
aphid.Loader.LoadScript('profile', false);

if (profile != null) {    
    aphid.Loader.LoadScript(profile, false);
}

var func = recurse ? io.all.files : io.files;
var styleEscape = Cli.StyleEscape;

if (Console.IsInputRedirected) {
    console.stdIn.txt() @searchFileText('CONIN$', new BinaryReader(Console.OpenStandardInput()));
}

if (!Console.IsInputRedirected || mapped.filter || mapped.path) {
    [ path, filter ]-?io.file->io.full for (f) {
        path = f | io.up;
        filter = f | io.name;
    };

    if (verbosity >= 2) {
        console.query('Enumerating files in {0} using filter {1}', path, filter);
    }

    var files = func(path, filter)
        @where(@(file) {
            if (excludePattern != null && Regex.IsMatch(file, excludePattern, reOptions)) {
                if (verbosity >= 4) {
                    info('Skipping ~Yellow~{0}~R~ due to exclude pattern', file | styleEscape);
                }

                ret false;
            }

            ret true;
        });

    if (maxSize != null) {
        files = files-?@() io.len($_) <= maxSize;
    }

    files = files->io.full |> toArray;

    var t = files.Length;

    if (verbosity >= 2) {
        console.success('Found {0:n0} files', t);
    }

    if (t != 0) {
        var titleBackup = Console.Title;

        var i = -1;
        var titleFmt = '({0:n2}%) {1} - re' + Environment.NewLine;
        setTitle = macro(@{ lock Console.Out Console.Title = titleFmt :: [ ++i / t.double() * 100, f ]; });
        'Initializing...' @(f) setTitle();

        try {
            Parallel.ForEach(
                files,
                @(f){
                    decoders for searchFile(f, $_);
                    setTitle();
                });
        } finally {
            Console.Title = titleBackup;
        }
    }

    if (context.list.Count > 0) {
        context.list | dump;
    }
}

if (verbosity >= 2) {
    startTime | DateTime.Now.Subtract @printSuccess('Finished in ~Green~{0}~R~');
}

exit();
#'re.help';