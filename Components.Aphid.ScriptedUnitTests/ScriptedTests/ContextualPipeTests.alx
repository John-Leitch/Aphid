using System;
using System.Reflection;
var f = BindingFlags;
#'Testing\\AopTest';

contextual pipe group;

_fun = macro(@(flag, fun) {
    equal begin;
    @{ (flag | fun) == (flag |> fun) };

    call equal begin;
    @{ (flag | fun) == fun(flag) };
    
    lhs ref begin;
    @{ var x = (flag | fun); x == (flag |> fun) };

    rhs ref begin;
    @{ var x = (flag |> fun); (flag | fun) == x };

    both ref begin;
    @{ var x = (flag | fun); var y = (flag |> fun); x == y };
});

isTrue;
_fun(10, Convert.ToUInt32);
_fun(BindingFlags.DeclaredOnly, Convert.ToUInt32);
_fun(BindingFlags.DeclaredOnly | BindingFlags.CreateInstance, Convert.ToUInt32);
_fun(f.DeclaredOnly, Convert.ToUInt32);
_fun(f.DeclaredOnly | BindingFlags.CreateInstance, Convert.ToUInt32);
_fun(BindingFlags.DeclaredOnly | f.CreateInstance, Convert.ToUInt32);
_fun(f.DeclaredOnly | f.CreateInstance, Convert.ToUInt32);

_flag = macro(@(x, y, z) {
    equal with self begin;
    @{ x == x };
    @{ y == y };
    @{ z == z };

    not equal with other begin;
    @{ x != y };
    @{ x != z };
    @{ y != x };
    @{ y != z };
    @{ z != x };
    @{ z != y };

    single bitwise pipe equal begin;
    @{ x | y == x | y };
    @{ x | z == x | z };
    @{ y | x == y | x };
    @{ y | z == y | z };
    @{ z | x == z | x };
    @{ z | y == z | y };

    single bitwise pipe reverse equal begin;
    @{ x | y == y | x };
    @{ x | z == z | x };
    @{ y | x == x | y };
    @{ y | z == z | y };
    @{ z | x == x | z };
    @{ z | y == y | z };

    self bitwise pipe equal begin;
    @{ x | x == x | x };
    @{ y | y == y | y };
    @{ z | z == z | z };
    @{ x | x | x == x | x | x };
    @{ y | y | y == y | y | y };
    @{ z | z | z == z | z | z };

    multi bitwise pipe equal begin;
    @{ x | y | z == x | y | z };
    @{ z | y | x == x | y | z };
    @{ z | x | y == y | x | z };

    multi bitwise pipe equal with func begin;

    @{ x | y | z | Convert.ToUInt32 == x | y | z | Convert.ToUInt32 };
    @{ z | y | x | Convert.ToUInt32 == x | y | z | Convert.ToUInt32 };
    @{ z | x | y | Convert.ToUInt32 == y | x | z | Convert.ToUInt32 };

    mixed func test begin;
    @{ (x | Convert.ToUInt32 @Enum.ToObject(BindingFlags)) == x };
    
    // Todo: fix
    //@{ (x | Convert.ToUInt32) | (y | Convert.ToUInt32) == x | y | Convert.ToUInt32 };
    
    @{ (x | Convert.ToDecimal) | (y | Convert.ToDecimal) == x | y | Convert.ToDecimal };
    @{
        ((x | Convert.ToDecimal) | (y | Convert.ToDecimal) @Enum.ToObject(BindingFlags)) ==
        (x | y | Convert.ToDecimal | @Enum.ToObject(BindingFlags))
    };
});

_flag(BindingFlags.DeclaredOnly, BindingFlags.CreateInstance, BindingFlags.ExactBinding);
_flag(f.DeclaredOnly, BindingFlags.CreateInstance, BindingFlags.ExactBinding);
_flag(BindingFlags.DeclaredOnly, f.CreateInstance, BindingFlags.ExactBinding);
_flag(f.DeclaredOnly, BindingFlags.CreateInstance, f.ExactBinding);
_flag(f.DeclaredOnly, f.CreateInstance, BindingFlags.ExactBinding);
_flag(f.DeclaredOnly, BindingFlags.CreateInstance, f.ExactBinding);
_flag(BindingFlags.DeclaredOnly, f.CreateInstance, f.ExactBinding);
_flag(f.DeclaredOnly, f.CreateInstance, f.ExactBinding);

incompatible type begin;
fault;
_ = macro(@(x) { @{ x == x } });
_(BindingFlags.DeclaredOnly | BindingFlags);
_(BindingFlags | BindingFlags.DeclaredOnly);
_(BindingFlags | Convert.ToUInt32);
_(f.DeclaredOnly | BindingFlags);
_(f | BindingFlags);
_(f | BindingFlags.CreateInstance);
_(f | f.CreateInstance);
_(f | Convert.ToUInt32);
_(Convert.ToUInt32 | BindingFlags.CreateInstance);
_(Convert.ToUInt32 | BindingFlags);
_(Convert.ToUInt32 | f);
_(Convert.ToUInt32 | Convert.ToUInt32);
_(f.DeclaredOnly |> BindingFlags.CreateInstance);