/*nostdheader*/

// Todo:
// * InlineStrings
// * MapClrObject
// * StringReferenceThreshold
// * SplitStrings
// * StringChunkSize
using System.Linq;

var root = this;
var foo = {
    bar: 9,
    test: 'foo',
    singleQuote: "'",
    doubleQuote: '"',
    backslash: '\\',
    backslashAlpha: '\\a',
    lazy: Enumerable.Take(1..10, 4),
    '\\': 'foo',
    f: @(x) x * x
};

// var roundTrip = serialize @> deserialize;
//var s = aphid.Serializer;

var p = @(doubleQuote, quoteKeys, noLazyLists) {
    var s = new AphidSerializer(aphid);
    s.UseDoubleQuotes = doubleQuote;
    s.AlwaysQuoteKeys = quoteKeys;
    s.QuoteToStringResults = true;
    s.IgnoreFunctions = true;
    //s.IgnoreSpecialVariables = noSpecials;
    s.IgnoreSpecialVariables = true;
    s.IgnoreLazyLists = noLazyLists;

    ret s;
};

c = macro(@(name, init, obj, check){
    c2(name, init, obj, check, WithNoMaxElements, -1);    
    c2(name, init, obj, check, WithTenMaxElements, 10);
    c2(name, init, obj, check, WithOneThousandMaxElements, 1000);
    c2(name, init, obj, check, WithIntMaxMaxElements, int.MaxValue);
    c2(name, init, obj, check, WithZeroMaxElements, 0);

});

c2 = macro(@(name, init, obj, check, name2, maxElements) {
    c3(name, init, obj, check, name2, maxElements, WithSafeCollections, true);
    c3(name, init, obj, check, name2, maxElements, WithUnsafeCollections, false);
});

c3 = macro(@(name, init, obj, check, name2, maxElements, name3, safeCollections){
    c4(name, init, obj, check, name2, maxElements, name3, safeCollections, WithSplitStrings, true);
    c4(name, init, obj, check, name2, maxElements, name3, safeCollections, WithUnsplitStrings, false);
});

c4 = macro(@(name, init, obj, check, name2, maxElements, name3, safeCollections, name4, splitStrings){
    c5(name, init, obj, check, name2, maxElements, name3, safeCollections, name4, splitStrings, With10CharChunks, 10);
    // c5(name, init, obj, check, name2, maxElements, name3, safeCollections, name4, splitStrings, With100CharChunks, 100);
    c5(name, init, obj, check, name2, maxElements, name3, safeCollections, name4, splitStrings, With1000000CharChunks, 1000000);
    c5(name, init, obj, check, name2, maxElements, name3, safeCollections, name4, splitStrings, With0CharChunks, 0);
});

c5 = macro(@(name, init, obj, check, name2, maxElements, name3, safeCollections, name4, splitStrings, name5, stringChunkSize){
    name name2 name3 begin;
    @{
        var s = init;
        s.MaxElements = maxElements.int();
        s.SafeCollectionAccess = safeCollections;
        s.SplitStrings = splitStrings;
        s.StringChunkSize = stringChunkSize;
        obj | s.Serialize | s.Deserialize @{ check |> isTrue }
    }

});

r = macro(@(obj, check) {
    //c(withSingleQuoteWithSpecials, p(false, false, false, false), obj, check);
    //c(withDoubleQuoteWithSpecials, p(true, false, false, false), obj, check);    
    c(withSingleQuoteWithoutSpecials, p(false, false, false), obj, check);
    c(withDoubleQuoteWithoutSpecials, p(true, false, false), obj, check);    
    
    //c(withDoubleQuoteAlwaysQuoteKeysWithSpecials, p(true, true, false, false), obj, check);
    c(withDoubleQuoteAlwaysQuoteKeysWithoutSpecials, p(true, true, false), obj, check);
    
    //c(withDoubleQuoteAlwaysQuoteKeysWithSpecialsWithoutLazyLists, p(true, true, false, true), obj, check);
    c(withDoubleQuoteAlwaysQuoteKeysWithoutSpecialsWithoutLazyLists, p(true, true, true), obj, check);
    
    //c(withSingleQuoteWithSpecialsWithoutLazyLists, p(false, false, false, true), obj, check);
    //c(withDoubleQuoteWithSpecialsWithoutLazyLists, p(true, false, false, true), obj, check);
    c(withSingleQuoteWithoutSpecialsWithoutLazyLists, p(false, false, true), obj, check);
    c(withDoubleQuoteWithoutSpecialsWithoutLazyLists, p(true, false, true), obj, check);
});

#'Testing\\AopTest';

serialize group;
r(1, $_ == 1);
r('test', $_ == 'test');
r(false, !$_);
r(null, $_ == null);
//r(root, true);
//r(root, $_.foo defined);
//r(root, $_.foo.bar defined);
//r(root, $_.foo.bar == 9);
//r(root, $_.foo.test == 'foo');
//r(root, $_.foo.singleQuote == "'");
//r(root, $_.foo.doubleQuote == '"');
//r(root, $_.foo.backslash == '\\');
//r(root, $_.foo.backslashAlpha == '\\a');
//r(root, s.IgnoreLazyLists || ($_.foo.lazy #!) == 4);
r(
    root,
    ($_.foo defined) &&
    ($_.foo.bar defined) &&
    ($_.foo.bar == 9) &&
    ($_.foo.test == 'foo') &&
    ($_.foo.singleQuote == "'") &&
    ($_.foo.doubleQuote == '"') &&
    ($_.foo.backslash == '\\') &&
    ($_.foo.backslashAlpha == '\\a') &&
    (s.IgnoreLazyLists || ($_.foo.lazy #!) == 4));

fault;

@{ this |> serialize @+ '~!%$' |> deserialize };
r(1, $_ == 2);
r('test', $_ == 'testa');
r(false, $_);
r(null, $_ != null);
r(root, false);

r(root, $_.foo defined == false);
r(root, $_.foo.bar defined == false);
r(root, $_.foo.bar != 9);
r(root, $_.foo.test != 'foo');
r(root, $_.foo.singleQuote != "'");
r(root, $_.foo.doubleQuote != '"');
r(root, $_.foo.backslash != '\\');
r(root, $_.foo.backslashAlpha != '\\a');

r(root, $_.foo2 defined);
r(root, $_.foo.bar2 defined);
r(root, $_.foo.bar == 10);
r(root, $_.foo.test == 'foo2');
r(root, $_.foo.singleQuote == "A");
r(root, $_.foo.doubleQuote == 'A');
r(root, $_.foo.backslash == 'A');
r(root, $_.foo.backslashAlpha == 'A');