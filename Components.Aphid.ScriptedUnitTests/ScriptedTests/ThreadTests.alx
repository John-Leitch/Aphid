/*nostdheader*/
#'Testing\\Test';
using System.Threading;

var threadLocal = @{
    var x = 'foo';

    var thread = new Thread(@{
        var x = 9;
    });

    thread.Start();
    thread.Join();
    isFoo(x)
};

var threadClosure = @{
    var x = 'foo';
    var thread = new Thread(@{ x = 9 });
    isFoo(x);
    thread.Start();
    thread.Join();
    is9(x)
};

var threadClosureLambda = @{
    var x = 'foo';    
    var thread = new Thread(@() x = 9);
    isFoo(x);
    thread.Start();
    thread.Join();
    is9(x)
};

var threadClosureSleepJoin = @{
    var x = 'foo';
    var thread = new Thread(@{
        Thread.Sleep(100);
        x = 9;
    });
    thread.Start();
    thread.Join();
    is9(x)
};

var threadClosureDefined = @{
    var x = 'foo';
    var thread = new Thread(@{ x = 9 });
    thread.Start();
    thread.Join();
    ret x defined;
};

var threadClosureNotDefined = @{
    var thread = new Thread(@{ var x = 9 });
    thread.Start();
    thread.Join();
    ret !(x defined);
};

var threadPoolLocal = @{
    var x = 'foo';
    isFoo(x);
    var r = new ManualResetEvent(false);

    ThreadPool.QueueUserWorkItem(@{
        var x = 'bar';
        r.Set();
    });

    r.WaitOne();
    r.Dispose();
    isFoo(x);
};

var threadPoolClosure = @{
    var x = 'foo';
    isFoo(x);
    var r = new ManualResetEvent(false);

    ThreadPool.QueueUserWorkItem(@{
        x = 9;
        r.Set();
    });

    r.WaitOne();
    r.Dispose();
    is9(x);
};